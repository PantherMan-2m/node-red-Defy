[
    {
        "id": "18a7ffc09fc6eb29",
        "type": "tab",
        "label": "Recipes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "30b839ab81bb1134",
        "type": "tab",
        "label": "Recipe extras",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bdf1045c1ff841f7",
        "type": "tab",
        "label": "Dashboard  Login things",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f54c3884e1dad647",
        "type": "tab",
        "label": "Testing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec74dd5cee732abd",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "d2727ddfa00b147b"
                    },
                    {
                        "id": "33537d783e3681db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 140,
                "wires": [
                    {
                        "id": "d2727ddfa00b147b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 480,
                "y": 200,
                "wires": [
                    {
                        "id": "1ae41b3f6186f9fd",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "949607f6b34bd9cc",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "77957e2a4a73d841",
            "ae1f6ae45d87a410",
            "24816058e18ea49a",
            "488ce4a5406c7627",
            "e68ec13916526b7f",
            "f46a2cb80bccd573",
            "52ef3938019704eb",
            "59fa9f03d56e415e",
            "5f91a64e8798657b",
            "c3841d06cf0589f4",
            "d27f6ab5002978e6",
            "33c38e0493c0478e",
            "931dd22053d95cb3",
            "5df746ebebd44bb6",
            "c8123d891026eb4b",
            "371ef8ada06277c8",
            "7ec219affebfe24c",
            "997b09252b8e4915",
            "3ca8b3b202846341",
            "3dbf5fd1762c8850",
            "c44178603ccbce4f",
            "b1b60bee02c14ca1",
            "f3179f625b0a3e92"
        ],
        "x": 3014,
        "y": 4619
    },
    {
        "id": "d17f3c47f486e7a5",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eff1dbfb97a21731",
            "e4143025bc554b69",
            "6354d23031cdfbee",
            "2af240aed334e128",
            "9a5640786e5d290b",
            "81ba11cf4e91db30",
            "0a578d0d6f5a4927",
            "d3a1358038e9b2ab",
            "cd2184bca010095b",
            "7deb3586a9562614",
            "36cb6730ea690aa6",
            "4cdc769e1124e3dc",
            "74064f9dbf34c755",
            "3c05fdf23c486fc7",
            "dc677ce47fa7aa30",
            "dfafbb074fbdb135",
            "cadf1701878e219b",
            "0348ea2070a65156",
            "dba7e7f49604d884"
        ],
        "x": 3014,
        "y": 3599
    },
    {
        "id": "70073285574b9727",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "86e7790e44fc830c",
            "5392a7c2a1692cd3",
            "ebb648885e9c8737",
            "d9691dd722fbc6ec",
            "5ccd78dd8a9f75f4",
            "b161e6dd8da769ad",
            "09082d91545e7267",
            "490d53a9f6695f6a",
            "e8e9ac727f25be70",
            "8ffbd04783ad5f5f",
            "0846fc54750f91c3",
            "179bc4e7dbebc86f",
            "3ff3bacafd1fe14b"
        ],
        "x": 3274,
        "y": 4199
    },
    {
        "id": "d37fa1f93b9645e2",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aac107ca1460a3c5",
            "cdd671e535ce33e9",
            "8a78482fa36ac686",
            "3eeef4109181c7b4",
            "049fe43e60ba756b",
            "25c6ce83b52d975e",
            "eace55568a246f18"
        ],
        "x": 4294,
        "y": 4799
    },
    {
        "id": "f981e1c265314e12",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "955a3e654f4c17d3",
            "c0a868b9c85fc5d3",
            "bb112f5740443701",
            "17ec1f4b2d4c460d",
            "f02c836a4499a714",
            "6af902d695bd77d9",
            "6ee6a5f047aa0485",
            "f0090a8863ee9b95",
            "9d4e98956e2bf4f9",
            "becfa5f252994905",
            "bad0401f3c2f89f9",
            "64a746f1847bca0c",
            "a2c7ea1717d0f465",
            "29f942e02f8f6d76",
            "0f712230d6e99c10",
            "71ecb682cfc58ea9"
        ],
        "x": 1474,
        "y": 2999
    },
    {
        "id": "abe64c1a1e546309",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0dd9a3b772938d8d",
            "c4735886d61a7a6b",
            "8e39b643f9694dd0",
            "688346c179086c04",
            "bd9aeabe24a61ee8",
            "de74dee18c068b5a",
            "c5f5fb87b170cd16",
            "203050abd306fd69",
            "d08499bf9f43deef",
            "60dc9da05ac392bf",
            "7895f938e63e7582",
            "00e45812c1b90e1a",
            "8a1c869e0b987d82",
            "03c0327f0ec04a3f",
            "a6768b48ac67ad8d",
            "b2edbcc20152ae53",
            "6ffded93adfbbb5d",
            "095103012e0001e1",
            "67a7266f754cbeeb",
            "41d85ea5c2953108",
            "c11f1c2625f5f896",
            "3a687bc12cbc3c25",
            "b71a1040264deeca",
            "5120cf9346fb46c5",
            "406ccc7dc902cb53",
            "2d32d12c8fae2c9b",
            "933e8b0bc7bd52a0",
            "185b44afa9999225",
            "1663479921592aab",
            "af4288e8c2e94349",
            "66fc190d70898469",
            "ca738e9ba2db4d6c",
            "0f509689d6c3fd32",
            "c99f02b77bdfa811",
            "8f8b841779393063",
            "85cf23845f47985f",
            "b4d15f256f7be2f9",
            "1810ba298a8b4976",
            "605530a62d7a5eed",
            "3a74ed57aa9ec6c2",
            "5ded5ff5f20bcd71",
            "46444f71d9bfbd78",
            "aef8c75124ec4d91",
            "73fbb393eb0c295a",
            "7cdfaca4b49f9fb5",
            "6f9be1a02711f196",
            "88187fe0e9ae09aa",
            "fda482dc33c536e4",
            "3e463b26ab73f1fe",
            "89fa63942ea21283",
            "8c561ca872bbea81",
            "ba356abab81c0c89",
            "c7e76e05dd1ceade",
            "d552d0f3f86959ea",
            "e76f519412b6bc73",
            "24139d9313c20165",
            "7831c9b734ec555e",
            "830954b4e725e17b",
            "bbfe20f009979b2b",
            "22f929b2da66a650",
            "abff9c6d85305c60",
            "0f8174ba11462bc1",
            "a229e51f899eb102",
            "ab858f555116bee5",
            "6bc5bada2b8f6678",
            "e523b850b278a005",
            "bac4baaad1d3e026",
            "60b6021f625fa196",
            "1edb8e7848fe5ffe",
            "e66792517ddf05b7",
            "05a8ee92dea19c1e",
            "ef32ecf05d65ab73",
            "428b3190078580cc",
            "4724d66a1b7dad14",
            "e9f9e81d12a8818d",
            "379b22df930b2ac8",
            "6184bddc4d8dd003",
            "b3cab450c2c11099",
            "e10a6bb9939a58c8",
            "74a11ab587d22cc4",
            "4e5b7917e8d63f06",
            "51f9cee72240eb21",
            "29c6f350bdbbfb0e",
            "b782600afa2431db",
            "7b9ff352e204e01b",
            "8423a8dc8f69c8a9",
            "6fb951b618002584",
            "8df99c34060a3170",
            "abcf2f7e53d2ef32",
            "d2815679c30a9a99",
            "d844843ea823f3b1",
            "3f463d6c65079a18",
            "a2236018b9e667f4"
        ],
        "x": 24,
        "y": 2299
    },
    {
        "id": "b750fd9a1e049df3",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9c13e71f5bc9d1e7",
            "ab493dda56ae8873",
            "479919feb3058899",
            "ba171ede27b99992",
            "1e555cd85810eed1",
            "b12a7ee395162cb8",
            "8e7f0dba61edc816",
            "542d414472ebb9a9",
            "58f0e6cb836184e5",
            "0751e7fcaf040c87",
            "bb8351df1ac38c52",
            "ac42073f71f56086",
            "02c2bc823f2db9b4",
            "a89043b9883bdafd",
            "ac3c05b279ec1a9c",
            "c6910ba35b5418ce",
            "8687ce94de113f19",
            "b1be609411c5f38f",
            "1528d5c03f656391",
            "fe7c9670b4205988",
            "bbc1029f5c0a3bab",
            "ba2ca8837d8c019b",
            "a82775d2cef65c8a",
            "d7aee534c8662114",
            "4658521c0f201033",
            "a690ad06acdfd1ac",
            "59530edefe78b20c",
            "6759c0d8bce937ae",
            "a8fda6293397e13a",
            "2fb5c92cb353e34e",
            "991ad422f676795c",
            "be6fd0b91202eaa4",
            "9609baf65a51349a",
            "fb792869a278b1df",
            "a9bd60c12727a802",
            "578ced5bb55147d8",
            "0c8bc91cb3cde2ae",
            "9f61fee9ee333392",
            "c9d3fce05a4b1b95",
            "61e59094858004e4",
            "0cc22f8329904ae1",
            "52a25cf1a889d71f",
            "cbcd7e482cd1d542",
            "9c147abad552b038",
            "7ff7b812d923eb51",
            "ac6b0def29caa710",
            "3d04a8516a83db95",
            "e45e3ecc3e157798",
            "80c607bcd05e6fdd",
            "9f6278f95480f1d3",
            "2d450aa21fed311a",
            "1ee6ed47241901c1",
            "45deb013ca039d03",
            "b493cbd729d6a3b2",
            "463d252d9d157f0f",
            "14013319d72e840b",
            "b6b49cb3efd1f91b",
            "98a84d2f3847133c",
            "eab07c599b713208",
            "77cf522a645b418f",
            "ffd67d1f51e25b21",
            "682205a7940f0b6e",
            "06e9b569e14de045",
            "6f18b4abdfea7d89",
            "40ad5026a952f063",
            "5c44885a82559751",
            "e8248655e4da2b68",
            "7610e3cf046e31aa",
            "927bb2d826087946",
            "80fd2fd19b378701",
            "cd048af748abab9b",
            "a5fffb1f34e14e2d",
            "60c8f5595aef69c6",
            "777706c6f50c1228",
            "dc57fa60cc564095",
            "fc6c378f5e4d6f94",
            "44fe308750174ea1",
            "3805544c0ee143d0",
            "e08ca0375cdbf2c1",
            "889d30db771d8a95",
            "70de04779685a9e5",
            "ebb92725639dba49",
            "cb54ab3b8289b47d",
            "ae6c964c1278f713",
            "41cd31c507d9a5ec",
            "039e18b901882b85",
            "2f08aaafea8e9348",
            "c7326de9eb4b70ad",
            "aeb09f3827869aa5",
            "dd6baea7783e37bc",
            "ca4a1edaa5fc023a",
            "8002dc1e0538a688",
            "8dfac58357b0c2cd",
            "a7429230797db097",
            "db45af2952d4025b",
            "2508128076eac4bd",
            "86debc5a4f97c973",
            "9c3cf729a45a042c",
            "2722cd6df5fbb251",
            "3d6e15bf221c7bd6",
            "5243476235697dca",
            "92186ca601aefab4",
            "82af4b5a0f52ac76",
            "81271121cee9bb1c",
            "8097a7764bce0a38",
            "6c32f5d5664b19a3",
            "539f41acfe3a175a",
            "930d342c53052065",
            "c8ab91a560ed71f8",
            "c1b384c2dcf6921e",
            "5451a704185b2538",
            "530862e4bd5fc5dd",
            "658aa22d23af4c94",
            "3f34f9ac1ca68895",
            "563ccafbf406530a",
            "86f0d77f8fe21944",
            "a9e608518a1af78c",
            "2ba7615fbd0cd008",
            "7d301ca78db870fc",
            "bc368a6afc7dbbaf",
            "2d67f6e14ce41d64",
            "bf1017d1f7361191",
            "33b74f744fa8e4a1",
            "8a84daa7d8e0c6d9",
            "e1860b46a922b74f",
            "d403fc74c010d7a7",
            "4b358125526dc7f9",
            "2bdbb327dba60aa3",
            "b52c30a2a2880f69",
            "636ba8d7d65f03b0",
            "d3a0cfe7d952aab3",
            "59e29ea5ce7f7407",
            "0ab37762638e0e88",
            "e4cbb9503fd3a889",
            "11d0ebda6c9b1dc1",
            "fe0f1c134ec1511b",
            "32a4953608411804",
            "b3a42569233813d0",
            "f45f89adb7be82a9",
            "470eeea93b0d5a1a",
            "a9e9158c79e8da01",
            "f8b804c0593e997e",
            "8b93038682ae7be7",
            "a094758d06aa3eb4",
            "5cd99440a48eb78d",
            "b6f44aab0fbd42b4",
            "658658c0f741bcc5",
            "09a4337d44a965c5",
            "965a4517cad94054",
            "8cdc1e28e120c801",
            "80be88e971fe8a42",
            "0191c58c40fc6a0a",
            "73844e27d3413ca0",
            "644d332c196a5ed9",
            "0299e06304b0dec4",
            "fd5c4c0fa430effd",
            "a0d4011a826c30b6",
            "feaece1413c00ae9",
            "7fd6eb5d0edba17b",
            "16f5a451047cc52b",
            "fad5a4ce5004499a",
            "cc4c4337d8598ecc",
            "e5be51da9dadae23",
            "e8a943f8a96d428d",
            "17b41b810be8e9cb",
            "f5b352ee10d45e39",
            "579dc3f82b25e0c3",
            "55132692240e0f14",
            "fe9420068602ecd5",
            "dce92f6257a8742e",
            "f6305f151b762a98",
            "bdc7e7e84f4c4b0c",
            "c7d7bc2cafb47168",
            "6cb36e1b59650c3b",
            "715703fab81dbd93",
            "0dc7f5d39f3127d3",
            "f288f1d3177ad584",
            "3bcb8be0375c3df9",
            "f67cf7799b208700",
            "06e41415799214cf",
            "a84cfe344a33c229",
            "d28daed07b3f33a3",
            "b148d26a250bff53",
            "bdf78f96cbefd1c6",
            "52f3e46b81735c64",
            "661fe26d4c0ba29f",
            "bda57aaf499db929",
            "623d76cc796e7f21",
            "5d5058132e2365b8",
            "a905c1b6d4185f07",
            "5674810652f911ea",
            "baa57ac987816f13",
            "bebd26d647fa8f0c",
            "7ef8975a80f93ad7",
            "d55e6e4ebfaeb658",
            "3dae4a215bdafc1b",
            "fdabd27b33315105",
            "91e5cb7885810ee4",
            "cda6c3ed35ca43d2",
            "4f60b94520d36890",
            "1fc0b9ef4645d455",
            "26baa02764458294",
            "b2b3ad46b377b41b",
            "9e61a9aa1c7f8040",
            "1a66f32f1fa1ad99",
            "267d8d30220d1ab7",
            "531d12cacf943244",
            "51f48fb8a4e52fb0",
            "8081fb51eb27de5e",
            "a63362765e7fbd2f",
            "fe8b2445cf5bffcc",
            "21b79d4840396aaa",
            "df8c2966ae4501ae",
            "fac3fd61a26326ea",
            "2d8cd48a334fa81d",
            "03f5946dce1d4a91",
            "3b97ad54380b9053",
            "f78b87cde3e40c8e",
            "342e376098eeaa1f",
            "c59628d242cd0f42",
            "44e9f9323a89fc6f",
            "413b1d816d1813f2",
            "71b5894496981434",
            "fe3362f5a8a690d3",
            "655a043e3a47b754",
            "ea5c393063980248",
            "488d9bffbfb7cf19",
            "92c2a056a4fef7f9",
            "ae82035500b02bed",
            "0b0ea851a9f06a0b",
            "4dcdfa9c9b5f769a",
            "e184d7114e1c5331",
            "04be300f8d46d5df",
            "37fb4a5e323be053",
            "b1cba10656b3ea6b",
            "21923775f077531b",
            "df1200469ae59872",
            "5ba36b69ec49aa7c",
            "44232def249926f9",
            "85711c046d3abc0d",
            "aa12ae0e30512671",
            "f2a289eb28f4ffc6",
            "3b18e765f290d429",
            "d8906424155f45b5",
            "8a436fc6dd0bc4b9",
            "513f43ef805a7e0f",
            "cfb42331cd646312",
            "bcfe127f8f6d4906",
            "3ef37b82b2255061",
            "47d94392b2b774d9",
            "142ce4f2ed90d899",
            "6b04c12b58e42397",
            "cae004099e60fc23",
            "00caa1c67da75526",
            "04fac4edd9041cc4",
            "6068b91e0e7b28bc",
            "3638f2dd9f8f211b",
            "c8f44baeef5a397d",
            "3fdd6e2b3121abb2",
            "1f63b64b82a9187f",
            "d9422b4d73924533",
            "a79cf296b7eff02b",
            "7bd09f21dd4a61c8",
            "b2f2b390ce213529",
            "b331ce4d7ce14790",
            "3078968a6ffe428c",
            "b84189fd3d81ca45",
            "22242396cb4d3370",
            "c4dd47c0171163ea",
            "14e737622fbcbc62",
            "255a032bc6243ab8",
            "f0deb1184541ac5e",
            "a79b9d412e539591",
            "8f8e30e2b407da6d",
            "20659a43a04a80a4",
            "79cdd06e40beb802",
            "d49b678c434485f2",
            "30b0f5167402d423",
            "f0def203501204b6",
            "20223bd87498b5ee",
            "5e64ab27f2dea081",
            "f5b617482f9fd3c8",
            "6055f81b76235024",
            "d9df423a3895d4be",
            "e38d12b72fbd0739",
            "3845b896a7f40fa0",
            "0521f845ac498b99",
            "2299c1fc694534a8",
            "a411e69c40bebc2c",
            "f5a9fdd29c8b868d",
            "1b388cb3af1518a3",
            "3b6953a6c57b95ad",
            "203cae22a8b39377",
            "63667af75e086543",
            "ea4bcb304ac47911",
            "a873efbeb5dac82b",
            "14a6083e96d807d4",
            "f8a25beb4a53f5f0",
            "9c14e2b38a9cfcb4",
            "51b46b521664fbac",
            "7aaf6fae22f95f62",
            "8c9495797bf0a837",
            "50696ce88a310e14",
            "174f98431b33cb8e",
            "8e2fb7041c053450",
            "f2d766b595465c2d",
            "4292b5c67e4f155e",
            "e023f7cded4f272d",
            "9b5f9672bfc3840e",
            "a724195ba68c2e70",
            "253f0e040b694275",
            "b4b23bcd396b9816",
            "49481cd69d267256",
            "59f68ebf319704c4",
            "8b710a625217f97e",
            "90a8bd7bf871f477",
            "6d87b71255b0ede6",
            "842eda3dfbb271a9",
            "c8cef4989098f245",
            "53f1606bc41f7a54",
            "d8a102887d441203",
            "4c1753b0f2fd650e",
            "5fe71a0f6173daef",
            "8569b63540796e39",
            "4a82b22ea46ef3e2",
            "1949849ceb766b1a",
            "af3fb4bc59cb8252",
            "fb2674d3131311e5",
            "54337b22c1e732b9",
            "477468af17ba0823",
            "3a28bfb34748b48d",
            "661091f831fbf033",
            "4d8fc0ade7eaa295",
            "c91cc653154b13d8",
            "160b72d13e2b96c5",
            "4cc7ba1933343277",
            "4e430f49e8bf2b01",
            "c4941a2d5d3ec3ba",
            "915ba1c6b20567d7",
            "e032316214c38191",
            "4993af8b73b02556",
            "5e8f2d4717770345",
            "0e57060bddec2d85",
            "60952ee8ead31409",
            "be226deb6ce1d4bf",
            "cbe8c2b7e1b964e7",
            "6bb6cd45fd5c7c83",
            "812a5997eb9a0e9e",
            "a8dd597e37ab8e83",
            "0b037134ea118f9e",
            "02bbab764e450bcc",
            "9c16f50f5c437378",
            "65d89b9156bb9450",
            "daabbc76aeee32aa",
            "47b8d2e78a5692d9",
            "eaba1693187686f3",
            "2fc9b85e0350b9be",
            "3dea99a2c9ec7a2b",
            "a192442bba390350",
            "9fe82df1f31e9199",
            "e055511ea091fa54",
            "bbdc676a69174f95",
            "14d52d4496303177",
            "232af31ba00aa562",
            "7ce4b22b8c51d33d",
            "0a85bf12065659c3",
            "164f614147e3f93c",
            "1e528fb5be4a6a5f",
            "91616b827f1d086e",
            "233a0ddd7b19446c",
            "d7c2405aaa8b81f3",
            "84355279b7972b2b",
            "4ca466aa321d20df",
            "d0ef60a614aabe8f",
            "60795b5da82714a0",
            "9c5acfaf7ecd5f90",
            "cb95232b98d3e2e6",
            "fb6d6469533a528b",
            "fef28fe18a87086c",
            "f0d4017c852f6013",
            "9ce5fd484113ad63",
            "04a675e3975d8028",
            "50d2b2e4e30f5e78",
            "1a43aaf823a2a5fa",
            "4fb653caddd15644",
            "f20bb8334cb1458b",
            "58f31b30d47e7bfa",
            "8f80e4654d1b55d5",
            "6ce09625dfa819ad",
            "3f0cad58f33373c8",
            "8cc85f84b8f05166",
            "4be646cad4b06ff8",
            "5ce6d2c012cef729",
            "1590136374057cea",
            "d5bbc5f04e35d107",
            "5c61ba374ef2091a",
            "19823ed844bdd626",
            "7e2731409263beb0",
            "f5401a22c5ca596c",
            "b83b1b438a5cb014",
            "3b3a64d8897fea43",
            "d5346e2d02dac9d5",
            "0973424cc2554153",
            "dac0b0181b5119dd",
            "fe8fef790001f807",
            "52999fe02f8a9494",
            "97641834a25e723d",
            "52de0122bb28ce68",
            "98b71aa5a155c2f7",
            "2ed6f27fc38c6565",
            "ea0626a4691244eb",
            "e9381c6c2efa7340",
            "eac9b3ee81351c0a",
            "55af11858301579e",
            "bcb8b06302e797ed",
            "8ce4ac5268841e28",
            "022d983a11055a03",
            "4d49798be958d1eb",
            "344bce0f3f1ce815",
            "ba6b82687b546427",
            "129623d7e161f327",
            "6fff573869e20c65",
            "34d402ec05048619",
            "e09263554f94d05b",
            "9b83859f1d92d4bf",
            "52e6894b22641cf5",
            "bfd4aec47c41752c",
            "1b1b9abe22d4fc1d",
            "f4cddd8a043da5c7",
            "4e4b184f63a4e51a",
            "ded35c3990430a2b",
            "99973dc421364709",
            "bfb0ceda1af469a3",
            "5480155b3e16347c",
            "950174e1ef0ca536",
            "5a24971ca3323cbc",
            "d7e6d35eb439c4c6",
            "0a260faf33b75e8a",
            "ad7f39243cc27b5c",
            "79259e89470b8984",
            "e27f609c03e3dc41",
            "d52079fc17baf34d",
            "f696bb83a53b677a",
            "f1da06b55592c2c8",
            "aafbf085316f334c",
            "832d1a7057f08e81",
            "fece8e838434851c",
            "30dff880dd4ff1ee",
            "0b79bd7c7b561437",
            "fa0a7501df0df1ec",
            "93a0eea996253e40",
            "ce6a5ca6516c72ff",
            "e61d4f8adf52fb83",
            "a0793bd87faea5e4",
            "0887f666868195e4",
            "372385c4d34db934",
            "17d969608c06ba78",
            "dacf26cf1e2e577d",
            "a38128436e2d1ef2",
            "11b55ee80a4a6772",
            "4ceb8b051100354c",
            "8c1669a73673a2c2",
            "0bcaf3c252d5e373",
            "8e60b379864ef79f",
            "bd8ef7587751f0ee",
            "63bf8b72806ec34d",
            "f5c390c8e3ee0797",
            "ea538b2f8f4c1ad7",
            "bf27b1d92ffaf799",
            "2deeacdd100aa75b",
            "3c9fe94481aa39a9",
            "e51799d415d33f03",
            "9e92d73f375dc916",
            "2165bef03497078c",
            "40337d0c6f501624",
            "06124ab14b7945e7",
            "f5edcbcb9576ce20",
            "edffc10227458bd6",
            "1167fe2bed9ffa8c",
            "e00a80aa88c5b34d",
            "524fbbf6e6dd299a",
            "0f25f300a03765d3",
            "63fefac0515ca6ac",
            "09a9477817b15c8b",
            "e8e2cac404c4f41e",
            "0c5d75a6ebc95d19",
            "4202b1081220795d",
            "b15b481c78693e68",
            "ba93c8b4c11a194c",
            "b8a97dd104df8924",
            "f9420941a7f1e56f",
            "1bcb138e52b53fe0",
            "cd36634f10842778",
            "e7ca5a419987af04",
            "051abd0ce0cb9490",
            "9dc8bd41725947a9",
            "d176f35a4318e0fc",
            "8c3f28e59dd4e929",
            "565129aaccd505c2",
            "3af51045eb8094cf",
            "9f045f76da5108af",
            "417f9d8f75c22f18",
            "e5a7b3066fd47e90",
            "a8db5a548a7be1d7",
            "38ffc220763e375b",
            "df0f09f7dfc72834",
            "32f02cb9b9cbfbfd",
            "d822ce3f8faeff4e",
            "27c04f945da922e4",
            "4c8be8c0fc71e11a",
            "0dddc0d8ba8d9899",
            "6d59bf7285946379",
            "40138d3a127b5cb8",
            "be9d1696830dcabe",
            "3f206ed08de68a41",
            "0c32f49bd341151a",
            "94b4b6b0e17cf21a",
            "5809e429562db77f",
            "579bcfa752500bf4",
            "0348b0a39c452402",
            "5df2497b2d85c77d",
            "935301fd35ad30d5",
            "bc28b481541e054a",
            "47d88049edb1043f",
            "45f70daf58e6eda6",
            "996f3110cabb3b77",
            "5ee15d18fecd0f2c",
            "267f0c3de6494390",
            "30d02ac8d42d070c",
            "3fe761977f1c2b71",
            "b7eb3bf21bd1c48f",
            "5ff7306d2c4f1955",
            "33a374d829594bea",
            "b824690a79d15e38",
            "7bce2599ce02418f",
            "c351e1de912f79ff",
            "58112723eb88eb99",
            "13515a86ec208199",
            "39c223d820891970",
            "6608211061f830e2",
            "d897905decc4e7b3",
            "299ba18b7af3a6e5",
            "3e0bf6e620a3ee5b",
            "953bfeba234f1a56",
            "b34a77b4ba345b8e",
            "d8ea82733c08e843",
            "4fb6d82d4cdd2dd3",
            "a076384c07aae51f",
            "8f673d8fe7c93fd6",
            "193a5a3e1faf944d",
            "593f325218865367",
            "b18aab983becd1bc",
            "cb66ed71ad74b490",
            "1b1211b416def853",
            "88bc397812c62d54",
            "9bd6e4c03f879364",
            "c675aed6a24dfab4",
            "848b20b9aaae9ab7"
        ],
        "x": 44,
        "y": 3239
    },
    {
        "id": "4e347896ac92be60",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "df6224383db0e75e",
            "1bff7e2463390e69",
            "ca19a7a2f6dd2ecb",
            "71c595e63ff79b13",
            "6b60d868c60bad8f",
            "1ce03c90a89697b3",
            "57d694413c2f01a3",
            "a1982ea9adddca11",
            "941d80461e53565b"
        ],
        "x": 4194,
        "y": 4199
    },
    {
        "id": "d6adbcab7cef2569",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b1ad242506530902",
            "434ae88eabfed344",
            "5c0ca47db7de7914",
            "0875da1f7857ebef",
            "465d86337b87dea0",
            "252a8317cf12e598",
            "7ea79b52a3145ef8"
        ],
        "x": 4194,
        "y": 4399
    },
    {
        "id": "827fa831eff54f82",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0ca2fefd0c760dfc",
            "7c0c18c60dd0a49d",
            "1a1e0e1defa43f71",
            "58aa594d12926a2e",
            "b0892ee884fc3d86",
            "fe2fd125a1985170",
            "c044ead83e849bd6",
            "802afcddf8247622",
            "a792c924c93eb824",
            "63fb3d84bde10dfd",
            "d9aca6a39ee68dc5",
            "194a6c0cd9f59622",
            "012f6873a87a421c",
            "ef6e5d343b8bb94e",
            "6410f60462818572",
            "1af4e1b2f640a324"
        ],
        "x": 3014,
        "y": 3879
    },
    {
        "id": "e3aa9ce8b9e41a04",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "378c6296225c8dad",
            "d385a952857aa920",
            "6aa300dd51405ad4",
            "82a4e6c963b6bca0",
            "d3d5223d08422474",
            "198d23f934462b99"
        ],
        "x": 14,
        "y": 279
    },
    {
        "id": "eb76455ade74569f",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5a6f14d119497699",
            "1bb1f7cc2ae18243",
            "afe3ec8186270ff5",
            "c9b997d4d95153f7",
            "9237a61f3f7aa2d6",
            "a5c2bfad8d4f12ea",
            "637b24869f105280",
            "319fb4c24b67edfd",
            "b0bbc107cbb989c8",
            "79383a50460fb84b",
            "b621e31f60520cb7",
            "1dafdab711244010",
            "9638424ce55bafac",
            "85ce25fdcd82b9ba",
            "4f02696ce162017a",
            "eeb826c2bb74fded",
            "9afc632ca087cf3f",
            "51946cbae1d69e01",
            "71f2027831381a79",
            "975deaea0ffb411c",
            "3579e20f8a40fde0",
            "1ba62f03edd0c67b",
            "e9f969682be26528",
            "59a072a71c2d9dcb",
            "3015b01d2ed3f726",
            "0116d326e887e56f",
            "b87b1f6bb83a4310",
            "2f948fe2ca0b3d80",
            "4b7c4b4c44f13096",
            "9e9f393f3d4487d3",
            "cbce752a13355643",
            "6130ccb455d238cc",
            "c5d74ac1446471a1",
            "e9dd697d23038cdf",
            "082811891e488f44",
            "0fe3f1f9cf50b21c",
            "b7c2a94e5e145d0d",
            "5521e611282f4d02",
            "b81fdfd72a63143f",
            "19e194d03186abe6",
            "dcebfacc6a50241e"
        ],
        "x": 34,
        "y": 2739
    },
    {
        "id": "5bd40d6fa0af9c0a",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e8cf1389a615911e",
            "0641aa28dd7a7d55",
            "5cf1623a0aa78755",
            "ed4cd4c73b905479",
            "dc67bcf6d120a448",
            "18f7d4dde3bc89f5",
            "8aa931598e19adc1",
            "432b5537805e08f9",
            "8fde8a58a201079a",
            "aa3c9d8c6218ccb0",
            "effbd1c3df4f7867",
            "8cfe37a36bee9df5",
            "bfdc878a3bb95f2d",
            "b64c6cd1bbaa63d0"
        ],
        "x": 54,
        "y": 3019
    },
    {
        "id": "3c74d756fb604c9d",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1be2474a43fea797",
            "315ed80291700745",
            "d8dacfb686c0ccfd",
            "ad087cbf57d5fa11",
            "018ec2338f286cb6",
            "26e8ca92431ac2ed",
            "e6afa72b3a2f6135",
            "93fd52d16cb37d44"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "a59b805b8c8f97f5",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a95ae07b5ab28512",
            "391814ff56b6f995",
            "164d4dc9f9f535c1",
            "56eeb6e508b3f05a",
            "852cbf3ea8b79043",
            "03138ba1a370e10d",
            "7e905ef5ee74e7fa",
            "0925dacc23e730c5",
            "542ed3b87117a8cd",
            "7d0452acff5fcf97",
            "38abd8c139eae07e",
            "e844bd21f6cb0f56",
            "e959135622ae5489",
            "b995c5751cabce18",
            "b5e49bcece484491",
            "7421b31d841b3ef3",
            "b7b07462dc60a603",
            "0ecda1ce5dacf1d4",
            "e64cf2f8a22ccf8a",
            "7a13649eaa9686bb",
            "7aedcb92cf796177",
            "b5528597a78285e2",
            "4b84c96491bb0643",
            "4c394628a990de99",
            "e0cc668cda4bd2c7",
            "b46b4179faab8064",
            "f870e367d01744e5",
            "e1373bf4b21019ce",
            "9732177351fee69c",
            "d6548007ea7a5ca5",
            "f956c8769718c6f0",
            "1869c832bb77d249",
            "7d05bcf78fddd286",
            "4c1f531c1dda05f6",
            "a2cab59124d765bb",
            "df133577eb8b0df4",
            "61b223c904ae15d6",
            "664a8bd0b5cbccb6",
            "5484b10184157a76",
            "7f1fc77f88b4c17a",
            "2dab9c0efae67e44",
            "d422d42a3427d2a4",
            "81a0c78fe7572752",
            "db2164758971c32f",
            "6b51f9861ed1b365",
            "53956d56e21afc2e",
            "96b25e88186eedaf",
            "296afe7ee31efbfb",
            "f00a011d83e715f2",
            "c6650c07f9e33fee",
            "a5a53be4d4b17c5a",
            "4fba1e590f448289",
            "0f7205035e13652f",
            "79718299f32559a7",
            "3b9be02ea2c4e1cc",
            "5322efdbb214d086",
            "bb5c761b8ec850d4",
            "e8a671990a4dee02",
            "56d4bdecd43b20eb",
            "40be991252a76e78",
            "f5aee22768c67b8f",
            "bbcb7f0d2d0c6594",
            "e07697f2708e0850",
            "7153c2abcf79d801",
            "65211202e594f24b",
            "ef89646cdf17db8f",
            "3ebe78440e5650fd",
            "c1f3c08dc24119d6",
            "f3e666609794455c",
            "5686858dec2de450",
            "9670b34f08631485",
            "d3cedb2d4b78eebf",
            "9de2189ba53f71b0",
            "4c35818bbda98f94",
            "47d4f598bbe8379a",
            "8c3bf8e16b11a468",
            "19dbf7ca099e49f1",
            "aa8ac766f5613f75",
            "046049a1cc23f462",
            "225034760a5d3b02",
            "caede8e9eb89a745",
            "c0b404faca69dbbc",
            "2f89e3d6fe71d2d7",
            "d6a06c45cce10766",
            "d3f17ed181a96031",
            "d51b0d378605a432",
            "95ef48661e088918",
            "e94b21bdbf53dc21",
            "3793fc772b34044b",
            "8f26e2c70ad1df61",
            "cd73a01571251555",
            "ce3b41153e3066e5",
            "47c2245c41cc9d9b",
            "0350f835eef908ef",
            "7c3e7cc11899466f",
            "9baa1f973eb7bcc4",
            "e6b21b493b663f30",
            "fd951138bada8f7f",
            "06c363569eb19caf",
            "b1da864349aeca1b",
            "89264ffdddd96494",
            "f5e773b32fbd591c",
            "0ffd01ed3a3e0e90",
            "43b8ef14934b6733",
            "a9ac061f679c84b5",
            "8325ba8c041e3ba5",
            "bee524873fb60211",
            "2640a23a54475d27",
            "c9a3415a2ec1a426",
            "b20058257fe51d8f",
            "442dee010b96414f",
            "fc47e6b6c26bba0a",
            "bc60979dd4136248",
            "88c2febd25c05651",
            "1eef91e3c32b8fb8"
        ],
        "x": 1214,
        "y": 19
    },
    {
        "id": "9abed4f82199aefc",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b98161d3a7270089",
            "7fb40c56476e17b5"
        ],
        "x": 594,
        "y": 19
    },
    {
        "id": "29fdf49c57332f39",
        "type": "group",
        "z": "18a7ffc09fc6eb29",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "59ff9798a079d4b9",
            "e442ebce5eba834c",
            "4455d377704704b1",
            "5230c829eb2ddb0f",
            "a1f95b0b52584fdd",
            "c2e3d44872113d40",
            "45fd2ef4df9adebc",
            "e4a97f9dcb6c9f1e",
            "76c63e5719a80bba",
            "708684323da7ef02",
            "4efe9be938a6d0c4",
            "1bc73ebb7073039a",
            "f1a1f012d626af94",
            "d38e42059faddb48",
            "90c323a67cbfb378",
            "d3cbb012b1a406a6",
            "b1fd165f110f9f26",
            "9f8ccd6fc4351d5d",
            "ac63b577c405ad32",
            "8cd37e74c3e2dff5",
            "fc68d311794a4992",
            "50b00d2e9d9d0468",
            "34001adbd2eda7bd",
            "2a9b85caee5a7a81",
            "e62f96b0a6067aa9",
            "c7f1843dea01bd61",
            "68afb727077132ce",
            "710a1e77c3fb8296",
            "25d8a8bb293bd143",
            "6665b1d72142958d",
            "7a798c118e1211e8",
            "c5af68da6fd155f8",
            "20d111394e91e3b5",
            "f6ad240b95bcc93a",
            "e2a1a3752fd2d703",
            "570dcf2c31262f58",
            "78756093e4d5be57",
            "5c49690d4f930bda",
            "13ea5f9e73e768b7",
            "e2ebcb89eb8a385e",
            "f6be93a5333d4f7c",
            "3a7704aeb3729191",
            "b89652448221a8e1",
            "4cbc36bc389c3a94",
            "ba78f633b14a58e2",
            "578f2ed29075aec8",
            "a400c280af657a65",
            "e1f8374e980ed85b",
            "d6dfa202aac50a08",
            "8b6cdcac16546f5d",
            "fbc4b6a6219129d1",
            "df655c1225e74515",
            "cc6dfdc8e3f97b98",
            "ae3eed1eb09eabc7",
            "eddabb4e22349d3f",
            "6f67f1d9ddb39748",
            "958bc3653453de5a",
            "3c6a7b7270f95e49",
            "fdc7608ce5c00e1f",
            "896acc9327ec31b3",
            "06de241923fb3027",
            "886b418ee679cebd",
            "c93e50142be51fde",
            "5c06434f788df45c",
            "1149143c567f18c4",
            "bb173ba33d67cf16",
            "ed2d11b76d3a53ae",
            "f8d1389a285a5778",
            "97d2433977fd36bc"
        ],
        "x": -46,
        "y": 639
    },
    {
        "id": "96fa2931530e88be",
        "type": "junction",
        "z": "bdf1045c1ff841f7",
        "x": 1440,
        "y": 1420,
        "wires": [
            [
                "97372858b1731c7e"
            ]
        ]
    },
    {
        "id": "24c93e6c1afcbf1f",
        "type": "junction",
        "z": "bdf1045c1ff841f7",
        "x": 840,
        "y": 2460,
        "wires": [
            [
                "04579462e3837c45"
            ]
        ]
    },
    {
        "id": "04579462e3837c45",
        "type": "junction",
        "z": "bdf1045c1ff841f7",
        "x": 1400,
        "y": 2460,
        "wires": [
            [
                "d44af37fb920e11a",
                "5f4d75ecc6e1e7d7"
            ]
        ]
    },
    {
        "id": "de74dee18c068b5a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 630,
        "y": 2400,
        "wires": [
            [
                "d08499bf9f43deef",
                "60dc9da05ac392bf"
            ]
        ]
    },
    {
        "id": "c5f5fb87b170cd16",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 630,
        "y": 2440,
        "wires": [
            [
                "7895f938e63e7582",
                "00e45812c1b90e1a",
                "8a1c869e0b987d82",
                "03c0327f0ec04a3f"
            ]
        ]
    },
    {
        "id": "d08499bf9f43deef",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1610,
        "y": 2400,
        "wires": [
            [
                "a6768b48ac67ad8d"
            ]
        ]
    },
    {
        "id": "6ffded93adfbbb5d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2440,
        "wires": [
            [
                "8f8b841779393063",
                "85cf23845f47985f"
            ]
        ]
    },
    {
        "id": "41d85ea5c2953108",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2500,
        "wires": [
            [
                "1810ba298a8b4976",
                "605530a62d7a5eed"
            ]
        ]
    },
    {
        "id": "3a687bc12cbc3c25",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2560,
        "wires": [
            [
                "5ded5ff5f20bcd71",
                "46444f71d9bfbd78"
            ]
        ]
    },
    {
        "id": "5120cf9346fb46c5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2620,
        "wires": [
            [
                "73fbb393eb0c295a",
                "7cdfaca4b49f9fb5"
            ]
        ]
    },
    {
        "id": "8f8b841779393063",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2440,
        "wires": [
            [
                "1edb8e7848fe5ffe",
                "3e463b26ab73f1fe"
            ]
        ]
    },
    {
        "id": "1810ba298a8b4976",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2500,
        "wires": [
            [
                "ef32ecf05d65ab73",
                "c7e76e05dd1ceade"
            ]
        ]
    },
    {
        "id": "5ded5ff5f20bcd71",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2560,
        "wires": [
            [
                "e9f9e81d12a8818d",
                "24139d9313c20165"
            ]
        ]
    },
    {
        "id": "73fbb393eb0c295a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2620,
        "wires": [
            [
                "b3cab450c2c11099",
                "bbfe20f009979b2b"
            ]
        ]
    },
    {
        "id": "fda482dc33c536e4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2480,
        "wires": [
            [
                "2d32d12c8fae2c9b"
            ]
        ]
    },
    {
        "id": "3e463b26ab73f1fe",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1550,
        "y": 2440,
        "wires": [
            [
                "2d32d12c8fae2c9b"
            ]
        ]
    },
    {
        "id": "ba356abab81c0c89",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2540,
        "wires": [
            [
                "933e8b0bc7bd52a0"
            ]
        ]
    },
    {
        "id": "c7e76e05dd1ceade",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1550,
        "y": 2500,
        "wires": [
            [
                "933e8b0bc7bd52a0"
            ]
        ]
    },
    {
        "id": "e76f519412b6bc73",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2600,
        "wires": [
            [
                "185b44afa9999225"
            ]
        ]
    },
    {
        "id": "24139d9313c20165",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1550,
        "y": 2560,
        "wires": [
            [
                "185b44afa9999225"
            ]
        ]
    },
    {
        "id": "830954b4e725e17b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1290,
        "y": 2660,
        "wires": [
            [
                "1663479921592aab"
            ]
        ]
    },
    {
        "id": "bbfe20f009979b2b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1550,
        "y": 2620,
        "wires": [
            [
                "1663479921592aab"
            ]
        ]
    },
    {
        "id": "a229e51f899eb102",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 2090,
        "y": 2480,
        "wires": [
            [
                "b782600afa2431db"
            ]
        ]
    },
    {
        "id": "60b6021f625fa196",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2480,
        "wires": [
            [
                "fda482dc33c536e4"
            ]
        ]
    },
    {
        "id": "05a8ee92dea19c1e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2540,
        "wires": [
            [
                "ba356abab81c0c89"
            ]
        ]
    },
    {
        "id": "4724d66a1b7dad14",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2600,
        "wires": [
            [
                "e76f519412b6bc73"
            ]
        ]
    },
    {
        "id": "6184bddc4d8dd003",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "x": 1030,
        "y": 2660,
        "wires": [
            [
                "830954b4e725e17b"
            ]
        ]
    },
    {
        "id": "2f08aaafea8e9348",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3440,
        "wires": [
            [
                "463d252d9d157f0f"
            ]
        ]
    },
    {
        "id": "2299c1fc694534a8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3400,
        "wires": [
            [
                "e38d12b72fbd0739",
                "dce92f6257a8742e",
                "6fff573869e20c65"
            ]
        ]
    },
    {
        "id": "fe9420068602ecd5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3440,
        "wires": [
            [
                "2f08aaafea8e9348"
            ]
        ]
    },
    {
        "id": "463d252d9d157f0f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3440,
        "wires": [
            [
                "4658521c0f201033",
                "aeb09f3827869aa5"
            ]
        ]
    },
    {
        "id": "129623d7e161f327",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3400,
        "wires": [
            [
                "4d49798be958d1eb",
                "2299c1fc694534a8"
            ]
        ]
    },
    {
        "id": "dce92f6257a8742e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3400,
        "wires": [
            [
                "579dc3f82b25e0c3",
                "c7326de9eb4b70ad"
            ]
        ]
    },
    {
        "id": "0521f845ac498b99",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3440,
        "wires": [
            [
                "fe9420068602ecd5"
            ]
        ]
    },
    {
        "id": "c7326de9eb4b70ad",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3400,
        "wires": [
            [
                "463d252d9d157f0f"
            ]
        ]
    },
    {
        "id": "bbdc676a69174f95",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3400,
        "wires": [
            [
                "d176f35a4318e0fc",
                "129623d7e161f327"
            ]
        ]
    },
    {
        "id": "ba6b82687b546427",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3440,
        "wires": [
            [
                "0521f845ac498b99"
            ]
        ]
    },
    {
        "id": "8a436fc6dd0bc4b9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3400,
        "wires": [
            [
                "bbdc676a69174f95",
                "14d52d4496303177"
            ]
        ]
    },
    {
        "id": "9dc8bd41725947a9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3440,
        "wires": [
            [
                "ba6b82687b546427"
            ]
        ]
    },
    {
        "id": "b6b49cb3efd1f91b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3520,
        "wires": [
            [
                "59530edefe78b20c"
            ]
        ]
    },
    {
        "id": "98a84d2f3847133c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3600,
        "wires": [
            [
                "6759c0d8bce937ae"
            ]
        ]
    },
    {
        "id": "b12a7ee395162cb8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3680,
        "wires": [
            [
                "02c2bc823f2db9b4"
            ]
        ]
    },
    {
        "id": "eab07c599b713208",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3760,
        "wires": [
            [
                "a8fda6293397e13a"
            ]
        ]
    },
    {
        "id": "77cf522a645b418f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3840,
        "wires": [
            [
                "2fb5c92cb353e34e"
            ]
        ]
    },
    {
        "id": "ffd67d1f51e25b21",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 3920,
        "wires": [
            [
                "991ad422f676795c"
            ]
        ]
    },
    {
        "id": "682205a7940f0b6e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4000,
        "wires": [
            [
                "be6fd0b91202eaa4"
            ]
        ]
    },
    {
        "id": "06e9b569e14de045",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4080,
        "wires": [
            [
                "9609baf65a51349a"
            ]
        ]
    },
    {
        "id": "6f18b4abdfea7d89",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4160,
        "wires": [
            [
                "fb792869a278b1df"
            ]
        ]
    },
    {
        "id": "40ad5026a952f063",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4980,
        "wires": [
            [
                "a9bd60c12727a802"
            ]
        ]
    },
    {
        "id": "5c44885a82559751",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4260,
        "wires": [
            [
                "578ced5bb55147d8"
            ]
        ]
    },
    {
        "id": "e8248655e4da2b68",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4340,
        "wires": [
            [
                "0c8bc91cb3cde2ae"
            ]
        ]
    },
    {
        "id": "7610e3cf046e31aa",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4420,
        "wires": [
            [
                "9f61fee9ee333392"
            ]
        ]
    },
    {
        "id": "927bb2d826087946",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4500,
        "wires": [
            [
                "c9d3fce05a4b1b95"
            ]
        ]
    },
    {
        "id": "80fd2fd19b378701",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4580,
        "wires": [
            [
                "61e59094858004e4"
            ]
        ]
    },
    {
        "id": "cd048af748abab9b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4660,
        "wires": [
            [
                "0cc22f8329904ae1"
            ]
        ]
    },
    {
        "id": "a5fffb1f34e14e2d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4740,
        "wires": [
            [
                "52a25cf1a889d71f"
            ]
        ]
    },
    {
        "id": "60c8f5595aef69c6",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4820,
        "wires": [
            [
                "cbcd7e482cd1d542"
            ]
        ]
    },
    {
        "id": "777706c6f50c1228",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1990,
        "y": 4900,
        "wires": [
            [
                "9c147abad552b038"
            ]
        ]
    },
    {
        "id": "ca4a1edaa5fc023a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3520,
        "wires": [
            [
                "b6b49cb3efd1f91b"
            ]
        ]
    },
    {
        "id": "8002dc1e0538a688",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3480,
        "wires": [
            [
                "b6b49cb3efd1f91b"
            ]
        ]
    },
    {
        "id": "a7429230797db097",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3600,
        "wires": [
            [
                "98a84d2f3847133c"
            ]
        ]
    },
    {
        "id": "db45af2952d4025b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3560,
        "wires": [
            [
                "98a84d2f3847133c"
            ]
        ]
    },
    {
        "id": "479919feb3058899",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3680,
        "wires": [
            [
                "b12a7ee395162cb8"
            ]
        ]
    },
    {
        "id": "ac42073f71f56086",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3640,
        "wires": [
            [
                "b12a7ee395162cb8"
            ]
        ]
    },
    {
        "id": "86debc5a4f97c973",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3760,
        "wires": [
            [
                "eab07c599b713208"
            ]
        ]
    },
    {
        "id": "9c3cf729a45a042c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3720,
        "wires": [
            [
                "eab07c599b713208"
            ]
        ]
    },
    {
        "id": "3d6e15bf221c7bd6",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3840,
        "wires": [
            [
                "77cf522a645b418f"
            ]
        ]
    },
    {
        "id": "5243476235697dca",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3800,
        "wires": [
            [
                "77cf522a645b418f"
            ]
        ]
    },
    {
        "id": "82af4b5a0f52ac76",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 3920,
        "wires": [
            [
                "ffd67d1f51e25b21"
            ]
        ]
    },
    {
        "id": "81271121cee9bb1c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3880,
        "wires": [
            [
                "ffd67d1f51e25b21"
            ]
        ]
    },
    {
        "id": "6c32f5d5664b19a3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4000,
        "wires": [
            [
                "682205a7940f0b6e"
            ]
        ]
    },
    {
        "id": "539f41acfe3a175a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 3960,
        "wires": [
            [
                "682205a7940f0b6e"
            ]
        ]
    },
    {
        "id": "c8ab91a560ed71f8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4080,
        "wires": [
            [
                "06e9b569e14de045"
            ]
        ]
    },
    {
        "id": "c1b384c2dcf6921e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4040,
        "wires": [
            [
                "06e9b569e14de045"
            ]
        ]
    },
    {
        "id": "530862e4bd5fc5dd",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4160,
        "wires": [
            [
                "6f18b4abdfea7d89"
            ]
        ]
    },
    {
        "id": "658aa22d23af4c94",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4120,
        "wires": [
            [
                "6f18b4abdfea7d89"
            ]
        ]
    },
    {
        "id": "563ccafbf406530a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4980,
        "wires": [
            [
                "40ad5026a952f063"
            ]
        ]
    },
    {
        "id": "86f0d77f8fe21944",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4940,
        "wires": [
            [
                "40ad5026a952f063"
            ]
        ]
    },
    {
        "id": "2ba7615fbd0cd008",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4220,
        "wires": [
            [
                "5c44885a82559751"
            ]
        ]
    },
    {
        "id": "7d301ca78db870fc",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4260,
        "wires": [
            [
                "5c44885a82559751"
            ]
        ]
    },
    {
        "id": "2d67f6e14ce41d64",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4300,
        "wires": [
            [
                "e8248655e4da2b68"
            ]
        ]
    },
    {
        "id": "bf1017d1f7361191",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4340,
        "wires": [
            [
                "e8248655e4da2b68"
            ]
        ]
    },
    {
        "id": "8a84daa7d8e0c6d9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4380,
        "wires": [
            [
                "7610e3cf046e31aa"
            ]
        ]
    },
    {
        "id": "e1860b46a922b74f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4420,
        "wires": [
            [
                "7610e3cf046e31aa"
            ]
        ]
    },
    {
        "id": "4b358125526dc7f9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4460,
        "wires": [
            [
                "927bb2d826087946"
            ]
        ]
    },
    {
        "id": "2bdbb327dba60aa3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4500,
        "wires": [
            [
                "927bb2d826087946"
            ]
        ]
    },
    {
        "id": "636ba8d7d65f03b0",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4540,
        "wires": [
            [
                "80fd2fd19b378701"
            ]
        ]
    },
    {
        "id": "d3a0cfe7d952aab3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4580,
        "wires": [
            [
                "80fd2fd19b378701"
            ]
        ]
    },
    {
        "id": "0ab37762638e0e88",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4620,
        "wires": [
            [
                "cd048af748abab9b"
            ]
        ]
    },
    {
        "id": "e4cbb9503fd3a889",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4660,
        "wires": [
            [
                "cd048af748abab9b"
            ]
        ]
    },
    {
        "id": "fe0f1c134ec1511b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4700,
        "wires": [
            [
                "a5fffb1f34e14e2d"
            ]
        ]
    },
    {
        "id": "32a4953608411804",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4740,
        "wires": [
            [
                "a5fffb1f34e14e2d"
            ]
        ]
    },
    {
        "id": "f45f89adb7be82a9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4780,
        "wires": [
            [
                "60c8f5595aef69c6"
            ]
        ]
    },
    {
        "id": "470eeea93b0d5a1a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4820,
        "wires": [
            [
                "60c8f5595aef69c6"
            ]
        ]
    },
    {
        "id": "f8b804c0593e997e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1960,
        "y": 4860,
        "wires": [
            [
                "777706c6f50c1228"
            ]
        ]
    },
    {
        "id": "8b93038682ae7be7",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1750,
        "y": 4900,
        "wires": [
            [
                "777706c6f50c1228"
            ]
        ]
    },
    {
        "id": "c7d7bc2cafb47168",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3520,
        "wires": [
            [
                "ca4a1edaa5fc023a"
            ]
        ]
    },
    {
        "id": "6cb36e1b59650c3b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3480,
        "wires": [
            [
                "f6305f151b762a98",
                "8002dc1e0538a688"
            ]
        ]
    },
    {
        "id": "f288f1d3177ad584",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3600,
        "wires": [
            [
                "a7429230797db097"
            ]
        ]
    },
    {
        "id": "3bcb8be0375c3df9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3560,
        "wires": [
            [
                "715703fab81dbd93",
                "db45af2952d4025b"
            ]
        ]
    },
    {
        "id": "1e555cd85810eed1",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3680,
        "wires": [
            [
                "479919feb3058899"
            ]
        ]
    },
    {
        "id": "542d414472ebb9a9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3640,
        "wires": [
            [
                "c6910ba35b5418ce",
                "ac42073f71f56086"
            ]
        ]
    },
    {
        "id": "a84cfe344a33c229",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3760,
        "wires": [
            [
                "86debc5a4f97c973"
            ]
        ]
    },
    {
        "id": "d28daed07b3f33a3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3720,
        "wires": [
            [
                "f67cf7799b208700",
                "9c3cf729a45a042c"
            ]
        ]
    },
    {
        "id": "52f3e46b81735c64",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3840,
        "wires": [
            [
                "3d6e15bf221c7bd6"
            ]
        ]
    },
    {
        "id": "661fe26d4c0ba29f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3800,
        "wires": [
            [
                "b148d26a250bff53",
                "5243476235697dca"
            ]
        ]
    },
    {
        "id": "5d5058132e2365b8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3920,
        "wires": [
            [
                "82af4b5a0f52ac76"
            ]
        ]
    },
    {
        "id": "a905c1b6d4185f07",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3880,
        "wires": [
            [
                "bda57aaf499db929",
                "81271121cee9bb1c"
            ]
        ]
    },
    {
        "id": "bebd26d647fa8f0c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4000,
        "wires": [
            [
                "6c32f5d5664b19a3"
            ]
        ]
    },
    {
        "id": "7ef8975a80f93ad7",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 3960,
        "wires": [
            [
                "5674810652f911ea",
                "539f41acfe3a175a"
            ]
        ]
    },
    {
        "id": "fdabd27b33315105",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4080,
        "wires": [
            [
                "c8ab91a560ed71f8"
            ]
        ]
    },
    {
        "id": "91e5cb7885810ee4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4040,
        "wires": [
            [
                "d55e6e4ebfaeb658",
                "c1b384c2dcf6921e"
            ]
        ]
    },
    {
        "id": "1fc0b9ef4645d455",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4160,
        "wires": [
            [
                "530862e4bd5fc5dd"
            ]
        ]
    },
    {
        "id": "26baa02764458294",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4120,
        "wires": [
            [
                "cda6c3ed35ca43d2",
                "658aa22d23af4c94"
            ]
        ]
    },
    {
        "id": "1a66f32f1fa1ad99",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4980,
        "wires": [
            [
                "563ccafbf406530a"
            ]
        ]
    },
    {
        "id": "267d8d30220d1ab7",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4940,
        "wires": [
            [
                "b2b3ad46b377b41b",
                "86f0d77f8fe21944"
            ]
        ]
    },
    {
        "id": "51f48fb8a4e52fb0",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4220,
        "wires": [
            [
                "531d12cacf943244",
                "2ba7615fbd0cd008"
            ]
        ]
    },
    {
        "id": "a63362765e7fbd2f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4260,
        "wires": [
            [
                "7d301ca78db870fc"
            ]
        ]
    },
    {
        "id": "21b79d4840396aaa",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4300,
        "wires": [
            [
                "fe8b2445cf5bffcc",
                "2d67f6e14ce41d64"
            ]
        ]
    },
    {
        "id": "fac3fd61a26326ea",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4340,
        "wires": [
            [
                "bf1017d1f7361191"
            ]
        ]
    },
    {
        "id": "03f5946dce1d4a91",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4380,
        "wires": [
            [
                "2d8cd48a334fa81d",
                "8a84daa7d8e0c6d9"
            ]
        ]
    },
    {
        "id": "f78b87cde3e40c8e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4420,
        "wires": [
            [
                "e1860b46a922b74f"
            ]
        ]
    },
    {
        "id": "c59628d242cd0f42",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4460,
        "wires": [
            [
                "342e376098eeaa1f",
                "4b358125526dc7f9"
            ]
        ]
    },
    {
        "id": "413b1d816d1813f2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4500,
        "wires": [
            [
                "2bdbb327dba60aa3"
            ]
        ]
    },
    {
        "id": "fe3362f5a8a690d3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4540,
        "wires": [
            [
                "71b5894496981434",
                "636ba8d7d65f03b0"
            ]
        ]
    },
    {
        "id": "ea5c393063980248",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4580,
        "wires": [
            [
                "d3a0cfe7d952aab3"
            ]
        ]
    },
    {
        "id": "92c2a056a4fef7f9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4620,
        "wires": [
            [
                "488d9bffbfb7cf19",
                "0ab37762638e0e88"
            ]
        ]
    },
    {
        "id": "0b0ea851a9f06a0b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4660,
        "wires": [
            [
                "e4cbb9503fd3a889"
            ]
        ]
    },
    {
        "id": "e184d7114e1c5331",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4700,
        "wires": [
            [
                "4dcdfa9c9b5f769a",
                "fe0f1c134ec1511b"
            ]
        ]
    },
    {
        "id": "37fb4a5e323be053",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4740,
        "wires": [
            [
                "32a4953608411804"
            ]
        ]
    },
    {
        "id": "21923775f077531b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4780,
        "wires": [
            [
                "b1cba10656b3ea6b",
                "f45f89adb7be82a9"
            ]
        ]
    },
    {
        "id": "5ba36b69ec49aa7c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4820,
        "wires": [
            [
                "470eeea93b0d5a1a"
            ]
        ]
    },
    {
        "id": "85711c046d3abc0d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1740,
        "y": 4860,
        "wires": [
            [
                "44232def249926f9",
                "f8b804c0593e997e"
            ]
        ]
    },
    {
        "id": "f2a289eb28f4ffc6",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4900,
        "wires": [
            [
                "8b93038682ae7be7"
            ]
        ]
    },
    {
        "id": "cfb42331cd646312",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3480,
        "wires": [
            [
                "7ce4b22b8c51d33d",
                "0a85bf12065659c3"
            ]
        ]
    },
    {
        "id": "3ef37b82b2255061",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3560,
        "wires": [
            [
                "1e528fb5be4a6a5f",
                "91616b827f1d086e"
            ]
        ]
    },
    {
        "id": "fe7c9670b4205988",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3640,
        "wires": [
            [
                "a89043b9883bdafd",
                "1ee6ed47241901c1"
            ]
        ]
    },
    {
        "id": "142ce4f2ed90d899",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3720,
        "wires": [
            [
                "d7c2405aaa8b81f3",
                "84355279b7972b2b"
            ]
        ]
    },
    {
        "id": "cae004099e60fc23",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3800,
        "wires": [
            [
                "d0ef60a614aabe8f",
                "60795b5da82714a0"
            ]
        ]
    },
    {
        "id": "04fac4edd9041cc4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3880,
        "wires": [
            [
                "cb95232b98d3e2e6",
                "fb6d6469533a528b"
            ]
        ]
    },
    {
        "id": "3638f2dd9f8f211b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3960,
        "wires": [
            [
                "f0d4017c852f6013",
                "9ce5fd484113ad63"
            ]
        ]
    },
    {
        "id": "3fdd6e2b3121abb2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4040,
        "wires": [
            [
                "50d2b2e4e30f5e78",
                "1a43aaf823a2a5fa"
            ]
        ]
    },
    {
        "id": "d9422b4d73924533",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4120,
        "wires": [
            [
                "f20bb8334cb1458b",
                "58f31b30d47e7bfa"
            ]
        ]
    },
    {
        "id": "7bd09f21dd4a61c8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4220,
        "wires": [
            [
                "6ce09625dfa819ad",
                "3f0cad58f33373c8"
            ]
        ]
    },
    {
        "id": "b331ce4d7ce14790",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4300,
        "wires": [
            [
                "4be646cad4b06ff8",
                "5ce6d2c012cef729"
            ]
        ]
    },
    {
        "id": "b84189fd3d81ca45",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4380,
        "wires": [
            [
                "d5bbc5f04e35d107",
                "5c61ba374ef2091a"
            ]
        ]
    },
    {
        "id": "c4dd47c0171163ea",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4460,
        "wires": [
            [
                "7e2731409263beb0",
                "f5401a22c5ca596c"
            ]
        ]
    },
    {
        "id": "255a032bc6243ab8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4540,
        "wires": [
            [
                "3b3a64d8897fea43",
                "d5346e2d02dac9d5"
            ]
        ]
    },
    {
        "id": "a79b9d412e539591",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4620,
        "wires": [
            [
                "dac0b0181b5119dd",
                "fe8fef790001f807"
            ]
        ]
    },
    {
        "id": "20659a43a04a80a4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4700,
        "wires": [
            [
                "97641834a25e723d",
                "52de0122bb28ce68"
            ]
        ]
    },
    {
        "id": "d49b678c434485f2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4780,
        "wires": [
            [
                "2ed6f27fc38c6565",
                "ea0626a4691244eb"
            ]
        ]
    },
    {
        "id": "f0def203501204b6",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4860,
        "wires": [
            [
                "eac9b3ee81351c0a",
                "55af11858301579e"
            ]
        ]
    },
    {
        "id": "5e64ab27f2dea081",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4940,
        "wires": [
            [
                "8ce4ac5268841e28",
                "022d983a11055a03"
            ]
        ]
    },
    {
        "id": "1b388cb3af1518a3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3520,
        "wires": [
            [
                "c7d7bc2cafb47168"
            ]
        ]
    },
    {
        "id": "3b6953a6c57b95ad",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3480,
        "wires": [
            [
                "a411e69c40bebc2c",
                "6cb36e1b59650c3b"
            ]
        ]
    },
    {
        "id": "ea4bcb304ac47911",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3600,
        "wires": [
            [
                "f288f1d3177ad584"
            ]
        ]
    },
    {
        "id": "a873efbeb5dac82b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3560,
        "wires": [
            [
                "203cae22a8b39377",
                "3bcb8be0375c3df9"
            ]
        ]
    },
    {
        "id": "0751e7fcaf040c87",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3680,
        "wires": [
            [
                "1e555cd85810eed1"
            ]
        ]
    },
    {
        "id": "ba171ede27b99992",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3640,
        "wires": [
            [
                "ab493dda56ae8873",
                "542d414472ebb9a9"
            ]
        ]
    },
    {
        "id": "9c14e2b38a9cfcb4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3760,
        "wires": [
            [
                "a84cfe344a33c229"
            ]
        ]
    },
    {
        "id": "51b46b521664fbac",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3720,
        "wires": [
            [
                "14a6083e96d807d4",
                "d28daed07b3f33a3"
            ]
        ]
    },
    {
        "id": "50696ce88a310e14",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3840,
        "wires": [
            [
                "52f3e46b81735c64"
            ]
        ]
    },
    {
        "id": "174f98431b33cb8e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3800,
        "wires": [
            [
                "7aaf6fae22f95f62",
                "661fe26d4c0ba29f"
            ]
        ]
    },
    {
        "id": "4292b5c67e4f155e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3920,
        "wires": [
            [
                "5d5058132e2365b8"
            ]
        ]
    },
    {
        "id": "e023f7cded4f272d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3880,
        "wires": [
            [
                "8e2fb7041c053450",
                "a905c1b6d4185f07"
            ]
        ]
    },
    {
        "id": "253f0e040b694275",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4000,
        "wires": [
            [
                "bebd26d647fa8f0c"
            ]
        ]
    },
    {
        "id": "b4b23bcd396b9816",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 3960,
        "wires": [
            [
                "9b5f9672bfc3840e",
                "7ef8975a80f93ad7"
            ]
        ]
    },
    {
        "id": "8b710a625217f97e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4080,
        "wires": [
            [
                "fdabd27b33315105"
            ]
        ]
    },
    {
        "id": "90a8bd7bf871f477",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4040,
        "wires": [
            [
                "49481cd69d267256",
                "91e5cb7885810ee4"
            ]
        ]
    },
    {
        "id": "c8cef4989098f245",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4160,
        "wires": [
            [
                "1fc0b9ef4645d455"
            ]
        ]
    },
    {
        "id": "53f1606bc41f7a54",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4120,
        "wires": [
            [
                "6d87b71255b0ede6",
                "26baa02764458294"
            ]
        ]
    },
    {
        "id": "5fe71a0f6173daef",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4980,
        "wires": [
            [
                "1a66f32f1fa1ad99"
            ]
        ]
    },
    {
        "id": "8569b63540796e39",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4940,
        "wires": [
            [
                "d8a102887d441203",
                "267d8d30220d1ab7"
            ]
        ]
    },
    {
        "id": "4a82b22ea46ef3e2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4220,
        "wires": [
            [
                "1949849ceb766b1a",
                "51f48fb8a4e52fb0"
            ]
        ]
    },
    {
        "id": "fb2674d3131311e5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4260,
        "wires": [
            [
                "a63362765e7fbd2f"
            ]
        ]
    },
    {
        "id": "54337b22c1e732b9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4300,
        "wires": [
            [
                "477468af17ba0823",
                "21b79d4840396aaa"
            ]
        ]
    },
    {
        "id": "661091f831fbf033",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4340,
        "wires": [
            [
                "fac3fd61a26326ea"
            ]
        ]
    },
    {
        "id": "4d8fc0ade7eaa295",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4380,
        "wires": [
            [
                "c91cc653154b13d8",
                "03f5946dce1d4a91"
            ]
        ]
    },
    {
        "id": "4cc7ba1933343277",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4420,
        "wires": [
            [
                "f78b87cde3e40c8e"
            ]
        ]
    },
    {
        "id": "4e430f49e8bf2b01",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4460,
        "wires": [
            [
                "c4941a2d5d3ec3ba",
                "c59628d242cd0f42"
            ]
        ]
    },
    {
        "id": "e032316214c38191",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4500,
        "wires": [
            [
                "413b1d816d1813f2"
            ]
        ]
    },
    {
        "id": "4993af8b73b02556",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4540,
        "wires": [
            [
                "5e8f2d4717770345",
                "fe3362f5a8a690d3"
            ]
        ]
    },
    {
        "id": "60952ee8ead31409",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4580,
        "wires": [
            [
                "ea5c393063980248"
            ]
        ]
    },
    {
        "id": "be226deb6ce1d4bf",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4620,
        "wires": [
            [
                "cbe8c2b7e1b964e7",
                "92c2a056a4fef7f9"
            ]
        ]
    },
    {
        "id": "812a5997eb9a0e9e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4660,
        "wires": [
            [
                "0b0ea851a9f06a0b"
            ]
        ]
    },
    {
        "id": "a8dd597e37ab8e83",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4700,
        "wires": [
            [
                "0b037134ea118f9e",
                "e184d7114e1c5331"
            ]
        ]
    },
    {
        "id": "9c16f50f5c437378",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4740,
        "wires": [
            [
                "37fb4a5e323be053"
            ]
        ]
    },
    {
        "id": "65d89b9156bb9450",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4780,
        "wires": [
            [
                "daabbc76aeee32aa",
                "21923775f077531b"
            ]
        ]
    },
    {
        "id": "eaba1693187686f3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4820,
        "wires": [
            [
                "5ba36b69ec49aa7c"
            ]
        ]
    },
    {
        "id": "2fc9b85e0350b9be",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1520,
        "y": 4860,
        "wires": [
            [
                "3dea99a2c9ec7a2b",
                "85711c046d3abc0d"
            ]
        ]
    },
    {
        "id": "9fe82df1f31e9199",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4900,
        "wires": [
            [
                "f2a289eb28f4ffc6"
            ]
        ]
    },
    {
        "id": "7ce4b22b8c51d33d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3480,
        "wires": [
            [
                "3af51045eb8094cf",
                "bfd4aec47c41752c"
            ]
        ]
    },
    {
        "id": "1e528fb5be4a6a5f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3560,
        "wires": [
            [
                "e5a7b3066fd47e90",
                "ded35c3990430a2b"
            ]
        ]
    },
    {
        "id": "a89043b9883bdafd",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3640,
        "wires": [
            [
                "bbc1029f5c0a3bab",
                "8e7f0dba61edc816"
            ]
        ]
    },
    {
        "id": "d7c2405aaa8b81f3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3720,
        "wires": [
            [
                "df0f09f7dfc72834",
                "950174e1ef0ca536"
            ]
        ]
    },
    {
        "id": "d0ef60a614aabe8f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3800,
        "wires": [
            [
                "27c04f945da922e4",
                "ad7f39243cc27b5c"
            ]
        ]
    },
    {
        "id": "cb95232b98d3e2e6",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3880,
        "wires": [
            [
                "6d59bf7285946379",
                "f696bb83a53b677a"
            ]
        ]
    },
    {
        "id": "f0d4017c852f6013",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 3960,
        "wires": [
            [
                "3f206ed08de68a41",
                "fece8e838434851c"
            ]
        ]
    },
    {
        "id": "50d2b2e4e30f5e78",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4040,
        "wires": [
            [
                "5809e429562db77f",
                "93a0eea996253e40"
            ]
        ]
    },
    {
        "id": "f20bb8334cb1458b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4120,
        "wires": [
            [
                "5df2497b2d85c77d",
                "0887f666868195e4"
            ]
        ]
    },
    {
        "id": "6ce09625dfa819ad",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4220,
        "wires": [
            [
                "47d88049edb1043f",
                "11b55ee80a4a6772"
            ]
        ]
    },
    {
        "id": "4be646cad4b06ff8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4300,
        "wires": [
            [
                "5ee15d18fecd0f2c",
                "8e60b379864ef79f"
            ]
        ]
    },
    {
        "id": "d5bbc5f04e35d107",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4380,
        "wires": [
            [
                "3fe761977f1c2b71",
                "ea538b2f8f4c1ad7"
            ]
        ]
    },
    {
        "id": "7e2731409263beb0",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4460,
        "wires": [
            [
                "33a374d829594bea",
                "e51799d415d33f03"
            ]
        ]
    },
    {
        "id": "3b3a64d8897fea43",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4540,
        "wires": [
            [
                "c351e1de912f79ff",
                "06124ab14b7945e7"
            ]
        ]
    },
    {
        "id": "dac0b0181b5119dd",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4620,
        "wires": [
            [
                "39c223d820891970",
                "e00a80aa88c5b34d"
            ]
        ]
    },
    {
        "id": "97641834a25e723d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4700,
        "wires": [
            [
                "299ba18b7af3a6e5",
                "09a9477817b15c8b"
            ]
        ]
    },
    {
        "id": "2ed6f27fc38c6565",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4780,
        "wires": [
            [
                "b34a77b4ba345b8e",
                "b15b481c78693e68"
            ]
        ]
    },
    {
        "id": "eac9b3ee81351c0a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4860,
        "wires": [
            [
                "a076384c07aae51f",
                "1bcb138e52b53fe0"
            ]
        ]
    },
    {
        "id": "8ce4ac5268841e28",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1000,
        "y": 4940,
        "wires": [
            [
                "593f325218865367",
                "a38128436e2d1ef2"
            ]
        ]
    },
    {
        "id": "52e6894b22641cf5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3520,
        "wires": [
            [
                "1b388cb3af1518a3"
            ]
        ]
    },
    {
        "id": "bfd4aec47c41752c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3480,
        "wires": [
            [
                "e09263554f94d05b",
                "3b6953a6c57b95ad"
            ]
        ]
    },
    {
        "id": "4e4b184f63a4e51a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3600,
        "wires": [
            [
                "ea4bcb304ac47911"
            ]
        ]
    },
    {
        "id": "ded35c3990430a2b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3560,
        "wires": [
            [
                "1b1b9abe22d4fc1d",
                "a873efbeb5dac82b"
            ]
        ]
    },
    {
        "id": "b1be609411c5f38f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3680,
        "wires": [
            [
                "0751e7fcaf040c87"
            ]
        ]
    },
    {
        "id": "8e7f0dba61edc816",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3640,
        "wires": [
            [
                "ac3c05b279ec1a9c",
                "ba171ede27b99992"
            ]
        ]
    },
    {
        "id": "5480155b3e16347c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3760,
        "wires": [
            [
                "9c14e2b38a9cfcb4"
            ]
        ]
    },
    {
        "id": "950174e1ef0ca536",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3720,
        "wires": [
            [
                "99973dc421364709",
                "51b46b521664fbac"
            ]
        ]
    },
    {
        "id": "0a260faf33b75e8a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3840,
        "wires": [
            [
                "50696ce88a310e14"
            ]
        ]
    },
    {
        "id": "ad7f39243cc27b5c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3800,
        "wires": [
            [
                "5a24971ca3323cbc",
                "174f98431b33cb8e"
            ]
        ]
    },
    {
        "id": "d52079fc17baf34d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 3920,
        "wires": [
            [
                "4292b5c67e4f155e"
            ]
        ]
    },
    {
        "id": "f696bb83a53b677a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3880,
        "wires": [
            [
                "79259e89470b8984",
                "e023f7cded4f272d"
            ]
        ]
    },
    {
        "id": "832d1a7057f08e81",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4000,
        "wires": [
            [
                "253f0e040b694275"
            ]
        ]
    },
    {
        "id": "fece8e838434851c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 3960,
        "wires": [
            [
                "f1da06b55592c2c8",
                "b4b23bcd396b9816"
            ]
        ]
    },
    {
        "id": "fa0a7501df0df1ec",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4080,
        "wires": [
            [
                "8b710a625217f97e"
            ]
        ]
    },
    {
        "id": "93a0eea996253e40",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4040,
        "wires": [
            [
                "30dff880dd4ff1ee",
                "90a8bd7bf871f477"
            ]
        ]
    },
    {
        "id": "a0793bd87faea5e4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4160,
        "wires": [
            [
                "c8cef4989098f245"
            ]
        ]
    },
    {
        "id": "0887f666868195e4",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4120,
        "wires": [
            [
                "ce6a5ca6516c72ff",
                "53f1606bc41f7a54"
            ]
        ]
    },
    {
        "id": "dacf26cf1e2e577d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4980,
        "wires": [
            [
                "5fe71a0f6173daef"
            ]
        ]
    },
    {
        "id": "a38128436e2d1ef2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4940,
        "wires": [
            [
                "372385c4d34db934",
                "8569b63540796e39"
            ]
        ]
    },
    {
        "id": "11b55ee80a4a6772",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4220,
        "wires": [
            [
                "4ceb8b051100354c",
                "4a82b22ea46ef3e2"
            ]
        ]
    },
    {
        "id": "0bcaf3c252d5e373",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4260,
        "wires": [
            [
                "fb2674d3131311e5"
            ]
        ]
    },
    {
        "id": "8e60b379864ef79f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4300,
        "wires": [
            [
                "bd8ef7587751f0ee",
                "54337b22c1e732b9"
            ]
        ]
    },
    {
        "id": "f5c390c8e3ee0797",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4340,
        "wires": [
            [
                "661091f831fbf033"
            ]
        ]
    },
    {
        "id": "ea538b2f8f4c1ad7",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4380,
        "wires": [
            [
                "bf27b1d92ffaf799",
                "4d8fc0ade7eaa295"
            ]
        ]
    },
    {
        "id": "3c9fe94481aa39a9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4420,
        "wires": [
            [
                "4cc7ba1933343277"
            ]
        ]
    },
    {
        "id": "e51799d415d33f03",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4460,
        "wires": [
            [
                "9e92d73f375dc916",
                "4e430f49e8bf2b01"
            ]
        ]
    },
    {
        "id": "40337d0c6f501624",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4500,
        "wires": [
            [
                "e032316214c38191"
            ]
        ]
    },
    {
        "id": "06124ab14b7945e7",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4540,
        "wires": [
            [
                "f5edcbcb9576ce20",
                "4993af8b73b02556"
            ]
        ]
    },
    {
        "id": "1167fe2bed9ffa8c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4580,
        "wires": [
            [
                "60952ee8ead31409"
            ]
        ]
    },
    {
        "id": "e00a80aa88c5b34d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4620,
        "wires": [
            [
                "524fbbf6e6dd299a",
                "be226deb6ce1d4bf"
            ]
        ]
    },
    {
        "id": "63fefac0515ca6ac",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4660,
        "wires": [
            [
                "812a5997eb9a0e9e"
            ]
        ]
    },
    {
        "id": "09a9477817b15c8b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4700,
        "wires": [
            [
                "e8e2cac404c4f41e",
                "a8dd597e37ab8e83"
            ]
        ]
    },
    {
        "id": "4202b1081220795d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4740,
        "wires": [
            [
                "9c16f50f5c437378"
            ]
        ]
    },
    {
        "id": "b15b481c78693e68",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4780,
        "wires": [
            [
                "ba93c8b4c11a194c",
                "65d89b9156bb9450"
            ]
        ]
    },
    {
        "id": "f9420941a7f1e56f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4820,
        "wires": [
            [
                "eaba1693187686f3"
            ]
        ]
    },
    {
        "id": "1bcb138e52b53fe0",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1260,
        "y": 4860,
        "wires": [
            [
                "cd36634f10842778",
                "2fc9b85e0350b9be"
            ]
        ]
    },
    {
        "id": "051abd0ce0cb9490",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 1010,
        "y": 4900,
        "wires": [
            [
                "9fe82df1f31e9199"
            ]
        ]
    },
    {
        "id": "565129aaccd505c2",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3520,
        "wires": [
            [
                "52e6894b22641cf5"
            ]
        ]
    },
    {
        "id": "417f9d8f75c22f18",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3600,
        "wires": [
            [
                "4e4b184f63a4e51a"
            ]
        ]
    },
    {
        "id": "a82775d2cef65c8a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3680,
        "wires": [
            [
                "b1be609411c5f38f"
            ]
        ]
    },
    {
        "id": "38ffc220763e375b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3760,
        "wires": [
            [
                "5480155b3e16347c"
            ]
        ]
    },
    {
        "id": "d822ce3f8faeff4e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3840,
        "wires": [
            [
                "0a260faf33b75e8a"
            ]
        ]
    },
    {
        "id": "0dddc0d8ba8d9899",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 3920,
        "wires": [
            [
                "d52079fc17baf34d"
            ]
        ]
    },
    {
        "id": "be9d1696830dcabe",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4000,
        "wires": [
            [
                "832d1a7057f08e81"
            ]
        ]
    },
    {
        "id": "94b4b6b0e17cf21a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4080,
        "wires": [
            [
                "fa0a7501df0df1ec"
            ]
        ]
    },
    {
        "id": "0348b0a39c452402",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4160,
        "wires": [
            [
                "a0793bd87faea5e4"
            ]
        ]
    },
    {
        "id": "bc28b481541e054a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4260,
        "wires": [
            [
                "0bcaf3c252d5e373"
            ]
        ]
    },
    {
        "id": "996f3110cabb3b77",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4340,
        "wires": [
            [
                "f5c390c8e3ee0797"
            ]
        ]
    },
    {
        "id": "30d02ac8d42d070c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4420,
        "wires": [
            [
                "3c9fe94481aa39a9"
            ]
        ]
    },
    {
        "id": "5ff7306d2c4f1955",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4500,
        "wires": [
            [
                "40337d0c6f501624"
            ]
        ]
    },
    {
        "id": "7bce2599ce02418f",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4580,
        "wires": [
            [
                "1167fe2bed9ffa8c"
            ]
        ]
    },
    {
        "id": "13515a86ec208199",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4660,
        "wires": [
            [
                "63fefac0515ca6ac"
            ]
        ]
    },
    {
        "id": "d897905decc4e7b3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4740,
        "wires": [
            [
                "4202b1081220795d"
            ]
        ]
    },
    {
        "id": "953bfeba234f1a56",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4820,
        "wires": [
            [
                "f9420941a7f1e56f"
            ]
        ]
    },
    {
        "id": "4fb6d82d4cdd2dd3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4900,
        "wires": [
            [
                "051abd0ce0cb9490"
            ]
        ]
    },
    {
        "id": "193a5a3e1faf944d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 800,
        "y": 4980,
        "wires": [
            [
                "dacf26cf1e2e577d"
            ]
        ]
    },
    {
        "id": "ac6b0def29caa710",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "x": 2040,
        "y": 3360,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ]
    },
    {
        "id": "e0c981028d3a9f1c",
        "type": "junction",
        "z": "30b839ab81bb1134",
        "x": 2040,
        "y": 3660,
        "wires": [
            [
                "dc550e55a3ad01c0",
                "58da13b8e2751112"
            ]
        ]
    },
    {
        "id": "d9aca6a39ee68dc5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "x": 3300,
        "y": 4060,
        "wires": [
            [
                "194a6c0cd9f59622"
            ]
        ]
    },
    {
        "id": "194a6c0cd9f59622",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "x": 3480,
        "y": 4060,
        "wires": [
            [
                "58aa594d12926a2e"
            ]
        ]
    },
    {
        "id": "012f6873a87a421c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "x": 3320,
        "y": 4000,
        "wires": [
            [
                "802afcddf8247622"
            ]
        ]
    },
    {
        "id": "d38e42059faddb48",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 720,
        "wires": [
            [
                "4455d377704704b1"
            ]
        ]
    },
    {
        "id": "ac63b577c405ad32",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 800,
        "wires": [
            [
                "a1f95b0b52584fdd"
            ]
        ]
    },
    {
        "id": "fc68d311794a4992",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 880,
        "wires": [
            [
                "c2e3d44872113d40"
            ]
        ]
    },
    {
        "id": "34001adbd2eda7bd",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 960,
        "wires": [
            [
                "45fd2ef4df9adebc"
            ]
        ]
    },
    {
        "id": "e62f96b0a6067aa9",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1040,
        "wires": [
            [
                "e4a97f9dcb6c9f1e"
            ]
        ]
    },
    {
        "id": "9f8ccd6fc4351d5d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 640,
        "y": 1520,
        "wires": [
            [
                "e2ebcb89eb8a385e",
                "13ea5f9e73e768b7"
            ]
        ]
    },
    {
        "id": "b87b1f6bb83a4310",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "x": 2540,
        "y": 2860,
        "wires": [
            [
                "4b7c4b4c44f13096"
            ]
        ]
    },
    {
        "id": "cbce752a13355643",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "x": 2940,
        "y": 2860,
        "wires": [
            [
                "c5d74ac1446471a1"
            ]
        ]
    },
    {
        "id": "3271aaf3b3db6a0b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 1960,
        "wires": [
            [
                "5e743c9378ab4e8f",
                "69099f45a66cec7a"
            ]
        ]
    },
    {
        "id": "fe17d97052bb31de",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2060,
        "wires": [
            [
                "8e0ae5cafca22e0e"
            ]
        ]
    },
    {
        "id": "22e568250ac33374",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2140,
        "wires": [
            [
                "751a7b8fae6e59e7"
            ]
        ]
    },
    {
        "id": "19fdaf6b7b5fd447",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2220,
        "wires": [
            [
                "81c43c76810bdf0e"
            ]
        ]
    },
    {
        "id": "8bc02c6c90be28ba",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2300,
        "wires": [
            [
                "d530e54467362e46"
            ]
        ]
    },
    {
        "id": "896acc9327ec31b3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 510,
        "y": 1660,
        "wires": [
            [
                "886b418ee679cebd",
                "fdc7608ce5c00e1f"
            ]
        ]
    },
    {
        "id": "e4a97f9dcb6c9f1e",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "90c323a67cbfb378",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 240,
        "y": 1040,
        "wires": [
            [
                "570dcf2c31262f58",
                "4455d377704704b1",
                "a1f95b0b52584fdd",
                "c2e3d44872113d40",
                "45fd2ef4df9adebc",
                "e4a97f9dcb6c9f1e"
            ]
        ]
    },
    {
        "id": "f870e367d01744e5",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 120,
        "wires": [
            [
                "7153c2abcf79d801"
            ]
        ]
    },
    {
        "id": "7153c2abcf79d801",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 120,
        "wires": [
            [
                "bee524873fb60211"
            ]
        ]
    },
    {
        "id": "f956c8769718c6f0",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 300,
        "wires": [
            [
                "f3e666609794455c"
            ]
        ]
    },
    {
        "id": "f3e666609794455c",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 300,
        "wires": [
            [
                "2640a23a54475d27"
            ]
        ]
    },
    {
        "id": "a2cab59124d765bb",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 480,
        "wires": [
            [
                "4c35818bbda98f94"
            ]
        ]
    },
    {
        "id": "4c35818bbda98f94",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 480,
        "wires": [
            [
                "c9a3415a2ec1a426"
            ]
        ]
    },
    {
        "id": "5484b10184157a76",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 660,
        "wires": [
            [
                "046049a1cc23f462"
            ]
        ]
    },
    {
        "id": "046049a1cc23f462",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 660,
        "wires": [
            [
                "b20058257fe51d8f"
            ]
        ]
    },
    {
        "id": "81a0c78fe7572752",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 840,
        "wires": [
            [
                "d6a06c45cce10766"
            ]
        ]
    },
    {
        "id": "d6a06c45cce10766",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 840,
        "wires": [
            [
                "442dee010b96414f"
            ]
        ]
    },
    {
        "id": "e3c44730f87df273",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3460,
        "y": 3360,
        "wires": [
            [
                "cd7d687aed4d1295"
            ]
        ]
    },
    {
        "id": "96b25e88186eedaf",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 1020,
        "wires": [
            [
                "3793fc772b34044b"
            ]
        ]
    },
    {
        "id": "3793fc772b34044b",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 1020,
        "wires": [
            [
                "fc47e6b6c26bba0a"
            ]
        ]
    },
    {
        "id": "a5a53be4d4b17c5a",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 1200,
        "wires": [
            [
                "0350f835eef908ef"
            ]
        ]
    },
    {
        "id": "0350f835eef908ef",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 1200,
        "wires": [
            [
                "bc60979dd4136248"
            ]
        ]
    },
    {
        "id": "3b9be02ea2c4e1cc",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 1380,
        "wires": [
            [
                "06c363569eb19caf"
            ]
        ]
    },
    {
        "id": "06c363569eb19caf",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 1380,
        "wires": [
            [
                "88c2febd25c05651"
            ]
        ]
    },
    {
        "id": "56d4bdecd43b20eb",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2140,
        "y": 1560,
        "wires": [
            [
                "43b8ef14934b6733"
            ]
        ]
    },
    {
        "id": "43b8ef14934b6733",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "x": 2540,
        "y": 1560,
        "wires": [
            [
                "1eef91e3c32b8fb8"
            ]
        ]
    },
    {
        "id": "bdb92c4532060ca3",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2380,
        "wires": [
            [
                "ea5e963d38729955"
            ]
        ]
    },
    {
        "id": "c913988ae8fc2704",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2460,
        "wires": [
            [
                "9eff1f2683d43462"
            ]
        ]
    },
    {
        "id": "ca67a02b2df70aae",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2540,
        "wires": [
            [
                "78f550e2128d5e59"
            ]
        ]
    },
    {
        "id": "1092b21bd5aa3330",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3330,
        "y": 2620,
        "wires": [
            [
                "50d67038b55e3e81"
            ]
        ]
    },
    {
        "id": "c7f1843dea01bd61",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1140,
        "wires": [
            [
                "76c63e5719a80bba"
            ]
        ]
    },
    {
        "id": "710a1e77c3fb8296",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1220,
        "wires": [
            [
                "708684323da7ef02"
            ]
        ]
    },
    {
        "id": "6665b1d72142958d",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1300,
        "wires": [
            [
                "4efe9be938a6d0c4"
            ]
        ]
    },
    {
        "id": "c5af68da6fd155f8",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "x": 440,
        "y": 1380,
        "wires": [
            [
                "1bc73ebb7073039a"
            ]
        ]
    },
    {
        "id": "904a6ab362f8ad75",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 2800,
        "y": 1980,
        "wires": [
            [
                "8d3d7dec6e438c45",
                "384250d022c9fce9",
                "8193f6bb5d26b334",
                "734ce32a5c1f6d5e",
                "a271092649362d2a",
                "4cd97baa3c97ab62",
                "5f04a1db16451361",
                "0291d1f3b53dabdf",
                "30a9379a21e15798"
            ]
        ]
    },
    {
        "id": "6c1999fdda29d014",
        "type": "junction",
        "z": "18a7ffc09fc6eb29",
        "x": 3180,
        "y": 3200,
        "wires": [
            [
                "43e9df946fe59724"
            ]
        ]
    },
    {
        "id": "601a319a49c0aa47",
        "type": "junction",
        "z": "30b839ab81bb1134",
        "x": 1620,
        "y": 2680,
        "wires": [
            [
                "ef23d1df8a887529"
            ]
        ]
    },
    {
        "id": "aca8e25181d21be7",
        "type": "modbus-client",
        "name": "WorkshopPLC",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "54dde46e.53267c",
        "type": "modbus-client",
        "name": "local",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.101.244",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "b7548bf37471dcfe",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#3981b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3987b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#3987b8",
                    "value": "#3987b8",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#363636",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#6caad1",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#f7effb",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ad6dcc65156dd01c",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "MSSQL",
        "server": "GIOVANNI\\SQLEXPRESS",
        "encyption": false,
        "database": "NodeRed"
    },
    {
        "id": "712b53e5.990dfc",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "usetls": false,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8eaf36042374305d",
        "type": "ui_tab",
        "name": "Recipes",
        "icon": "fa-bullseye",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0465010f96f3dad5",
        "type": "ui_group",
        "name": "Test Name",
        "tab": "8eaf36042374305d",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "53037fcbd25f4f9d",
        "type": "ui_group",
        "name": "Parameter Names 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f24d9462b2c2f4ce",
        "type": "ui_group",
        "name": "Parameter Values 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "218e00eac196634f",
        "type": "ui_group",
        "name": "Basic Tests",
        "tab": "8eaf36042374305d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "422e58defd5a9006",
        "type": "ui_group",
        "name": "Parameter Names 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 8,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d53c3b4207d65609",
        "type": "ui_group",
        "name": "Parameter Values 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 9,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad3c4128defb0956",
        "type": "ui_group",
        "name": "Parameter Instructions 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 6,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d0276f15a55c5b4",
        "type": "ui_group",
        "name": "Parameter Instructions 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 10,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "37cb5eb849cdba88",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "fa-user-o ",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ba12de27dc123ba",
        "type": "ui_group",
        "name": "Registration",
        "tab": "37cb5eb849cdba88",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e76e570168f2dca",
        "type": "ui_group",
        "name": "Update Password",
        "tab": "37cb5eb849cdba88",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a5680e46e5f9771",
        "type": "ui_group",
        "name": "User database",
        "tab": "37cb5eb849cdba88",
        "order": 4,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "778aba04212433f7",
        "type": "ui_group",
        "name": "Stop On Fail 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 7,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b4b99bf40ea5d2e",
        "type": "ui_group",
        "name": "Stop On Fail 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 11,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "05bf051581f2da76",
        "type": "ftp",
        "host": "192.168.1.10",
        "port": "21",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "7415190bef9e3adb",
        "type": "ftp",
        "host": "10.27.6.208",
        "port": "",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "da9fe7a69397cf03",
        "type": "modbus-client",
        "name": "Ateka2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.203",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "494580998616b55b",
        "type": "ui_group",
        "name": "Login",
        "tab": "8eaf36042374305d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "18ea443589aff38f",
        "type": "ui_group",
        "name": "Login",
        "tab": "37cb5eb849cdba88",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d343b6541bd84142",
        "type": "ui_group",
        "name": "Insufficient Rights",
        "tab": "37cb5eb849cdba88",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ebeab3422d31a778",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.0.66",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 0,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d530b669d6056648",
        "type": "modbus-client",
        "name": "Dynamic (Panel Testers)",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.203",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ec998e1eb45fe4eb",
        "type": "modbus-client",
        "name": "Ateka1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.202",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5d0e1198b746388a",
        "type": "modbus-client",
        "name": "Ateka3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.204",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4f042df482363103",
        "type": "modbus-client",
        "name": "Ateka4",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.205",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c0c45690f86ba53e",
        "type": "ui_tab",
        "name": "Communication",
        "icon": "fa-rss",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8ea8176a04b0b27a",
        "type": "ui_group",
        "name": "Communication status",
        "tab": "c0c45690f86ba53e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a232cc5d4e2fbc31",
        "type": "ui_group",
        "name": "Delete",
        "tab": "37cb5eb849cdba88",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cba284f995b6a9ad",
        "type": "ftp",
        "host": "10.27.6.206",
        "port": "",
        "secureOptions": "",
        "user": "ateka1",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "22ef728605d3719a",
        "type": "ftp",
        "host": "10.27.6.207",
        "port": "",
        "secureOptions": "",
        "user": "ateka2",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "40dd813a15fb0880",
        "type": "ftp",
        "host": "10.27.6.209",
        "port": "",
        "secureOptions": "",
        "user": "ateka4",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "862fab04f4d863e2",
        "type": "modbus-client",
        "name": "Local Machine",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.101.244",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "874ece99621a91ca",
        "type": "ui_group",
        "name": "Ateka Testing",
        "tab": "8eaf36042374305d",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "916e7e0ef0055e58",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "9a5680e46e5f9771",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "7e0c64c6e26ee2bc",
        "type": "ui_group",
        "name": "Ateka Testing",
        "tab": "8eaf36042374305d",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "40013950c3567b56",
        "type": "modbus-client",
        "name": "Ateka5",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.210",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d91a9c96d93230a8",
        "type": "modbus-client",
        "name": "Ateka6",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.211",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "91ab9af69d6680b0",
        "type": "modbus-client",
        "name": "Ateka7",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.212",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "75dbc07d8ec25bc4",
        "type": "modbus-client",
        "name": "Ateka8",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.213",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5c2d06e024f58a13",
        "type": "ftp",
        "host": "10.27.6.215",
        "port": "",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "38eabdcc99274a70",
        "type": "ftp",
        "host": "10.27.6.216",
        "port": "",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "929f306b79852fb6",
        "type": "ftp",
        "host": "10.27.6.217",
        "port": "",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "716bedc2c801b386",
        "type": "ftp",
        "host": "10.27.6.218",
        "port": "",
        "secureOptions": "",
        "user": "ateka3",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "619c4f759a8b39c8",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "a3f7956248d0bf1e",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "e1c1e4cebfb9f8af",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 11,
        "width": 4,
        "height": 1
    },
    {
        "id": "dc86ed7221fd3ca1",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "cea43170f9636cf5",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "cc2c3843a0d57ed0",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "54011eb177947ef4",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "53037fcbd25f4f9d",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "18921bc220abc3a0",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "778aba04212433f7",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "daf25d2defdf3b42",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "dd657cfa2fed9ed8",
        "type": "ui_spacer",
        "z": "18a7ffc09fc6eb29",
        "name": "spacer",
        "group": "4b4b99bf40ea5d2e",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "b6265e907b90e448",
        "type": "MSSQL-CN",
        "name": "AtekaLocal",
        "server": "GIOVANNI\\SQLEXPRESS",
        "encyption": true,
        "database": "Defy"
    },
    {
        "id": "7cf223fe452c25b2",
        "type": "MSSQL-CN",
        "name": "Defy MSSQL",
        "server": "10.27.0.16",
        "encyption": true,
        "database": "Ateka_db"
    },
    {
        "id": "d2727ddfa00b147b",
        "type": "function",
        "z": "ec74dd5cee732abd",
        "name": "Test",
        "func": "msg.payload = 'Checking things'\nmsg.info = 'Extra info';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "33537d783e3681db",
        "type": "function",
        "z": "ec74dd5cee732abd",
        "name": "Test",
        "func": "msg.payload = 'Checking more things'\nmsg.info = 'Even more extra info';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "1ae41b3f6186f9fd"
            ]
        ]
    },
    {
        "id": "1ae41b3f6186f9fd",
        "type": "delay",
        "z": "ec74dd5cee732abd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cb54ab3b8289b47d",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Par01",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par02",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par03",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par05",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par06",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par07",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par08",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par09",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par15",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par17",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par18",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par19",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par20",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 20,
        "x": 190,
        "y": 4060,
        "wires": [
            [
                "5cd99440a48eb78d"
            ],
            [
                "b6f44aab0fbd42b4"
            ],
            [
                "658658c0f741bcc5"
            ],
            [
                "2d450aa21fed311a"
            ],
            [
                "09a4337d44a965c5"
            ],
            [
                "965a4517cad94054"
            ],
            [
                "8cdc1e28e120c801"
            ],
            [
                "80be88e971fe8a42"
            ],
            [
                "0191c58c40fc6a0a"
            ],
            [
                "73844e27d3413ca0"
            ],
            [
                "644d332c196a5ed9"
            ],
            [
                "0299e06304b0dec4"
            ],
            [
                "fd5c4c0fa430effd"
            ],
            [
                "a0d4011a826c30b6"
            ],
            [
                "feaece1413c00ae9"
            ],
            [
                "7fd6eb5d0edba17b"
            ],
            [
                "16f5a451047cc52b"
            ],
            [
                "fad5a4ce5004499a"
            ],
            [
                "cc4c4337d8598ecc"
            ],
            [
                "e5be51da9dadae23"
            ]
        ]
    },
    {
        "id": "dc57fa60cc564095",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Clear",
        "func": "msg.payload = {\n    \"name\": \"\",\n    \"value\": null,\n    \"upperTol\": null,\n    \"lowerTol\": null,\n    \"instructions\": \"\",\n    \"ifTestFailStop\": false\n};\nmsg.complete = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 3360,
        "wires": [
            [
                "5cd99440a48eb78d",
                "b6f44aab0fbd42b4",
                "658658c0f741bcc5",
                "2d450aa21fed311a",
                "09a4337d44a965c5",
                "965a4517cad94054",
                "8cdc1e28e120c801",
                "80be88e971fe8a42",
                "0191c58c40fc6a0a",
                "73844e27d3413ca0",
                "644d332c196a5ed9",
                "0299e06304b0dec4",
                "fd5c4c0fa430effd",
                "a0d4011a826c30b6",
                "feaece1413c00ae9",
                "7fd6eb5d0edba17b",
                "16f5a451047cc52b",
                "fad5a4ce5004499a",
                "cc4c4337d8598ecc",
                "e5be51da9dadae23",
                "e8a943f8a96d428d",
                "ac6b0def29caa710"
            ]
        ]
    },
    {
        "id": "44fe308750174ea1",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Parameter join out",
        "mode": "link",
        "links": [
            "24816058e18ea49a"
        ],
        "x": 2715,
        "y": 3440,
        "wires": []
    },
    {
        "id": "d7aee534c8662114",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Trigger in",
        "links": [
            "29c6f350bdbbfb0e",
            "252a8317cf12e598"
        ],
        "x": 2295,
        "y": 3760,
        "wires": [
            [
                "b493cbd729d6a3b2",
                "1528d5c03f656391"
            ]
        ]
    },
    {
        "id": "a094758d06aa3eb4",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Clear Parameters in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 155,
        "y": 3400,
        "wires": [
            [
                "dc57fa60cc564095",
                "3b18e765f290d429"
            ]
        ]
    },
    {
        "id": "17b41b810be8e9cb",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Paramater data in",
        "links": [
            "0f712230d6e99c10"
        ],
        "x": 95,
        "y": 4100,
        "wires": [
            [
                "cb54ab3b8289b47d",
                "f5b617482f9fd3c8"
            ]
        ]
    },
    {
        "id": "1be2474a43fea797",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Start-Up",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "93fd52d16cb37d44"
            ]
        ]
    },
    {
        "id": "315ed80291700745",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Start up Flow Variables",
        "func": "\n\nglobal.set('recipeJSONlocation', \"C:/Ateka/\"); // Note that this ends with a /\nflow.set('HMIcsvLocation', \"C:/Ateka/\");\nflow.set('HMIrecipeName', 'NewEnRcp.csv');\nglobal.set('userCredentialsLocation', 'C:/Ateka/');\nglobal.set('userCredentialsFilename', 'userCredentials.csv');\nflow.set('dashboardCredentialsLocation', 'C:/Ateka/'); // CSV file with login data for Dashboard usage\nflow.set('dashboardCredentialsName', 'dashboardCredentials.csv');\n\nif (flow.get('testResultID') == undefined) {\n    flow.set('testResultID', 236);\n}\nglobal.set('stepResultsCSVlocation', 'C:/Ateka/')\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8b80c58c078ee3f8",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "name": "Comment Notes",
        "info": "Make sure values and names are filled in with pop up",
        "x": 1360,
        "y": 3620,
        "wires": []
    },
    {
        "id": "b493cbd729d6a3b2",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 147",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 3760,
        "wires": []
    },
    {
        "id": "d8dacfb686c0ccfd",
        "type": "ui_template",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "group": "0465010f96f3dad5",
        "name": "CSS",
        "order": 20,
        "width": 0,
        "height": 0,
        "format": "<style>\n  body {\n    background: -webkit-linear-gradient(\n    55deg,\n    #282C33 0%,\n    #3e4147 50%,\n    #282C33 100%\n    ) !important;\n  }\n  #Dashboard_Recipes{\n    //background-image: url(\"C:\\Users\\User\\Pictures\\Image1.jpg\");\n    //background-color: blue;\n    border-style: none;\n\n  }\n  /*Header background colour*/\n  md-content[ng-if=\"main.loaded\"] md-toolbar {\n    background-color: #2C506B !important;\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Header Text*/\n  h1 {\n    color: #faebd7 !important;\n    font-weight: 500 !important;\n  }\n\n  /*Background colour*/\n  md-content[ng-if=\"main.loaded\"] section {\n    //background-color: #282C33;\n  }\n  /*Group name colour*/\n  p[class=\"nr-dashboard-cardtitle\"] {\n    //color: #706F6F !important;\n    color: #faebd7 !important;\n  }\n\n  /*Buttons */\n  /*Default*/\n  button {\n    background-color: #3981B8 !important;\n    border-radius: 8px !important;\n    box-shadow: 2px 2px 3px rgba(44, 80, 107, 1) !important;\n    border-radius: 6px !important;\n  }\n  button:hover {\n    background-color: rgba(57, 129, 184, 0.7) !important;\n    border-radius: 6px !important;\n  }\n  .logout {\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n  }\n  .save button:hover, button.nr-dashboard-form-button[type=\"submit\"]:hover {\n  background-color: rgba(26, 199, 40, 1) !important;\n  border-radius: 6px !important;\n\n  color: black !important;\n  }\n  .clear button:hover, button.nr-dashboard-form-button[type=\"button\"]:hover{\n  background-color: #e31e35 !important;\n  color black !important;\n  }\n  /*Default switch icons (when switched on)*/\n  /*Switch bar*/\n  md-switch.md-checked .md-bar { \n    background-color: #13851c!important;\n  }\n  /*switch ball*/\n  md-switch.md-checked .md-thumb {\n    background-color: #1ac728 !important;\n  }\n  /*Menu button*/\n  button[aria-label=\"menu button\"] {\n    background: transparent !important;\n    box-shadow: none !important;\n  }\n  /*Refresh button on Settings tab*/\n  md-card[node-class=\"indent\"] {\n    margin-left: 16px !important;\n  }\n\n  /*Side Nav*/\n  button.md-no-style.md-button {\n    background-color: transparent !important;\n    border-radius: 0px !important;\n  }\n  .nr-menu-item-active div button { \n    border-right: 4px solid #3981B8 !important;\n  }\n  body.nr-dashboard-theme md-sidenav div.md-list-item-inner { /*Side nav Text*/\n    color: #95B0D5 !important;\n  }\n  md-sidenav {\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Input fields*/\n  md-input-container.md-default-theme .md-input, md-input-container .md-input, .md-select-value {\n    border-color: #EfA705 !important;\n  }\n\n  /*All Panels*/\n  ui-card-panel {\n    border-radius: 6px;\n    box-shadow: 0px 0px 3px #2C506B;\n    border-style: none !important;\n    background-color: rgba(51,51,51,255) !important;\n  }\n  #Recipes_Test_Name {\n    display: grid !important;\n    place-items: center !important;\n  }\n  /*Status message*/\n  [node-id=d6300eb99d1c25a1] [class=\"value\"] {\n    color: #e31e35 !important;\n  }\n  .save button  {\n    border: none;\n    border-radius: 8px;\n    text-align: center;\n    width: 50% ;\n    transition-duration: 0.4s;\n    background-color: #ddffdd;\n    color: white;         \n  }\n\n  /*Table rows*/\n  .tabulator-headers > div {\n    background-color: #f5ca69 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-odd {\n    background-color: #b0cde3 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-even {\n    background-color: #f9dc9b !important;\n  }\n  .chart {\n    //background-color: green;\n  }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "ad087cbf57d5fa11"
            ]
        ]
    },
    {
        "id": "ad087cbf57d5fa11",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 220,
        "wires": []
    },
    {
        "id": "018ec2338f286cb6",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Page Styles Block",
        "info": "",
        "x": 170,
        "y": 180,
        "wires": []
    },
    {
        "id": "e8cf1389a615911e",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "delete",
        "topicType": "str",
        "x": 130,
        "y": 3140,
        "wires": [
            [
                "ed4cd4c73b905479",
                "b64c6cd1bbaa63d0"
            ]
        ]
    },
    {
        "id": "0641aa28dd7a7d55",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Delete Recipe in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 205,
        "y": 3180,
        "wires": [
            [
                "5cf1623a0aa78755",
                "b64c6cd1bbaa63d0"
            ]
        ]
    },
    {
        "id": "5cf1623a0aa78755",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "debug 280",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 3180,
        "wires": []
    },
    {
        "id": "ed4cd4c73b905479",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Delete Button out",
        "mode": "link",
        "links": [
            "5c0ca47db7de7914"
        ],
        "x": 255,
        "y": 3100,
        "wires": []
    },
    {
        "id": "dc67bcf6d120a448",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Delete button",
        "info": "",
        "x": 150,
        "y": 3060,
        "wires": []
    },
    {
        "id": "77957e2a4a73d841",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Final Buffer + Set Write",
        "info": "",
        "x": 3140,
        "y": 4680,
        "wires": []
    },
    {
        "id": "ae1f6ae45d87a410",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "After Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 4800,
        "wires": []
    },
    {
        "id": "24816058e18ea49a",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "final join in",
        "links": [
            "4e5b7917e8d63f06",
            "8a78482fa36ac686",
            "490d53a9f6695f6a",
            "fe2fd125a1985170",
            "44fe308750174ea1"
        ],
        "x": 3075,
        "y": 4840,
        "wires": [
            [
                "488ce4a5406c7627",
                "ae1f6ae45d87a410"
            ]
        ]
    },
    {
        "id": "488ce4a5406c7627",
        "type": "join",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3230,
        "y": 4880,
        "wires": [
            [
                "e68ec13916526b7f",
                "f46a2cb80bccd573",
                "52ef3938019704eb"
            ]
        ]
    },
    {
        "id": "e68ec13916526b7f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Final Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3360,
        "y": 4820,
        "wires": []
    },
    {
        "id": "f46a2cb80bccd573",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Set Write",
        "func": "if (msg.lineFlag == \"completedWithChecks\") {\n    //msg.filename = msg.payload.fileLocation; //used to write to local file\n    msg.filename = global.get('recipeJSONlocation') + msg.payload.filename + ' (' + msg.payload.File_Code + ').json';\n    msg.payload = {\n        \"File_Code\": msg.payload.File_Code,\n        \"File_Name\": msg.payload.filename,\n        \"Powered_Inspection\": msg.payload.poweredInspection || false,\n        \"parameterData\": msg.payload.parameterData,\n        \"basic\": msg.payload.basic\n    }\n    //DELETE\n    flow.set(\"writeData\", msg.payload);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 4880,
        "wires": [
            [
                "5f91a64e8798657b",
                "d27f6ab5002978e6",
                "59fa9f03d56e415e"
            ]
        ]
    },
    {
        "id": "52ef3938019704eb",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "",
        "property": "lineFlag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "save",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fileSelected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3410,
        "y": 4760,
        "wires": [
            [
                "33c38e0493c0478e"
            ],
            [
                "931dd22053d95cb3"
            ]
        ]
    },
    {
        "id": "59fa9f03d56e415e",
        "type": "file",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "write settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 3610,
        "y": 4880,
        "wires": [
            [
                "5df746ebebd44bb6"
            ]
        ]
    },
    {
        "id": "5f91a64e8798657b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Set Write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3580,
        "y": 4800,
        "wires": []
    },
    {
        "id": "c3841d06cf0589f4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Check Entry",
        "func": "//Incomplete: Headers can be set somewhere else\nlet tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nmsg.data = msg.payload;\n//let values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nmsg.payload = \"select * from [NodeRed].[dbo].[Recipes] with (updlock,serializable) where File_Code = \" + msg.payload.File_Code;\n\n/*\n//if file exists\nmsg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n\n//if file doesn't exist\nmsg.payload = \"INSERT INTO \" + tableName + \" (\" +\n    headers.toString() + \") VALUES ( \" + values + \"') \" +\n    \"on duplicate File_Code update \" +\n    \"File_Code = \" + obj.File_Code + \" File_Name = \" + obj.File_Name + \" JSON_Data = \" + JSON.stringify(obj) ;\nmsg.check = {\n    obj : obj,\n    values : values\n} \n*/\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 4940,
        "wires": [
            [
                "c8123d891026eb4b",
                "371ef8ada06277c8"
            ]
        ]
    },
    {
        "id": "d27f6ab5002978e6",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Set write out",
        "mode": "link",
        "links": [
            "11ec4762c9588644",
            "bf6864ec2d7a5b95",
            "de8e36bcb8f76462",
            "51f62a2ba0f341a6"
        ],
        "x": 3545,
        "y": 4840,
        "wires": []
    },
    {
        "id": "33c38e0493c0478e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Set Clear from Save",
        "func": "return {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 4700,
        "wires": [
            [
                "7ec219affebfe24c",
                "997b09252b8e4915"
            ]
        ]
    },
    {
        "id": "931dd22053d95cb3",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Set fileSelected",
        "func": "if (msg.nodeID == \"node:d266b35bbc25032f\") {\n    return {\n        filename: msg.filename,\n        filenameShort: msg.filenameShort\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 4760,
        "wires": [
            [
                "3ca8b3b202846341",
                "f3179f625b0a3e92"
            ]
        ]
    },
    {
        "id": "5df746ebebd44bb6",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "After Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3780,
        "y": 4840,
        "wires": []
    },
    {
        "id": "c8123d891026eb4b",
        "type": "MSSQL",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 3760,
        "y": 4940,
        "wires": [
            [
                "3dbf5fd1762c8850"
            ]
        ]
    },
    {
        "id": "371ef8ada06277c8",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3770,
        "y": 4900,
        "wires": []
    },
    {
        "id": "7ec219affebfe24c",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Clear from Save out",
        "mode": "link",
        "links": [
            "5c0ca47db7de7914"
        ],
        "x": 3815,
        "y": 4700,
        "wires": []
    },
    {
        "id": "997b09252b8e4915",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Switch to clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 4660,
        "wires": []
    },
    {
        "id": "3ca8b3b202846341",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "FileSelected out",
        "mode": "link",
        "links": [
            "29f942e02f8f6d76"
        ],
        "x": 3795,
        "y": 4760,
        "wires": []
    },
    {
        "id": "3dbf5fd1762c8850",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "Insert / Update MSSQL",
        "func": "let tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nlet obj = msg.data;\nlet values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nif (msg.payload.length == 0) { // checks if file exists\n    msg.payload = \"INSERT INTO \" + tableName + \" (\" +\n        headers.toString() + \") VALUES ( \" + values + \"') \";\n    msg.check = {\n        obj: obj,\n        values: values\n    } \n} else { // runs if entry does not exist\n    msg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3950,
        "y": 4940,
        "wires": [
            [
                "c44178603ccbce4f",
                "b1b60bee02c14ca1"
            ]
        ]
    },
    {
        "id": "c44178603ccbce4f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4160,
        "y": 4880,
        "wires": []
    },
    {
        "id": "b1b60bee02c14ca1",
        "type": "MSSQL",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 4160,
        "y": 4940,
        "wires": [
            []
        ]
    },
    {
        "id": "f3179f625b0a3e92",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "949607f6b34bd9cc",
        "name": "debug 256",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3910,
        "y": 4720,
        "wires": []
    },
    {
        "id": "eff1dbfb97a21731",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Select File",
        "info": "",
        "x": 3100,
        "y": 3640,
        "wires": []
    },
    {
        "id": "e4143025bc554b69",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Blocker",
        "func": "if (msg.filename == undefined) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 3760,
        "wires": [
            [
                "2af240aed334e128"
            ]
        ]
    },
    {
        "id": "6354d23031cdfbee",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Search in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 3085,
        "y": 3780,
        "wires": [
            [
                "e4143025bc554b69"
            ]
        ]
    },
    {
        "id": "2af240aed334e128",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "label": "Search ",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "Search",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3360,
        "y": 3760,
        "wires": [
            [
                "9a5640786e5d290b"
            ]
        ]
    },
    {
        "id": "9a5640786e5d290b",
        "type": "change",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "search",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3540,
        "y": 3760,
        "wires": [
            [
                "81ba11cf4e91db30",
                "0348ea2070a65156"
            ]
        ]
    },
    {
        "id": "81ba11cf4e91db30",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Search",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3720,
        "y": 3760,
        "wires": []
    },
    {
        "id": "0a578d0d6f5a4927",
        "type": "fs-file-lister",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "start": "{{msg.filelocation}}",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 3900,
        "y": 3700,
        "wires": [
            [
                "7deb3586a9562614"
            ]
        ]
    },
    {
        "id": "d3a1358038e9b2ab",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3510,
        "y": 3700,
        "wires": [
            [
                "0348ea2070a65156"
            ]
        ]
    },
    {
        "id": "cd2184bca010095b",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3540,
        "y": 3640,
        "wires": [
            [
                "0348ea2070a65156"
            ]
        ]
    },
    {
        "id": "7deb3586a9562614",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Set options",
        "func": "msg.fullOptions = {};\nmsg.options = [];\nlet obj = {},\n    search = msg.search;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    obj[msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')] = msg.payload[i].name;\n}\n\nfor (const [key, value] of Object.entries(obj)) { // Only want JSON files\n    if (key.includes('.json')) {\n\n    } else {\n        delete obj[key];\n    }\n}\n\nmsg.options = []\n\nif (search != undefined) {\n    for (const [key, value] of Object.entries(obj)) {\n        if (key.includes(search)) {\n            let temp = {};\n            temp[key] = value;\n            msg.options.push(temp);\n        }\n    }\n} else {\n    for (const [key, value] of Object.entries(obj)) {\n        let temp = {};\n        temp[key] = value;\n        msg.options.push(temp);\n    }\n}\n\nmsg.check = {\n    \"Obj\": obj\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 3700,
        "wires": [
            [
                "36cb6730ea690aa6",
                "4cdc769e1124e3dc"
            ]
        ]
    },
    {
        "id": "36cb6730ea690aa6",
        "type": "ui_dropdown",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "",
        "label": "Select file",
        "tooltip": "",
        "place": "Select option",
        "group": "0465010f96f3dad5",
        "order": 10,
        "width": 9,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 4240,
        "y": 3700,
        "wires": [
            [
                "3c05fdf23c486fc7",
                "dc677ce47fa7aa30"
            ]
        ]
    },
    {
        "id": "4cdc769e1124e3dc",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Options",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 3640,
        "wires": []
    },
    {
        "id": "74064f9dbf34c755",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Select File in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 4105,
        "y": 3760,
        "wires": [
            [
                "36cb6730ea690aa6"
            ]
        ]
    },
    {
        "id": "3c05fdf23c486fc7",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4399,
        "y": 3640,
        "wires": []
    },
    {
        "id": "dc677ce47fa7aa30",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Set tags",
        "func": "msg.filename = msg.payload;\n//This part has become redundant, I use the existence of this member as a check somewhere in the code. Should get rewritten\nmsg.filenameShort = msg.payload.replace(/^.*(\\\\|\\/|\\:)/, '');\nmsg.filenameShort = msg.filenameShort.toString().substring(0, msg.filenameShort.lastIndexOf('.'));\nif (msg.filenameShort.indexOf('(') != -1) { //checks to see if there is a bracket in the filename, if there is, deletes it\n    //node.warn(\"Filename: \" + msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()); \n    msg.filenameShort = msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()\n}\n\nflow.set(\"filenameShort\");\nmsg.lineFlag = \"fileSelected\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4400,
        "y": 3700,
        "wires": [
            [
                "cadf1701878e219b",
                "dfafbb074fbdb135"
            ]
        ]
    },
    {
        "id": "dfafbb074fbdb135",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "selected file out",
        "mode": "link",
        "links": [
            "5c0ca47db7de7914",
            "46a6c78d1dcd6ef0"
        ],
        "x": 4525,
        "y": 3700,
        "wires": []
    },
    {
        "id": "cadf1701878e219b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 3660,
        "wires": []
    },
    {
        "id": "0348ea2070a65156",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "Config FL",
        "func": "msg.payload = { \n    \"start\": global.get('recipeJSONlocation'),\n    \"pattern\":\"*.json\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 3700,
        "wires": [
            [
                "0a578d0d6f5a4927"
            ]
        ]
    },
    {
        "id": "dba7e7f49604d884",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "d17f3c47f486e7a5",
        "name": "active",
        "info": "",
        "x": 3740,
        "y": 3640,
        "wires": []
    },
    {
        "id": "86e7790e44fc830c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "",
        "label": "File Name",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "filename",
        "sendOnBlur": false,
        "className": "",
        "topicType": "str",
        "x": 3670,
        "y": 4340,
        "wires": [
            [
                "ebb648885e9c8737",
                "179bc4e7dbebc86f"
            ]
        ]
    },
    {
        "id": "5392a7c2a1692cd3",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Checking",
        "func": "if (msg.lineFlag == \"fileSelected\") {\n    msg.payload = msg.filenameShort;\n    return msg;\n} else if (msg.lineFlag == \"SQL\") {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.lineFlag == 'JSONdata') {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.topic == 'clear') {\n    msg.payload = \"\";\n} else {\n    return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 4340,
        "wires": [
            [
                "86e7790e44fc830c",
                "5ccd78dd8a9f75f4",
                "b161e6dd8da769ad",
                "179bc4e7dbebc86f"
            ]
        ]
    },
    {
        "id": "ebb648885e9c8737",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Set Par Flow",
        "func": "msg.topic = \"filename\";\n\nif (msg.filenameShort != undefined) { //Checks if the filename has been loaded from a database\n    node.send({ \n        topic: \"filename\",\n        payload: msg.filenameShort\n        });\n    //node.send({ topic: \"fileLocation\", payload: msg.filename });\n    return null;\n} else { // Or any other message that gets received\n    node.send({ topic: \"filename\", payload: msg.payload })\n    //node.send({ topic: \"fileLocation\", payload: global.get('recipeJSONlocation') + msg.payload + '.json' });\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3850,
        "y": 4340,
        "wires": [
            [
                "09082d91545e7267",
                "490d53a9f6695f6a"
            ]
        ]
    },
    {
        "id": "d9691dd722fbc6ec",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Filename in",
        "links": [
            "6ee6a5f047aa0485",
            "6af902d695bd77d9",
            "252a8317cf12e598"
        ],
        "x": 3345,
        "y": 4320,
        "wires": [
            [
                "5392a7c2a1692cd3",
                "e8e9ac727f25be70"
            ]
        ]
    },
    {
        "id": "5ccd78dd8a9f75f4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "fileSelected",
        "func": "if (msg.filenameShort != undefined) {\n    return msg;\n} else if (msg.lineFlag == \"SQL\" || msg.lineFlag == \"JSONdata\") {\n    return {\n        payload: msg.payload\n    };\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 4380,
        "wires": [
            [
                "ebb648885e9c8737",
                "8ffbd04783ad5f5f"
            ]
        ]
    },
    {
        "id": "b161e6dd8da769ad",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3640,
        "y": 4280,
        "wires": []
    },
    {
        "id": "09082d91545e7267",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Filename",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4040,
        "y": 4340,
        "wires": []
    },
    {
        "id": "490d53a9f6695f6a",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Filename out",
        "mode": "link",
        "links": [
            "24816058e18ea49a"
        ],
        "x": 3965,
        "y": 4300,
        "wires": []
    },
    {
        "id": "e8e9ac727f25be70",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3460,
        "y": 4280,
        "wires": []
    },
    {
        "id": "8ffbd04783ad5f5f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 4380,
        "wires": []
    },
    {
        "id": "0846fc54750f91c3",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "File Name",
        "info": "",
        "x": 3360,
        "y": 4240,
        "wires": []
    },
    {
        "id": "179bc4e7dbebc86f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "Save check Filename",
        "func": "let check = flow.get(\"filenameCheck\");\nif (check == undefined) {\n    context.set(\"filenameCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"filenameCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"filenameCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 4260,
        "wires": [
            [
                "3ff3bacafd1fe14b"
            ]
        ]
    },
    {
        "id": "3ff3bacafd1fe14b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "70073285574b9727",
        "name": "debug 95",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4060,
        "y": 4260,
        "wires": []
    },
    {
        "id": "aac107ca1460a3c5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "Set Label",
        "func": "// Uncomplete: ACTIVE Need to make check for if test mode hasn't been changed\nif (msg.topic == 'clear') {\n    msg.payload = false;\n    return msg\n} else if (msg.topic == \"poweredInspection\") {\n    //Don't really need to do much, I just don't want the next check catching \n    //When a message is returned\n} else if (msg.payload != undefined) {\n    msg.payload = msg.payload.Powered_Inspection;\n}\nmsg.topic = \"poweredInspection\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4580,
        "y": 4920,
        "wires": [
            [
                "cdd671e535ce33e9",
                "25c6ce83b52d975e"
            ]
        ]
    },
    {
        "id": "cdd671e535ce33e9",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "debug 129",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4750,
        "y": 4880,
        "wires": []
    },
    {
        "id": "8a78482fa36ac686",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "Test Mode out",
        "mode": "link",
        "links": [
            "24816058e18ea49a"
        ],
        "x": 4945,
        "y": 4860,
        "wires": []
    },
    {
        "id": "3eeef4109181c7b4",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "Test Mode in",
        "links": [
            "6af902d695bd77d9",
            "252a8317cf12e598"
        ],
        "x": 4395,
        "y": 4940,
        "wires": [
            [
                "aac107ca1460a3c5",
                "eace55568a246f18"
            ]
        ]
    },
    {
        "id": "049fe43e60ba756b",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "Test Mode Switch",
        "info": "",
        "x": 4400,
        "y": 4840,
        "wires": []
    },
    {
        "id": "25c6ce83b52d975e",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "",
        "label": "Powered on inpsection",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "poweredInspection",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 4780,
        "y": 4920,
        "wires": [
            [
                "8a78482fa36ac686",
                "aac107ca1460a3c5"
            ]
        ]
    },
    {
        "id": "eace55568a246f18",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d37fa1f93b9645e2",
        "name": "debug 239",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4530,
        "y": 4880,
        "wires": []
    },
    {
        "id": "955a3e654f4c17d3",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Input Read Data out",
        "info": "",
        "x": 1590,
        "y": 3040,
        "wires": []
    },
    {
        "id": "c0a868b9c85fc5d3",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select JSON_Data from [NodeRed].[dbo].[Recipes] where File_Code = 14635",
        "payloadType": "str",
        "x": 1630,
        "y": 3080,
        "wires": [
            [
                "bb112f5740443701"
            ]
        ]
    },
    {
        "id": "bb112f5740443701",
        "type": "MSSQL",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1760,
        "y": 3080,
        "wires": [
            [
                "17ec1f4b2d4c460d"
            ]
        ]
    },
    {
        "id": "17ec1f4b2d4c460d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Set parsed json data",
        "func": "msg.payload = JSON.parse(msg.payload[0][\"JSON_Data\"]);\nmsg.lineFlag = \"SQL\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 3080,
        "wires": [
            [
                "f02c836a4499a714",
                "6af902d695bd77d9",
                "6ee6a5f047aa0485",
                "f0090a8863ee9b95"
            ]
        ]
    },
    {
        "id": "f02c836a4499a714",
        "type": "change",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.parameterData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2340,
        "y": 3140,
        "wires": [
            [
                "becfa5f252994905"
            ]
        ]
    },
    {
        "id": "6af902d695bd77d9",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Read file data out",
        "mode": "link",
        "links": [
            "bd9aeabe24a61ee8",
            "3eeef4109181c7b4",
            "d9691dd722fbc6ec",
            "b0892ee884fc3d86",
            "baa6c2563f8b404d",
            "72108b579c4227a6",
            "1a7e6f5ac832d24e"
        ],
        "x": 2215,
        "y": 3080,
        "wires": []
    },
    {
        "id": "6ee6a5f047aa0485",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "MSSQL out",
        "mode": "link",
        "links": [
            "d9691dd722fbc6ec"
        ],
        "x": 2215,
        "y": 3040,
        "wires": []
    },
    {
        "id": "f0090a8863ee9b95",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "SQL Test",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 3060,
        "wires": []
    },
    {
        "id": "9d4e98956e2bf4f9",
        "type": "json",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2030,
        "y": 3140,
        "wires": [
            [
                "71ecb682cfc58ea9"
            ]
        ]
    },
    {
        "id": "becfa5f252994905",
        "type": "split",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 2510,
        "y": 3140,
        "wires": [
            [
                "a2c7ea1717d0f465"
            ]
        ]
    },
    {
        "id": "bad0401f3c2f89f9",
        "type": "file in",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Read settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1870,
        "y": 3140,
        "wires": [
            [
                "9d4e98956e2bf4f9"
            ]
        ]
    },
    {
        "id": "64a746f1847bca0c",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "debug 47",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 3080,
        "wires": []
    },
    {
        "id": "a2c7ea1717d0f465",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Data = Pay",
        "func": "msg.data = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 3140,
        "wires": [
            [
                "0f712230d6e99c10"
            ]
        ]
    },
    {
        "id": "29f942e02f8f6d76",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Selected file in",
        "links": [
            "3ca8b3b202846341"
        ],
        "x": 1715,
        "y": 3180,
        "wires": [
            [
                "bad0401f3c2f89f9"
            ]
        ]
    },
    {
        "id": "0f712230d6e99c10",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Parameter data out",
        "mode": "link",
        "links": [
            "17b41b810be8e9cb",
            "94bc6ca1429484de"
        ],
        "x": 2745,
        "y": 3100,
        "wires": []
    },
    {
        "id": "71ecb682cfc58ea9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "f981e1c265314e12",
        "name": "Line Flag",
        "func": "msg.lineFlag = \"JSONdata\";\n\n//Set: I'm sleepy, this is so that the data that I know should be numbers gets converted to numbers\nlet keys = Object.keys(msg.payload.parameterData);\nfor (let i = 0; i < keys.length; i++) {\n    msg.payload.parameterData[keys[i]].value_H = parseFloat(msg.payload.parameterData[keys[i]].value_H);\n    msg.payload.parameterData[keys[i]].value_L = parseFloat(msg.payload.parameterData[keys[i]].value_L);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 3140,
        "wires": [
            [
                "64a746f1847bca0c",
                "f02c836a4499a714",
                "6af902d695bd77d9"
            ]
        ]
    },
    {
        "id": "26e8ca92431ac2ed",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Flow Variables",
        "info": "",
        "x": 160,
        "y": 100,
        "wires": []
    },
    {
        "id": "e6afa72b3a2f6135",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Flow General",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "b98161d3a7270089",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "9abed4f82199aefc",
        "name": "Notes",
        "info": "13ea5f9e73e768b7 disconnected",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "7fb40c56476e17b5",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "9abed4f82199aefc",
        "name": "Current changes",
        "info": "Things to put back:\n    • Reconnect error messaging on maching pinging\n    • ",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "0dd9a3b772938d8d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set Clear Basic",
        "func": "msg.payload = {\n    basic : {\n        \"GB\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"ACW\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"IR\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"EL\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2440,
        "wires": [
            [
                "8e39b643f9694dd0"
            ]
        ]
    },
    {
        "id": "c4735886d61a7a6b",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic clear in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 145,
        "y": 2460,
        "wires": [
            [
                "688346c179086c04",
                "0dd9a3b772938d8d"
            ]
        ]
    },
    {
        "id": "8e39b643f9694dd0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Grab data",
        "func": "msg.data = msg.payload.basic; // Assume this is the setup of the stored data, but also clear has to be structured this way\n\nif (msg.lineFlag == 'clear' || msg.lineFlag == 'save' || msg.lineFlag == 'JSONdata') { \n    return [msg, msg];\n}\n//Setting up the Feed Lines data\n//msg.dataKeys = Object.keys(msg.data);\nmsg.labels = { \n    \"upperTol\": \"Upper Tolerance %\", \n    \"lowerTol\": \"Upper Tolerance %\" \n    }\nreturn [ ,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2440,
        "wires": [
            [
                "de74dee18c068b5a"
            ],
            [
                "c5f5fb87b170cd16"
            ]
        ]
    },
    {
        "id": "688346c179086c04",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Clear IN",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 2400,
        "wires": []
    },
    {
        "id": "bd9aeabe24a61ee8",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Tests in",
        "links": [
            "6af902d695bd77d9"
        ],
        "x": 255,
        "y": 2500,
        "wires": [
            [
                "203050abd306fd69",
                "8e39b643f9694dd0"
            ]
        ]
    },
    {
        "id": "203050abd306fd69",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Data in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 2480,
        "wires": []
    },
    {
        "id": "60dc9da05ac392bf",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Bypass",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2340,
        "wires": []
    },
    {
        "id": "7895f938e63e7582",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'GB';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"Ground Bond\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2440,
        "wires": [
            [
                "b2edbcc20152ae53",
                "6ffded93adfbbb5d",
                "095103012e0001e1"
            ]
        ],
        "l": false
    },
    {
        "id": "00e45812c1b90e1a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'ACW';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"ACW\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2500,
        "wires": [
            [
                "67a7266f754cbeeb",
                "41d85ea5c2953108"
            ]
        ],
        "l": false
    },
    {
        "id": "8a1c869e0b987d82",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'IR';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"IR\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2560,
        "wires": [
            [
                "c11f1c2625f5f896",
                "3a687bc12cbc3c25"
            ]
        ],
        "l": false
    },
    {
        "id": "03c0327f0ec04a3f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'EL';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"Earth Leakage\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2620,
        "wires": [
            [
                "b71a1040264deeca",
                "5120cf9346fb46c5"
            ]
        ],
        "l": false
    },
    {
        "id": "a6768b48ac67ad8d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined && msg.topic == 'save') { // Buffer trigger is msg.complete existing (save)\n//node.warn('You\\'re savng things');\n    if (msg.lineFlag == 'completedWithChecks') {\n        // set payload with buffer and clear buffer if final checks have been done, indicated by the msg.lineFlag = \"completedWithChecks\"\n        //context.set('buffer', undefined)\n        return [msg, ];\n    }\n    msg.payload = context.get('buffer');\n    return [ ,msg]; // Go to line with checks\n} else if (msg.lineFlag == 'JSONdata') { //Catching the Feed line data\n//node.warn('Storing JSON data');\n    context.set('buffer', msg.data);\n} else if (msg.lineFlag == \"clear\") { // Catching clear message\n//node.warn('Clearing data');\n    context.set('buffer', undefined);\n} else { // Catches normal data inputing\n//node.warn('Inputing normal data');\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || {};\n\n    // Add / Delete the incoming message payload and topic to the buffer\n    if ((msg.payload == null) && (msg.topic in buffer)) {// If field is cleared\n        delete buffer[msg.topic];\n    } else { // if any other data point comes through thats not empty, save it\n        buffer[msg.topic] = msg.payload;\n    }\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2460,
        "wires": [
            [
                "af4288e8c2e94349",
                "66fc190d70898469"
            ],
            [
                "ca738e9ba2db4d6c",
                "0f509689d6c3fd32"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "b2edbcc20152ae53",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2460,
        "wires": [
            [
                "c99f02b77bdfa811"
            ]
        ],
        "l": false
    },
    {
        "id": "095103012e0001e1",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 287",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 2340,
        "wires": []
    },
    {
        "id": "67a7266f754cbeeb",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2520,
        "wires": [
            [
                "b4d15f256f7be2f9"
            ]
        ],
        "l": false
    },
    {
        "id": "c11f1c2625f5f896",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2580,
        "wires": [
            [
                "3a74ed57aa9ec6c2"
            ]
        ],
        "l": false
    },
    {
        "id": "b71a1040264deeca",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2640,
        "wires": [
            [
                "aef8c75124ec4d91"
            ]
        ],
        "l": false
    },
    {
        "id": "406ccc7dc902cb53",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Buffer in",
        "links": [
            "b782600afa2431db",
            "71c595e63ff79b13"
        ],
        "x": 1685,
        "y": 2680,
        "wires": [
            [
                "a6768b48ac67ad8d",
                "6f9be1a02711f196"
            ]
        ]
    },
    {
        "id": "2d32d12c8fae2c9b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    } \n    return []; \n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2480,
        "wires": [
            [
                "a6768b48ac67ad8d",
                "89fa63942ea21283"
            ]
        ],
        "l": false
    },
    {
        "id": "933e8b0bc7bd52a0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2540,
        "wires": [
            [
                "a6768b48ac67ad8d"
            ]
        ],
        "l": false
    },
    {
        "id": "185b44afa9999225",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2600,
        "wires": [
            [
                "a6768b48ac67ad8d"
            ]
        ],
        "l": false
    },
    {
        "id": "1663479921592aab",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2660,
        "wires": [
            [
                "a6768b48ac67ad8d"
            ]
        ],
        "l": false
    },
    {
        "id": "af4288e8c2e94349",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 102",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 2340,
        "wires": []
    },
    {
        "id": "66fc190d70898469",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Calc values",
        "func": "let upperVal, lowerVal\n//Going to be using the logic of setting \nfor (var key in msg.payload) { //Checks each test in basics\n    if (msg.payload[key].value < 0) { // Empty values are forced to equal -1\n        msg.payload[key].upperVal = -1;\n        msg.payload[key].lowerVal = -1;\n    } else {\n        if (msg.payload[key].upperTol < 0) {\n            msg.payload[key].upperVal = -1;\n        } else {\n            msg.payload[key].upperVal = msg.payload[key].value + msg.payload[key].value * msg.payload[key].upperTol / 100.0;\n        }\n        if (msg.payload[key].lowerTol < 0) {\n            msg.payload[key].lowerVal = -1;\n        } else {\n            msg.payload[key].lowerVal = msg.payload[key].value - msg.payload[key].value * msg.payload[key].lowerTol / 100.0;\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 2440,
        "wires": [
            [
                "22f929b2da66a650",
                "abff9c6d85305c60"
            ]
        ]
    },
    {
        "id": "ca738e9ba2db4d6c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Checks (Has Sets)",
        "func": "// Set\nif(msg.lineFlag == \"clear\")\n    return null;\nlet basicFormElements = { // Has the correct order of things\n    \"GB\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"ACW\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"IR\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"EL\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    }\n},\n    basicFormElementsNames = {\n        \"GB\" : \"Ground Bond Value(s)\",\n        \"ACW\": \"ACW Value(s)\",\n        \"IR\": \"Insulation Resistance Value(s)\",\n        \"EL\": \"Earth Leakage Value(s)\"\n    },\n    output = {},\n    temp = {},\n    missing = [];\n \nif (msg.payload == undefined) { // checks if nothing was in the buffer's context variable, if so, make it empty\n    msg.payload = { // copy basicFormsElements into payload\n        ...basicFormElements\n    };\n    for(var key1 in msg.payload) { // Goes through and creates the empty basic data\n        for (var key2 in msg.payload[key1]) {\n            temp[key2] = -1;\n        }\n        output[key1] = temp;\n        missing.push(basicFormElementsNames[key1]);\n    }\n} else {\n    for (var key1 in basicFormElements) { // Goes through and creates the empty basic data\n        if (key1 in msg.payload && msg.payload[key1] !== \"\") { // Check if key exists in current payload\n            for (var key2 in basicFormElements[key1]) { // Loop through members of each basic test\n                if (key2 in msg.payload[key1]) { // Check if each member in basic test exist\n                    if (msg.payload[key1][key2] != null) {\n\n                    } else {\n                        node.warn('msg.payload.' + key1 + key2);\n                        node.warn('We got here');\n                    }\n                    temp[key2] = (msg.payload[key1][key2] !== null) ? msg.payload[key1][key2] : -1; \n                } else { //Looking at members in basic test\n                    temp[key2] = -1;\n                    if (!(missing.includes(basicFormElementsNames[key1]))) { // checks to see if missing arr does not have text error msg\n                        missing.push(basicFormElementsNames[key1]);\n                    }\n                }\n            }\n            output[key1] = (temp)\n            temp = {}\n        } else { // Looking at basic tests\n            for (key2 in basicFormElements[key1]) {\n                temp[key2] = -1;\n            }\n            output[key1] = temp;\n            temp = {};\n            missing.push(basicFormElementsNames[key1])\n        }\n    }\n}\n\nmsg.data  = {\n    output: output, //Used in second node downstream to assign payload\n    missing: missing\n}\n\nif (missing.length > 0) { // If the full basic form is not filled in\n    let status = 'The following elements have been left out in the \"Basics\" section: || ';\n    for(let i = 0; i < missing.length; i++) {\n        status += missing[i] + \" || \";\n    }\n    msg.payload = status;\n    return [ , msg];\n} else { // if full basic form is completed\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = output;\n    delete msg.data; // Not needed once checks are completed.\n    return [msg, ];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 2500,
        "wires": [
            [
                "0f8174ba11462bc1",
                "a229e51f899eb102"
            ],
            [
                "ab858f555116bee5",
                "6bc5bada2b8f6678",
                "e523b850b278a005"
            ]
        ]
    },
    {
        "id": "0f509689d6c3fd32",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 115",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2560,
        "wires": []
    },
    {
        "id": "c99f02b77bdfa811",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Ground Bond",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 900,
        "y": 2460,
        "wires": [
            [
                "bac4baaad1d3e026",
                "60b6021f625fa196"
            ]
        ]
    },
    {
        "id": "85cf23845f47985f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2460,
        "wires": [
            [
                "e66792517ddf05b7"
            ]
        ],
        "l": false
    },
    {
        "id": "b4d15f256f7be2f9",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "ACW",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 880,
        "y": 2520,
        "wires": [
            [
                "05a8ee92dea19c1e"
            ]
        ]
    },
    {
        "id": "605530a62d7a5eed",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2520,
        "wires": [
            [
                "428b3190078580cc"
            ]
        ],
        "l": false
    },
    {
        "id": "3a74ed57aa9ec6c2",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "IR",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 880,
        "y": 2580,
        "wires": [
            [
                "4724d66a1b7dad14"
            ]
        ]
    },
    {
        "id": "46444f71d9bfbd78",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2580,
        "wires": [
            [
                "379b22df930b2ac8"
            ]
        ],
        "l": false
    },
    {
        "id": "aef8c75124ec4d91",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Earth Leakage",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 910,
        "y": 2640,
        "wires": [
            [
                "6184bddc4d8dd003"
            ]
        ]
    },
    {
        "id": "7cdfaca4b49f9fb5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2640,
        "wires": [
            [
                "e10a6bb9939a58c8"
            ]
        ],
        "l": false
    },
    {
        "id": "6f9be1a02711f196",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Save in ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 2620,
        "wires": []
    },
    {
        "id": "88187fe0e9ae09aa",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2460,
        "wires": [
            [
                "2d32d12c8fae2c9b"
            ]
        ]
    },
    {
        "id": "89fa63942ea21283",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Inputted data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2340,
        "wires": []
    },
    {
        "id": "8c561ca872bbea81",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2520,
        "wires": [
            [
                "933e8b0bc7bd52a0"
            ]
        ]
    },
    {
        "id": "d552d0f3f86959ea",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2580,
        "wires": [
            [
                "185b44afa9999225"
            ]
        ]
    },
    {
        "id": "7831c9b734ec555e",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2640,
        "wires": [
            [
                "1663479921592aab"
            ]
        ]
    },
    {
        "id": "22f929b2da66a650",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 288",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 2340,
        "wires": []
    },
    {
        "id": "abff9c6d85305c60",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Send Join / Save Return",
        "func": "// Set things up for the Final join node\nlet joinNodeMsg = {\n    payload : msg.payload,\n    topic   : 'basic'\n}\n\nlet saveMsg = {\n    payload : \"\",\n    topic   : 'save',\n    lineFlag: 'save',\n    complete: ''\n}\nreturn [joinNodeMsg, saveMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 2440,
        "wires": [
            [
                "74a11ab587d22cc4",
                "4e5b7917e8d63f06"
            ],
            [
                "51f9cee72240eb21",
                "29c6f350bdbbfb0e"
            ]
        ]
    },
    {
        "id": "0f8174ba11462bc1",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 109",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2600,
        "wires": []
    },
    {
        "id": "ab858f555116bee5",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "PROCEED ANYWAY",
        "cancel": "GO BACK",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2170,
        "y": 2520,
        "wires": [
            [
                "7b9ff352e204e01b",
                "8423a8dc8f69c8a9"
            ]
        ]
    },
    {
        "id": "6bc5bada2b8f6678",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic Error out",
        "mode": "link",
        "links": [
            "941d80461e53565b"
        ],
        "x": 2115,
        "y": 2680,
        "wires": []
    },
    {
        "id": "e523b850b278a005",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Checks (bottom)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 2660,
        "wires": []
    },
    {
        "id": "bac4baaad1d3e026",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "After GB_V",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2340,
        "wires": []
    },
    {
        "id": "1edb8e7848fe5ffe",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2460,
        "wires": [
            [
                "88187fe0e9ae09aa"
            ]
        ],
        "l": false
    },
    {
        "id": "e66792517ddf05b7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2460,
        "wires": [
            [
                "6fb951b618002584",
                "fda482dc33c536e4"
            ]
        ]
    },
    {
        "id": "ef32ecf05d65ab73",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2520,
        "wires": [
            [
                "8c561ca872bbea81"
            ]
        ],
        "l": false
    },
    {
        "id": "428b3190078580cc",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2520,
        "wires": [
            [
                "ba356abab81c0c89"
            ]
        ]
    },
    {
        "id": "e9f9e81d12a8818d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2580,
        "wires": [
            [
                "d552d0f3f86959ea"
            ]
        ],
        "l": false
    },
    {
        "id": "379b22df930b2ac8",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2580,
        "wires": [
            [
                "e76f519412b6bc73"
            ]
        ]
    },
    {
        "id": "b3cab450c2c11099",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2640,
        "wires": [
            [
                "7831c9b734ec555e"
            ]
        ],
        "l": false
    },
    {
        "id": "e10a6bb9939a58c8",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2640,
        "wires": [
            [
                "830954b4e725e17b"
            ]
        ]
    },
    {
        "id": "74a11ab587d22cc4",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 114",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 2360,
        "wires": []
    },
    {
        "id": "4e5b7917e8d63f06",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic out",
        "mode": "link",
        "links": [
            "24816058e18ea49a"
        ],
        "x": 2315,
        "y": 2400,
        "wires": []
    },
    {
        "id": "51f9cee72240eb21",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 117",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 2400,
        "wires": []
    },
    {
        "id": "29c6f350bdbbfb0e",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Save Out From Basic",
        "mode": "link",
        "links": [
            "d7aee534c8662114",
            "f20ae25ed86a8160"
        ],
        "x": 2355,
        "y": 2420,
        "wires": []
    },
    {
        "id": "b782600afa2431db",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Buffer Checks out",
        "mode": "link",
        "links": [
            "406ccc7dc902cb53"
        ],
        "x": 2465,
        "y": 2480,
        "wires": []
    },
    {
        "id": "7b9ff352e204e01b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "debug 111",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2560,
        "wires": []
    },
    {
        "id": "8423a8dc8f69c8a9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set Line Flag",
        "func": "if (msg.payload == \"PROCEED ANYWAY\") {\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = msg.data.output;\n    delete msg.data; // Not needed once checks are completed.\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 2520,
        "wires": [
            [
                "b782600afa2431db",
                "8df99c34060a3170"
            ]
        ]
    },
    {
        "id": "6fb951b618002584",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "After Upper Tolerance",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2340,
        "wires": []
    },
    {
        "id": "8df99c34060a3170",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Set Line Flag",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 2560,
        "wires": []
    },
    {
        "id": "abcf2f7e53d2ef32",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "New Data structure (clear)",
        "props": [
            {
                "p": "payload.basic",
                "v": "{\"GB\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"ACW\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"IR\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"EL\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "clear",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "d2815679c30a9a99",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "name": "Basic",
        "info": "",
        "x": 100,
        "y": 2340,
        "wires": []
    },
    {
        "id": "d844843ea823f3b1",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "group": "218e00eac196634f",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 870,
        "y": 2680,
        "wires": []
    },
    {
        "id": "3f463d6c65079a18",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "group": "218e00eac196634f",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 1040,
        "y": 2680,
        "wires": []
    },
    {
        "id": "a2236018b9e667f4",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "abe64c1a1e546309",
        "group": "218e00eac196634f",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 1220,
        "y": 2680,
        "wires": []
    },
    {
        "id": "f5b617482f9fd3c8",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 301",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 3800,
        "wires": []
    },
    {
        "id": "55132692240e0f14",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3420,
        "wires": [
            [
                "2f08aaafea8e9348"
            ]
        ]
    },
    {
        "id": "e38d12b72fbd0739",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3420,
        "wires": [
            [
                "55132692240e0f14"
            ]
        ],
        "l": false
    },
    {
        "id": "3845b896a7f40fa0",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3420,
        "wires": [
            [
                "fe9420068602ecd5"
            ]
        ]
    },
    {
        "id": "039e18b901882b85",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3420,
        "wires": [
            [
                "463d252d9d157f0f",
                "579dc3f82b25e0c3"
            ]
        ]
    },
    {
        "id": "4658521c0f201033",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload : msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    } \n    \n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3440,
        "wires": [
            [
                "14013319d72e840b",
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "aeb09f3827869aa5",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Before End Line",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 3380,
        "wires": []
    },
    {
        "id": "4d49798be958d1eb",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3420,
        "wires": [
            [
                "3845b896a7f40fa0"
            ]
        ],
        "l": false
    },
    {
        "id": "579dc3f82b25e0c3",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3420,
        "wires": [
            [
                "039e18b901882b85"
            ]
        ],
        "l": false
    },
    {
        "id": "344bce0f3f1ce815",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3420,
        "wires": [
            [
                "0521f845ac498b99"
            ]
        ]
    },
    {
        "id": "14013319d72e840b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End Line",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3380,
        "wires": []
    },
    {
        "id": "1528d5c03f656391",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined && msg.topic == 'save') { // Buffer trigger is msg.complete existing (save)\n    if (msg.lineFlag == 'completedWithChecks') {\n        // set payload with buffer and clear buffer if final checks have been done, indicated by the msg.lineFlag = \"completedWithChecks\"\n        //context.set('buffer', undefined)\n        msg.topic = 'parameterData';\n        return [msg, ];\n    }\n    msg.payload = context.get('buffer');\n    return [ ,msg]; // Go to line with checks\n} else if (msg.lineFlag == 'JSONdata') { //Catching the Feed line data\n    context.set('buffer', msg.data);\n} else if (msg.topic == \"clear\") { // Catching clear message\n    context.set('buffer', undefined);\n    if (msg.lineFlag == 'fileSelected') {\n        return [msg,];\n    }\n} else { // Catches normal data inputing\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || {};\n\n    // Add / Delete the incoming message payload and topic to the buffer\n    if ((msg.payload == null) && (msg.topic in buffer)) {// If field is cleared\n        delete buffer[msg.topic];\n    } else { // if any other data point comes through thats not empty, save it\n        buffer[msg.topic] = msg.payload;\n    }\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 3520,
        "wires": [
            [
                "3d04a8516a83db95",
                "e45e3ecc3e157798"
            ],
            [
                "80c607bcd05e6fdd",
                "9f6278f95480f1d3"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "d176f35a4318e0fc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3420,
        "wires": [
            [
                "344bce0f3f1ce815"
            ]
        ],
        "l": false
    },
    {
        "id": "8c3f28e59dd4e929",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3420,
        "wires": [
            [
                "ba6b82687b546427"
            ]
        ]
    },
    {
        "id": "a690ad06acdfd1ac",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Basic Buffer in",
        "links": [
            "3805544c0ee143d0"
        ],
        "x": 2295,
        "y": 3680,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ]
    },
    {
        "id": "59530edefe78b20c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3520,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "6759c0d8bce937ae",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3600,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "02c2bc823f2db9b4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3680,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "a8fda6293397e13a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3760,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "2fb5c92cb353e34e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3840,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "991ad422f676795c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3920,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "be6fd0b91202eaa4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4000,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "9609baf65a51349a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4080,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "fb792869a278b1df",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4160,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "a9bd60c12727a802",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4980,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "578ced5bb55147d8",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4260,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "0c8bc91cb3cde2ae",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4340,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "9f61fee9ee333392",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4420,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "c9d3fce05a4b1b95",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4500,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "61e59094858004e4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4580,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "0cc22f8329904ae1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4660,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "52a25cf1a889d71f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4740,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "cbcd7e482cd1d542",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4820,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "9c147abad552b038",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4900,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ],
        "l": false
    },
    {
        "id": "80c607bcd05e6fdd",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Checks (Has Sets)",
        "func": "//Checking\nlet arrTest1 = [],\n    arrTest2 = [],\n    msgData = JSON.stringify(msg);\n\n// Clear message returns nothing\nif(msg.lineFlag == \"clear\")\n    return null;\n\nlet missingList = [],\n    incorrectList1 = [],\n    currentMissingFlag = false,\n    basicKeys = Object.keys(msg.payload),\n    requiredMembers = [\"name\", \"value\", \"upperTol\", \"lowerTol\"];\n\nfor (var key1 in msg.payload) { // Goes through each parameter\n    currentMissingFlag = false;\n    for (const member of requiredMembers) { //Checks requiredMembers that they exist\n        if (!(member in msg.payload[key1]) || msg.payload[key1][member] === \"\" || (msg.payload[key1][member] === null && msg.payload[key1][member] !== 0)) {\n            arrTest2.push([key1, member, msg.payload[key1][member]]);\n            arrTest1.push([!(member in msg.payload[key1]), msg.payload[key1][member] === \"\", msg.payload[key1][member] === null]);\n            missingList.push(key1);\n            currentMissingFlag = true;\n            break;\n        }\n    }\n    if (!currentMissingFlag) { //This should catch the cases where all the value and name parameters are present\n        for (let i = 1; i < 4; i++) { //Using the requiredMembers template\n            if (msg.payload[key1][requiredMembers[i]] < 0) { //Checks to see that all the elements are positive\n                incorrectList1.push(key1); // Pushes the incorrect key into a list and jumps out of the checks\n                break;\n            }\n        }\n    }\n}\n\nlet issueText = \"\",\n    currentCheck = \"\",\n    missing = \"\",\n    incorrect1 = \"\",\n    incorrect2 = \"\"\n\nif (missingList.length > 0) {\n    currentCheck = 'missing';\n    for (const member of missingList) {\n        missing += member + \" \"\n    }\n    issueText = \"Please make sure that Parameter Names and Values section are fully filled in (Missing on \" + missing.trim() + \").\";\n    msg.payload = issueText;\n} else if (incorrectList1.length > 0) {\n    currentCheck = 'incorrect1'\n    for (const member of incorrectList1) {\n        incorrect1 += member + \" \"\n    }\n    issueText = \"Please make sure that all values are positive (\" + incorrect1.trim() + \").\";\n    msg.payload = issueText;\n}\nmsg.errorCode = currentCheck;\n\n// Checking\nmsg.check = {\n    arrTest2: arrTest2,\n    arrTest1: arrTest1,\n    msgData: msgData,\n    currentCheck: currentCheck,\n    missingList: missingList,\n    incorrectList1: incorrectList1,\n    issueText: issueText\n}\n\nif (msg.errorCode == \"\") {\n    msg.lineFlag = 'completedWithChecks'\n    return [msg, , { payload: \"Recipe is being saved\" }]\n} else {\n    return [, msg, msg]\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 3540,
        "wires": [
            [
                "3805544c0ee143d0",
                "e08ca0375cdbf2c1"
            ],
            [
                "889d30db771d8a95",
                "70de04779685a9e5"
            ],
            [
                "ebb92725639dba49"
            ]
        ]
    },
    {
        "id": "9f6278f95480f1d3",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 310",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 3620,
        "wires": []
    },
    {
        "id": "3d04a8516a83db95",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Leaving parameters",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 3380,
        "wires": []
    },
    {
        "id": "e45e3ecc3e157798",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Calc values",
        "func": "let upperVal, lowerVal\n//Going to be using the logic of setting \nif (msg.lineFlag != 'fileSelected') {\n    for (var key in msg.payload) {\n        msg.payload[key].upperVal = msg.payload[key].value + msg.payload[key].value * msg.payload[key].upperTol / 100;\n        msg.payload[key].lowerVal = msg.payload[key].value - msg.payload[key].value * msg.payload[key].lowerTol / 100;\n    }\n} \nmsg.nodeID = 'node:d266b35bbc25032f'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 3480,
        "wires": [
            [
                "fc6c378f5e4d6f94",
                "44fe308750174ea1"
            ]
        ]
    },
    {
        "id": "5cd99440a48eb78d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 1\";\nmsg.bufferTopic = \"Par01\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3400,
        "wires": [
            [
                "d8906424155f45b5",
                "8a436fc6dd0bc4b9"
            ]
        ],
        "l": false
    },
    {
        "id": "14d52d4496303177",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3420,
        "wires": [
            [
                "8c3f28e59dd4e929"
            ]
        ],
        "l": false
    },
    {
        "id": "e055511ea091fa54",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3420,
        "wires": [
            [
                "9dc8bd41725947a9"
            ]
        ]
    },
    {
        "id": "889d30db771d8a95",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "GO BACK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2750,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "70de04779685a9e5",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Checks (bottom)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 3620,
        "wires": []
    },
    {
        "id": "ebb92725639dba49",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Basic Error out",
        "mode": "link",
        "links": [
            "941d80461e53565b"
        ],
        "x": 2705,
        "y": 3660,
        "wires": []
    },
    {
        "id": "fc6c378f5e4d6f94",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Calc Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 3380,
        "wires": []
    },
    {
        "id": "ae6c964c1278f713",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Clear",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "clear",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"\",\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"instructions\":\"\",\"ifTestFailStop\":false}",
        "payloadType": "json",
        "x": 450,
        "y": 3280,
        "wires": [
            [
                "5cd99440a48eb78d",
                "b6f44aab0fbd42b4",
                "658658c0f741bcc5",
                "2d450aa21fed311a",
                "09a4337d44a965c5",
                "965a4517cad94054",
                "8cdc1e28e120c801",
                "80be88e971fe8a42",
                "0191c58c40fc6a0a",
                "73844e27d3413ca0",
                "644d332c196a5ed9",
                "0299e06304b0dec4",
                "fd5c4c0fa430effd",
                "a0d4011a826c30b6",
                "feaece1413c00ae9",
                "7fd6eb5d0edba17b",
                "16f5a451047cc52b",
                "fad5a4ce5004499a",
                "cc4c4337d8598ecc",
                "e5be51da9dadae23"
            ]
        ]
    },
    {
        "id": "d8906424155f45b5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3420,
        "wires": [
            [
                "e055511ea091fa54"
            ]
        ],
        "l": false
    },
    {
        "id": "dd6baea7783e37bc",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3500,
        "wires": [
            [
                "b6b49cb3efd1f91b",
                "f6305f151b762a98"
            ]
        ]
    },
    {
        "id": "8dfac58357b0c2cd",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3580,
        "wires": [
            [
                "98a84d2f3847133c",
                "715703fab81dbd93"
            ]
        ]
    },
    {
        "id": "bb8351df1ac38c52",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3660,
        "wires": [
            [
                "b12a7ee395162cb8",
                "c6910ba35b5418ce"
            ]
        ]
    },
    {
        "id": "2508128076eac4bd",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3740,
        "wires": [
            [
                "eab07c599b713208",
                "f67cf7799b208700"
            ]
        ]
    },
    {
        "id": "2722cd6df5fbb251",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3820,
        "wires": [
            [
                "77cf522a645b418f",
                "b148d26a250bff53"
            ]
        ]
    },
    {
        "id": "92186ca601aefab4",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3900,
        "wires": [
            [
                "ffd67d1f51e25b21",
                "bda57aaf499db929"
            ]
        ]
    },
    {
        "id": "8097a7764bce0a38",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3980,
        "wires": [
            [
                "682205a7940f0b6e",
                "5674810652f911ea"
            ]
        ]
    },
    {
        "id": "930d342c53052065",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4060,
        "wires": [
            [
                "06e9b569e14de045",
                "d55e6e4ebfaeb658"
            ]
        ]
    },
    {
        "id": "5451a704185b2538",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4140,
        "wires": [
            [
                "6f18b4abdfea7d89",
                "cda6c3ed35ca43d2"
            ]
        ]
    },
    {
        "id": "3f34f9ac1ca68895",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4960,
        "wires": [
            [
                "40ad5026a952f063",
                "b2b3ad46b377b41b"
            ]
        ]
    },
    {
        "id": "a9e608518a1af78c",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4240,
        "wires": [
            [
                "5c44885a82559751",
                "531d12cacf943244"
            ]
        ]
    },
    {
        "id": "bc368a6afc7dbbaf",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4320,
        "wires": [
            [
                "e8248655e4da2b68",
                "fe8b2445cf5bffcc"
            ]
        ]
    },
    {
        "id": "33b74f744fa8e4a1",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4400,
        "wires": [
            [
                "7610e3cf046e31aa",
                "2d8cd48a334fa81d"
            ]
        ]
    },
    {
        "id": "d403fc74c010d7a7",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4480,
        "wires": [
            [
                "927bb2d826087946",
                "342e376098eeaa1f"
            ]
        ]
    },
    {
        "id": "b52c30a2a2880f69",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4560,
        "wires": [
            [
                "80fd2fd19b378701",
                "71b5894496981434"
            ]
        ]
    },
    {
        "id": "59e29ea5ce7f7407",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4640,
        "wires": [
            [
                "cd048af748abab9b",
                "488d9bffbfb7cf19"
            ]
        ]
    },
    {
        "id": "11d0ebda6c9b1dc1",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4720,
        "wires": [
            [
                "a5fffb1f34e14e2d",
                "4dcdfa9c9b5f769a"
            ]
        ]
    },
    {
        "id": "b3a42569233813d0",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4800,
        "wires": [
            [
                "60c8f5595aef69c6",
                "b1cba10656b3ea6b"
            ]
        ]
    },
    {
        "id": "a9e9158c79e8da01",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4880,
        "wires": [
            [
                "777706c6f50c1228",
                "44232def249926f9"
            ]
        ]
    },
    {
        "id": "3805544c0ee143d0",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Buffer Checks out",
        "mode": "link",
        "links": [
            "a690ad06acdfd1ac"
        ],
        "x": 2705,
        "y": 3520,
        "wires": []
    },
    {
        "id": "b6f44aab0fbd42b4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 2\";\nmsg.bufferTopic = \"Par02\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3480,
        "wires": [
            [
                "513f43ef805a7e0f",
                "cfb42331cd646312"
            ]
        ],
        "l": false
    },
    {
        "id": "658658c0f741bcc5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 3\";\nmsg.bufferTopic = \"Par03\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3560,
        "wires": [
            [
                "bcfe127f8f6d4906",
                "3ef37b82b2255061"
            ]
        ],
        "l": false
    },
    {
        "id": "2d450aa21fed311a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 4\";\nmsg.bufferTopic = \"Par04\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3640,
        "wires": [
            [
                "41cd31c507d9a5ec",
                "fe7c9670b4205988"
            ]
        ],
        "l": false
    },
    {
        "id": "09a4337d44a965c5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 5\";\nmsg.bufferTopic = \"Par05\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3720,
        "wires": [
            [
                "47d94392b2b774d9",
                "142ce4f2ed90d899"
            ]
        ],
        "l": false
    },
    {
        "id": "965a4517cad94054",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 6\";\nmsg.bufferTopic = \"Par06\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3800,
        "wires": [
            [
                "6b04c12b58e42397",
                "cae004099e60fc23"
            ]
        ],
        "l": false
    },
    {
        "id": "8cdc1e28e120c801",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 7\";\nmsg.bufferTopic = \"Par07\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3880,
        "wires": [
            [
                "00caa1c67da75526",
                "04fac4edd9041cc4"
            ]
        ],
        "l": false
    },
    {
        "id": "80be88e971fe8a42",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 8\";\nmsg.bufferTopic = \"Par08\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3960,
        "wires": [
            [
                "6068b91e0e7b28bc",
                "3638f2dd9f8f211b"
            ]
        ],
        "l": false
    },
    {
        "id": "0191c58c40fc6a0a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 9\";\nmsg.bufferTopic = \"Par09\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4040,
        "wires": [
            [
                "c8f44baeef5a397d",
                "3fdd6e2b3121abb2"
            ]
        ],
        "l": false
    },
    {
        "id": "73844e27d3413ca0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 10\";\nmsg.bufferTopic = \"Par10\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4120,
        "wires": [
            [
                "1f63b64b82a9187f",
                "d9422b4d73924533"
            ]
        ],
        "l": false
    },
    {
        "id": "644d332c196a5ed9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 11\";\nmsg.bufferTopic = \"Par11\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4220,
        "wires": [
            [
                "a79cf296b7eff02b",
                "7bd09f21dd4a61c8"
            ]
        ],
        "l": false
    },
    {
        "id": "0299e06304b0dec4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 12\";\nmsg.bufferTopic = \"Par12\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4300,
        "wires": [
            [
                "b2f2b390ce213529",
                "b331ce4d7ce14790"
            ]
        ],
        "l": false
    },
    {
        "id": "fd5c4c0fa430effd",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 13\";\nmsg.bufferTopic = \"Par13\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4380,
        "wires": [
            [
                "3078968a6ffe428c",
                "b84189fd3d81ca45"
            ]
        ],
        "l": false
    },
    {
        "id": "a0d4011a826c30b6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 14\";\nmsg.bufferTopic = \"Par14\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4460,
        "wires": [
            [
                "22242396cb4d3370",
                "c4dd47c0171163ea"
            ]
        ],
        "l": false
    },
    {
        "id": "feaece1413c00ae9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 15\";\nmsg.bufferTopic = \"Par15\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4540,
        "wires": [
            [
                "14e737622fbcbc62",
                "255a032bc6243ab8"
            ]
        ],
        "l": false
    },
    {
        "id": "7fd6eb5d0edba17b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 16\";\nmsg.bufferTopic = \"Par16\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4620,
        "wires": [
            [
                "f0deb1184541ac5e",
                "a79b9d412e539591"
            ]
        ],
        "l": false
    },
    {
        "id": "16f5a451047cc52b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 17\";\nmsg.bufferTopic = \"Par17\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4700,
        "wires": [
            [
                "8f8e30e2b407da6d",
                "20659a43a04a80a4"
            ]
        ],
        "l": false
    },
    {
        "id": "fad5a4ce5004499a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 18\";\nmsg.bufferTopic = \"Par18\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4780,
        "wires": [
            [
                "79cdd06e40beb802",
                "d49b678c434485f2"
            ]
        ],
        "l": false
    },
    {
        "id": "cc4c4337d8598ecc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 19\";\nmsg.bufferTopic = \"Par19\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4860,
        "wires": [
            [
                "30b0f5167402d423",
                "f0def203501204b6"
            ]
        ],
        "l": false
    },
    {
        "id": "e5be51da9dadae23",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 20\";\nmsg.bufferTopic = \"Par20\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4940,
        "wires": [
            [
                "20223bd87498b5ee",
                "5e64ab27f2dea081"
            ]
        ],
        "l": false
    },
    {
        "id": "f6305f151b762a98",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3500,
        "wires": [
            [
                "dd6baea7783e37bc"
            ]
        ],
        "l": false
    },
    {
        "id": "bdc7e7e84f4c4b0c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3500,
        "wires": [
            [
                "ca4a1edaa5fc023a"
            ]
        ]
    },
    {
        "id": "715703fab81dbd93",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3580,
        "wires": [
            [
                "8dfac58357b0c2cd"
            ]
        ],
        "l": false
    },
    {
        "id": "0dc7f5d39f3127d3",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3580,
        "wires": [
            [
                "a7429230797db097"
            ]
        ]
    },
    {
        "id": "c6910ba35b5418ce",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3660,
        "wires": [
            [
                "bb8351df1ac38c52"
            ]
        ],
        "l": false
    },
    {
        "id": "9c13e71f5bc9d1e7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3660,
        "wires": [
            [
                "479919feb3058899"
            ]
        ]
    },
    {
        "id": "f67cf7799b208700",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3740,
        "wires": [
            [
                "2508128076eac4bd"
            ]
        ],
        "l": false
    },
    {
        "id": "06e41415799214cf",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3740,
        "wires": [
            [
                "86debc5a4f97c973"
            ]
        ]
    },
    {
        "id": "b148d26a250bff53",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3820,
        "wires": [
            [
                "2722cd6df5fbb251"
            ]
        ],
        "l": false
    },
    {
        "id": "bdf78f96cbefd1c6",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3820,
        "wires": [
            [
                "3d6e15bf221c7bd6"
            ]
        ]
    },
    {
        "id": "bda57aaf499db929",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3900,
        "wires": [
            [
                "92186ca601aefab4"
            ]
        ],
        "l": false
    },
    {
        "id": "623d76cc796e7f21",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3900,
        "wires": [
            [
                "82af4b5a0f52ac76"
            ]
        ]
    },
    {
        "id": "5674810652f911ea",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3980,
        "wires": [
            [
                "8097a7764bce0a38"
            ]
        ],
        "l": false
    },
    {
        "id": "baa57ac987816f13",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3980,
        "wires": [
            [
                "6c32f5d5664b19a3"
            ]
        ]
    },
    {
        "id": "d55e6e4ebfaeb658",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4060,
        "wires": [
            [
                "930d342c53052065"
            ]
        ],
        "l": false
    },
    {
        "id": "3dae4a215bdafc1b",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4060,
        "wires": [
            [
                "c8ab91a560ed71f8"
            ]
        ]
    },
    {
        "id": "cda6c3ed35ca43d2",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4140,
        "wires": [
            [
                "5451a704185b2538"
            ]
        ],
        "l": false
    },
    {
        "id": "4f60b94520d36890",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4140,
        "wires": [
            [
                "530862e4bd5fc5dd"
            ]
        ]
    },
    {
        "id": "b2b3ad46b377b41b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4960,
        "wires": [
            [
                "3f34f9ac1ca68895"
            ]
        ],
        "l": false
    },
    {
        "id": "9e61a9aa1c7f8040",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4960,
        "wires": [
            [
                "563ccafbf406530a"
            ]
        ]
    },
    {
        "id": "531d12cacf943244",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4240,
        "wires": [
            [
                "a9e608518a1af78c"
            ]
        ],
        "l": false
    },
    {
        "id": "8081fb51eb27de5e",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4240,
        "wires": [
            [
                "7d301ca78db870fc"
            ]
        ]
    },
    {
        "id": "fe8b2445cf5bffcc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4320,
        "wires": [
            [
                "bc368a6afc7dbbaf"
            ]
        ],
        "l": false
    },
    {
        "id": "df8c2966ae4501ae",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4320,
        "wires": [
            [
                "bf1017d1f7361191"
            ]
        ]
    },
    {
        "id": "2d8cd48a334fa81d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4400,
        "wires": [
            [
                "33b74f744fa8e4a1"
            ]
        ],
        "l": false
    },
    {
        "id": "3b97ad54380b9053",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4400,
        "wires": [
            [
                "e1860b46a922b74f"
            ]
        ]
    },
    {
        "id": "342e376098eeaa1f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4480,
        "wires": [
            [
                "d403fc74c010d7a7"
            ]
        ],
        "l": false
    },
    {
        "id": "44e9f9323a89fc6f",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4480,
        "wires": [
            [
                "2bdbb327dba60aa3"
            ]
        ]
    },
    {
        "id": "71b5894496981434",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4560,
        "wires": [
            [
                "b52c30a2a2880f69"
            ]
        ],
        "l": false
    },
    {
        "id": "655a043e3a47b754",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4560,
        "wires": [
            [
                "d3a0cfe7d952aab3"
            ]
        ]
    },
    {
        "id": "488d9bffbfb7cf19",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4640,
        "wires": [
            [
                "59e29ea5ce7f7407"
            ]
        ],
        "l": false
    },
    {
        "id": "ae82035500b02bed",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4640,
        "wires": [
            [
                "e4cbb9503fd3a889"
            ]
        ]
    },
    {
        "id": "4dcdfa9c9b5f769a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4720,
        "wires": [
            [
                "11d0ebda6c9b1dc1"
            ]
        ],
        "l": false
    },
    {
        "id": "04be300f8d46d5df",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4720,
        "wires": [
            [
                "32a4953608411804"
            ]
        ]
    },
    {
        "id": "b1cba10656b3ea6b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4800,
        "wires": [
            [
                "b3a42569233813d0"
            ]
        ],
        "l": false
    },
    {
        "id": "df1200469ae59872",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4800,
        "wires": [
            [
                "470eeea93b0d5a1a"
            ]
        ]
    },
    {
        "id": "44232def249926f9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4880,
        "wires": [
            [
                "a9e9158c79e8da01"
            ]
        ],
        "l": false
    },
    {
        "id": "aa12ae0e30512671",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4880,
        "wires": [
            [
                "8b93038682ae7be7"
            ]
        ]
    },
    {
        "id": "513f43ef805a7e0f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3500,
        "wires": [
            [
                "232af31ba00aa562"
            ]
        ],
        "l": false
    },
    {
        "id": "6fff573869e20c65",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Tester 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 3340,
        "wires": []
    },
    {
        "id": "bcfe127f8f6d4906",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3580,
        "wires": [
            [
                "164f614147e3f93c"
            ]
        ],
        "l": false
    },
    {
        "id": "41cd31c507d9a5ec",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3660,
        "wires": [
            [
                "45deb013ca039d03"
            ]
        ],
        "l": false
    },
    {
        "id": "47d94392b2b774d9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3740,
        "wires": [
            [
                "233a0ddd7b19446c"
            ]
        ],
        "l": false
    },
    {
        "id": "6b04c12b58e42397",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3820,
        "wires": [
            [
                "4ca466aa321d20df"
            ]
        ],
        "l": false
    },
    {
        "id": "00caa1c67da75526",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3900,
        "wires": [
            [
                "9c5acfaf7ecd5f90"
            ]
        ],
        "l": false
    },
    {
        "id": "6068b91e0e7b28bc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3980,
        "wires": [
            [
                "fef28fe18a87086c"
            ]
        ],
        "l": false
    },
    {
        "id": "c8f44baeef5a397d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4060,
        "wires": [
            [
                "04a675e3975d8028"
            ]
        ],
        "l": false
    },
    {
        "id": "1f63b64b82a9187f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4140,
        "wires": [
            [
                "4fb653caddd15644"
            ]
        ],
        "l": false
    },
    {
        "id": "a79cf296b7eff02b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4240,
        "wires": [
            [
                "8f80e4654d1b55d5"
            ]
        ],
        "l": false
    },
    {
        "id": "b2f2b390ce213529",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4320,
        "wires": [
            [
                "8cc85f84b8f05166"
            ]
        ],
        "l": false
    },
    {
        "id": "3078968a6ffe428c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4400,
        "wires": [
            [
                "1590136374057cea"
            ]
        ],
        "l": false
    },
    {
        "id": "22242396cb4d3370",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4480,
        "wires": [
            [
                "19823ed844bdd626"
            ]
        ],
        "l": false
    },
    {
        "id": "14e737622fbcbc62",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4560,
        "wires": [
            [
                "b83b1b438a5cb014"
            ]
        ],
        "l": false
    },
    {
        "id": "f0deb1184541ac5e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4640,
        "wires": [
            [
                "0973424cc2554153"
            ]
        ],
        "l": false
    },
    {
        "id": "8f8e30e2b407da6d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4720,
        "wires": [
            [
                "52999fe02f8a9494"
            ]
        ],
        "l": false
    },
    {
        "id": "79cdd06e40beb802",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4800,
        "wires": [
            [
                "98b71aa5a155c2f7"
            ]
        ],
        "l": false
    },
    {
        "id": "30b0f5167402d423",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4880,
        "wires": [
            [
                "e9381c6c2efa7340"
            ]
        ],
        "l": false
    },
    {
        "id": "20223bd87498b5ee",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4960,
        "wires": [
            [
                "bcb8b06302e797ed"
            ]
        ],
        "l": false
    },
    {
        "id": "a411e69c40bebc2c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3500,
        "wires": [
            [
                "bdc7e7e84f4c4b0c",
                "34d402ec05048619"
            ]
        ],
        "l": false
    },
    {
        "id": "f5a9fdd29c8b868d",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3500,
        "wires": [
            [
                "c7d7bc2cafb47168"
            ]
        ]
    },
    {
        "id": "203cae22a8b39377",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3580,
        "wires": [
            [
                "0dc7f5d39f3127d3"
            ]
        ],
        "l": false
    },
    {
        "id": "63667af75e086543",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3580,
        "wires": [
            [
                "f288f1d3177ad584"
            ]
        ]
    },
    {
        "id": "ab493dda56ae8873",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3660,
        "wires": [
            [
                "9c13e71f5bc9d1e7"
            ]
        ],
        "l": false
    },
    {
        "id": "58f0e6cb836184e5",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3660,
        "wires": [
            [
                "1e555cd85810eed1"
            ]
        ]
    },
    {
        "id": "14a6083e96d807d4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3740,
        "wires": [
            [
                "06e41415799214cf"
            ]
        ],
        "l": false
    },
    {
        "id": "f8a25beb4a53f5f0",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 18,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3740,
        "wires": [
            [
                "a84cfe344a33c229"
            ]
        ]
    },
    {
        "id": "7aaf6fae22f95f62",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3820,
        "wires": [
            [
                "bdf78f96cbefd1c6"
            ]
        ],
        "l": false
    },
    {
        "id": "8c9495797bf0a837",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 21,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3820,
        "wires": [
            [
                "52f3e46b81735c64"
            ]
        ]
    },
    {
        "id": "8e2fb7041c053450",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3900,
        "wires": [
            [
                "623d76cc796e7f21"
            ]
        ],
        "l": false
    },
    {
        "id": "f2d766b595465c2d",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 24,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3900,
        "wires": [
            [
                "5d5058132e2365b8"
            ]
        ]
    },
    {
        "id": "9b5f9672bfc3840e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3980,
        "wires": [
            [
                "baa57ac987816f13"
            ]
        ],
        "l": false
    },
    {
        "id": "a724195ba68c2e70",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 27,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3980,
        "wires": [
            [
                "bebd26d647fa8f0c"
            ]
        ]
    },
    {
        "id": "49481cd69d267256",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4060,
        "wires": [
            [
                "3dae4a215bdafc1b"
            ]
        ],
        "l": false
    },
    {
        "id": "59f68ebf319704c4",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 30,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4060,
        "wires": [
            [
                "fdabd27b33315105"
            ]
        ]
    },
    {
        "id": "6d87b71255b0ede6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4140,
        "wires": [
            [
                "4f60b94520d36890"
            ]
        ],
        "l": false
    },
    {
        "id": "842eda3dfbb271a9",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 33,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4140,
        "wires": [
            [
                "1fc0b9ef4645d455"
            ]
        ]
    },
    {
        "id": "d8a102887d441203",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4960,
        "wires": [
            [
                "9e61a9aa1c7f8040"
            ]
        ],
        "l": false
    },
    {
        "id": "4c1753b0f2fd650e",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 33,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4960,
        "wires": [
            [
                "1a66f32f1fa1ad99"
            ]
        ]
    },
    {
        "id": "1949849ceb766b1a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4240,
        "wires": [
            [
                "8081fb51eb27de5e"
            ]
        ],
        "l": false
    },
    {
        "id": "af3fb4bc59cb8252",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4240,
        "wires": [
            [
                "a63362765e7fbd2f"
            ]
        ]
    },
    {
        "id": "477468af17ba0823",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4320,
        "wires": [
            [
                "df8c2966ae4501ae"
            ]
        ],
        "l": false
    },
    {
        "id": "3a28bfb34748b48d",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4320,
        "wires": [
            [
                "fac3fd61a26326ea"
            ]
        ]
    },
    {
        "id": "c91cc653154b13d8",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4400,
        "wires": [
            [
                "3b97ad54380b9053"
            ]
        ],
        "l": false
    },
    {
        "id": "160b72d13e2b96c5",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4400,
        "wires": [
            [
                "f78b87cde3e40c8e"
            ]
        ]
    },
    {
        "id": "c4941a2d5d3ec3ba",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4480,
        "wires": [
            [
                "44e9f9323a89fc6f"
            ]
        ],
        "l": false
    },
    {
        "id": "915ba1c6b20567d7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4480,
        "wires": [
            [
                "413b1d816d1813f2"
            ]
        ]
    },
    {
        "id": "5e8f2d4717770345",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4560,
        "wires": [
            [
                "655a043e3a47b754"
            ]
        ],
        "l": false
    },
    {
        "id": "0e57060bddec2d85",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 18,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4560,
        "wires": [
            [
                "ea5c393063980248"
            ]
        ]
    },
    {
        "id": "cbe8c2b7e1b964e7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4640,
        "wires": [
            [
                "ae82035500b02bed"
            ]
        ],
        "l": false
    },
    {
        "id": "6bb6cd45fd5c7c83",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 21,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4640,
        "wires": [
            [
                "0b0ea851a9f06a0b"
            ]
        ]
    },
    {
        "id": "0b037134ea118f9e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4720,
        "wires": [
            [
                "04be300f8d46d5df"
            ]
        ],
        "l": false
    },
    {
        "id": "02bbab764e450bcc",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 24,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4720,
        "wires": [
            [
                "37fb4a5e323be053"
            ]
        ]
    },
    {
        "id": "daabbc76aeee32aa",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4800,
        "wires": [
            [
                "df1200469ae59872"
            ]
        ],
        "l": false
    },
    {
        "id": "47b8d2e78a5692d9",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 27,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4800,
        "wires": [
            [
                "5ba36b69ec49aa7c"
            ]
        ]
    },
    {
        "id": "3dea99a2c9ec7a2b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4880,
        "wires": [
            [
                "aa12ae0e30512671"
            ]
        ],
        "l": false
    },
    {
        "id": "a192442bba390350",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 30,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4880,
        "wires": [
            [
                "f2a289eb28f4ffc6"
            ]
        ]
    },
    {
        "id": "232af31ba00aa562",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3500,
        "wires": [
            [
                "565129aaccd505c2"
            ]
        ]
    },
    {
        "id": "34d402ec05048619",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Tester 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 3340,
        "wires": []
    },
    {
        "id": "0a85bf12065659c3",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3500,
        "wires": [
            [
                "9f045f76da5108af"
            ]
        ],
        "l": false
    },
    {
        "id": "164f614147e3f93c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3580,
        "wires": [
            [
                "417f9d8f75c22f18"
            ]
        ]
    },
    {
        "id": "91616b827f1d086e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3580,
        "wires": [
            [
                "a8db5a548a7be1d7"
            ]
        ],
        "l": false
    },
    {
        "id": "45deb013ca039d03",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3660,
        "wires": [
            [
                "a82775d2cef65c8a"
            ]
        ]
    },
    {
        "id": "1ee6ed47241901c1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3660,
        "wires": [
            [
                "ba2ca8837d8c019b"
            ]
        ],
        "l": false
    },
    {
        "id": "233a0ddd7b19446c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3740,
        "wires": [
            [
                "38ffc220763e375b"
            ]
        ]
    },
    {
        "id": "84355279b7972b2b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3740,
        "wires": [
            [
                "32f02cb9b9cbfbfd"
            ]
        ],
        "l": false
    },
    {
        "id": "4ca466aa321d20df",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3820,
        "wires": [
            [
                "d822ce3f8faeff4e"
            ]
        ]
    },
    {
        "id": "60795b5da82714a0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3820,
        "wires": [
            [
                "4c8be8c0fc71e11a"
            ]
        ],
        "l": false
    },
    {
        "id": "9c5acfaf7ecd5f90",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3900,
        "wires": [
            [
                "0dddc0d8ba8d9899"
            ]
        ]
    },
    {
        "id": "fb6d6469533a528b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3900,
        "wires": [
            [
                "40138d3a127b5cb8"
            ]
        ],
        "l": false
    },
    {
        "id": "fef28fe18a87086c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3980,
        "wires": [
            [
                "be9d1696830dcabe"
            ]
        ]
    },
    {
        "id": "9ce5fd484113ad63",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3980,
        "wires": [
            [
                "0c32f49bd341151a"
            ]
        ],
        "l": false
    },
    {
        "id": "04a675e3975d8028",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4060,
        "wires": [
            [
                "94b4b6b0e17cf21a"
            ]
        ]
    },
    {
        "id": "1a43aaf823a2a5fa",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4060,
        "wires": [
            [
                "579bcfa752500bf4"
            ]
        ],
        "l": false
    },
    {
        "id": "4fb653caddd15644",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4140,
        "wires": [
            [
                "0348b0a39c452402"
            ]
        ]
    },
    {
        "id": "58f31b30d47e7bfa",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4140,
        "wires": [
            [
                "935301fd35ad30d5"
            ]
        ],
        "l": false
    },
    {
        "id": "8f80e4654d1b55d5",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4240,
        "wires": [
            [
                "bc28b481541e054a"
            ]
        ]
    },
    {
        "id": "3f0cad58f33373c8",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4240,
        "wires": [
            [
                "45f70daf58e6eda6"
            ]
        ],
        "l": false
    },
    {
        "id": "8cc85f84b8f05166",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4320,
        "wires": [
            [
                "996f3110cabb3b77"
            ]
        ]
    },
    {
        "id": "5ce6d2c012cef729",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4320,
        "wires": [
            [
                "267f0c3de6494390"
            ]
        ],
        "l": false
    },
    {
        "id": "1590136374057cea",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4400,
        "wires": [
            [
                "30d02ac8d42d070c"
            ]
        ]
    },
    {
        "id": "5c61ba374ef2091a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4400,
        "wires": [
            [
                "b7eb3bf21bd1c48f"
            ]
        ],
        "l": false
    },
    {
        "id": "19823ed844bdd626",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4480,
        "wires": [
            [
                "5ff7306d2c4f1955"
            ]
        ]
    },
    {
        "id": "f5401a22c5ca596c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4480,
        "wires": [
            [
                "b824690a79d15e38"
            ]
        ],
        "l": false
    },
    {
        "id": "b83b1b438a5cb014",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4560,
        "wires": [
            [
                "7bce2599ce02418f"
            ]
        ]
    },
    {
        "id": "d5346e2d02dac9d5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4560,
        "wires": [
            [
                "58112723eb88eb99"
            ]
        ],
        "l": false
    },
    {
        "id": "0973424cc2554153",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4640,
        "wires": [
            [
                "13515a86ec208199"
            ]
        ]
    },
    {
        "id": "fe8fef790001f807",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4640,
        "wires": [
            [
                "6608211061f830e2"
            ]
        ],
        "l": false
    },
    {
        "id": "52999fe02f8a9494",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4720,
        "wires": [
            [
                "d897905decc4e7b3"
            ]
        ]
    },
    {
        "id": "52de0122bb28ce68",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4720,
        "wires": [
            [
                "3e0bf6e620a3ee5b"
            ]
        ],
        "l": false
    },
    {
        "id": "98b71aa5a155c2f7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4800,
        "wires": [
            [
                "953bfeba234f1a56"
            ]
        ]
    },
    {
        "id": "ea0626a4691244eb",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4800,
        "wires": [
            [
                "d8ea82733c08e843"
            ]
        ],
        "l": false
    },
    {
        "id": "e9381c6c2efa7340",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4880,
        "wires": [
            [
                "4fb6d82d4cdd2dd3"
            ]
        ]
    },
    {
        "id": "55af11858301579e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4880,
        "wires": [
            [
                "8f673d8fe7c93fd6"
            ]
        ],
        "l": false
    },
    {
        "id": "bcb8b06302e797ed",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4960,
        "wires": [
            [
                "193a5a3e1faf944d"
            ]
        ]
    },
    {
        "id": "022d983a11055a03",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4960,
        "wires": [
            [
                "b18aab983becd1bc"
            ]
        ],
        "l": false
    },
    {
        "id": "e09263554f94d05b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3500,
        "wires": [
            [
                "f5a9fdd29c8b868d"
            ]
        ],
        "l": false
    },
    {
        "id": "9b83859f1d92d4bf",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3500,
        "wires": [
            [
                "1b388cb3af1518a3"
            ]
        ]
    },
    {
        "id": "1b1b9abe22d4fc1d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3580,
        "wires": [
            [
                "63667af75e086543"
            ]
        ],
        "l": false
    },
    {
        "id": "f4cddd8a043da5c7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3580,
        "wires": [
            [
                "ea4bcb304ac47911"
            ]
        ]
    },
    {
        "id": "ac3c05b279ec1a9c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3660,
        "wires": [
            [
                "58f0e6cb836184e5"
            ]
        ],
        "l": false
    },
    {
        "id": "8687ce94de113f19",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3660,
        "wires": [
            [
                "0751e7fcaf040c87"
            ]
        ]
    },
    {
        "id": "99973dc421364709",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3740,
        "wires": [
            [
                "f8a25beb4a53f5f0"
            ]
        ],
        "l": false
    },
    {
        "id": "bfb0ceda1af469a3",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3740,
        "wires": [
            [
                "9c14e2b38a9cfcb4"
            ]
        ]
    },
    {
        "id": "5a24971ca3323cbc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3820,
        "wires": [
            [
                "8c9495797bf0a837"
            ]
        ],
        "l": false
    },
    {
        "id": "d7e6d35eb439c4c6",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 20,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3820,
        "wires": [
            [
                "50696ce88a310e14"
            ]
        ]
    },
    {
        "id": "79259e89470b8984",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3900,
        "wires": [
            [
                "f2d766b595465c2d"
            ]
        ],
        "l": false
    },
    {
        "id": "e27f609c03e3dc41",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 23,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3900,
        "wires": [
            [
                "4292b5c67e4f155e"
            ]
        ]
    },
    {
        "id": "f1da06b55592c2c8",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3980,
        "wires": [
            [
                "a724195ba68c2e70"
            ]
        ],
        "l": false
    },
    {
        "id": "aafbf085316f334c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 26,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3980,
        "wires": [
            [
                "253f0e040b694275"
            ]
        ]
    },
    {
        "id": "30dff880dd4ff1ee",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4060,
        "wires": [
            [
                "59f68ebf319704c4"
            ]
        ],
        "l": false
    },
    {
        "id": "0b79bd7c7b561437",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 29,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4060,
        "wires": [
            [
                "8b710a625217f97e"
            ]
        ]
    },
    {
        "id": "ce6a5ca6516c72ff",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4140,
        "wires": [
            [
                "842eda3dfbb271a9"
            ]
        ],
        "l": false
    },
    {
        "id": "e61d4f8adf52fb83",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 32,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4140,
        "wires": [
            [
                "c8cef4989098f245"
            ]
        ]
    },
    {
        "id": "372385c4d34db934",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4960,
        "wires": [
            [
                "4c1753b0f2fd650e"
            ]
        ],
        "l": false
    },
    {
        "id": "17d969608c06ba78",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 32,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4960,
        "wires": [
            [
                "5fe71a0f6173daef"
            ]
        ]
    },
    {
        "id": "4ceb8b051100354c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4240,
        "wires": [
            [
                "af3fb4bc59cb8252"
            ]
        ],
        "l": false
    },
    {
        "id": "8c1669a73673a2c2",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4240,
        "wires": [
            [
                "fb2674d3131311e5"
            ]
        ]
    },
    {
        "id": "bd8ef7587751f0ee",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4320,
        "wires": [
            [
                "3a28bfb34748b48d"
            ]
        ],
        "l": false
    },
    {
        "id": "63bf8b72806ec34d",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4320,
        "wires": [
            [
                "661091f831fbf033"
            ]
        ]
    },
    {
        "id": "bf27b1d92ffaf799",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4400,
        "wires": [
            [
                "160b72d13e2b96c5"
            ]
        ],
        "l": false
    },
    {
        "id": "2deeacdd100aa75b",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4400,
        "wires": [
            [
                "4cc7ba1933343277"
            ]
        ]
    },
    {
        "id": "9e92d73f375dc916",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4480,
        "wires": [
            [
                "915ba1c6b20567d7"
            ]
        ],
        "l": false
    },
    {
        "id": "2165bef03497078c",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4480,
        "wires": [
            [
                "e032316214c38191"
            ]
        ]
    },
    {
        "id": "f5edcbcb9576ce20",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4560,
        "wires": [
            [
                "0e57060bddec2d85"
            ]
        ],
        "l": false
    },
    {
        "id": "edffc10227458bd6",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4560,
        "wires": [
            [
                "60952ee8ead31409"
            ]
        ]
    },
    {
        "id": "524fbbf6e6dd299a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4640,
        "wires": [
            [
                "6bb6cd45fd5c7c83"
            ]
        ],
        "l": false
    },
    {
        "id": "0f25f300a03765d3",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 20,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4640,
        "wires": [
            [
                "812a5997eb9a0e9e"
            ]
        ]
    },
    {
        "id": "e8e2cac404c4f41e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4720,
        "wires": [
            [
                "02bbab764e450bcc"
            ]
        ],
        "l": false
    },
    {
        "id": "0c5d75a6ebc95d19",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 23,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4720,
        "wires": [
            [
                "9c16f50f5c437378"
            ]
        ]
    },
    {
        "id": "ba93c8b4c11a194c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4800,
        "wires": [
            [
                "47b8d2e78a5692d9"
            ]
        ],
        "l": false
    },
    {
        "id": "b8a97dd104df8924",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 26,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4800,
        "wires": [
            [
                "eaba1693187686f3"
            ]
        ]
    },
    {
        "id": "cd36634f10842778",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4880,
        "wires": [
            [
                "a192442bba390350"
            ]
        ],
        "l": false
    },
    {
        "id": "e7ca5a419987af04",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 29,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4880,
        "wires": [
            [
                "9fe82df1f31e9199"
            ]
        ]
    },
    {
        "id": "3af51045eb8094cf",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3500,
        "wires": [
            [
                "9b83859f1d92d4bf"
            ]
        ],
        "l": false
    },
    {
        "id": "9f045f76da5108af",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3500,
        "wires": [
            [
                "52e6894b22641cf5"
            ]
        ]
    },
    {
        "id": "e5a7b3066fd47e90",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3580,
        "wires": [
            [
                "f4cddd8a043da5c7"
            ]
        ],
        "l": false
    },
    {
        "id": "a8db5a548a7be1d7",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3580,
        "wires": [
            [
                "4e4b184f63a4e51a"
            ]
        ]
    },
    {
        "id": "bbc1029f5c0a3bab",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3660,
        "wires": [
            [
                "8687ce94de113f19"
            ]
        ],
        "l": false
    },
    {
        "id": "ba2ca8837d8c019b",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3660,
        "wires": [
            [
                "b1be609411c5f38f"
            ]
        ]
    },
    {
        "id": "df0f09f7dfc72834",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3740,
        "wires": [
            [
                "bfb0ceda1af469a3"
            ]
        ],
        "l": false
    },
    {
        "id": "32f02cb9b9cbfbfd",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 16,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3740,
        "wires": [
            [
                "5480155b3e16347c"
            ]
        ]
    },
    {
        "id": "27c04f945da922e4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3820,
        "wires": [
            [
                "d7e6d35eb439c4c6"
            ]
        ],
        "l": false
    },
    {
        "id": "4c8be8c0fc71e11a",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 19,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3820,
        "wires": [
            [
                "0a260faf33b75e8a"
            ]
        ]
    },
    {
        "id": "6d59bf7285946379",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3900,
        "wires": [
            [
                "e27f609c03e3dc41"
            ]
        ],
        "l": false
    },
    {
        "id": "40138d3a127b5cb8",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 22,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3900,
        "wires": [
            [
                "d52079fc17baf34d"
            ]
        ]
    },
    {
        "id": "3f206ed08de68a41",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3980,
        "wires": [
            [
                "aafbf085316f334c"
            ]
        ],
        "l": false
    },
    {
        "id": "0c32f49bd341151a",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 25,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3980,
        "wires": [
            [
                "832d1a7057f08e81"
            ]
        ]
    },
    {
        "id": "5809e429562db77f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4060,
        "wires": [
            [
                "0b79bd7c7b561437"
            ]
        ],
        "l": false
    },
    {
        "id": "579bcfa752500bf4",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 28,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4060,
        "wires": [
            [
                "fa0a7501df0df1ec"
            ]
        ]
    },
    {
        "id": "5df2497b2d85c77d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4140,
        "wires": [
            [
                "e61d4f8adf52fb83"
            ]
        ],
        "l": false
    },
    {
        "id": "935301fd35ad30d5",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 31,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4140,
        "wires": [
            [
                "a0793bd87faea5e4"
            ]
        ]
    },
    {
        "id": "47d88049edb1043f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4240,
        "wires": [
            [
                "8c1669a73673a2c2"
            ]
        ],
        "l": false
    },
    {
        "id": "45f70daf58e6eda6",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4240,
        "wires": [
            [
                "0bcaf3c252d5e373"
            ]
        ]
    },
    {
        "id": "5ee15d18fecd0f2c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4320,
        "wires": [
            [
                "63bf8b72806ec34d"
            ]
        ],
        "l": false
    },
    {
        "id": "267f0c3de6494390",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4320,
        "wires": [
            [
                "f5c390c8e3ee0797"
            ]
        ]
    },
    {
        "id": "3fe761977f1c2b71",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4400,
        "wires": [
            [
                "2deeacdd100aa75b"
            ]
        ],
        "l": false
    },
    {
        "id": "b7eb3bf21bd1c48f",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4400,
        "wires": [
            [
                "3c9fe94481aa39a9"
            ]
        ]
    },
    {
        "id": "33a374d829594bea",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4480,
        "wires": [
            [
                "2165bef03497078c"
            ]
        ],
        "l": false
    },
    {
        "id": "b824690a79d15e38",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4480,
        "wires": [
            [
                "40337d0c6f501624"
            ]
        ]
    },
    {
        "id": "c351e1de912f79ff",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4560,
        "wires": [
            [
                "edffc10227458bd6"
            ]
        ],
        "l": false
    },
    {
        "id": "58112723eb88eb99",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 16,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4560,
        "wires": [
            [
                "1167fe2bed9ffa8c"
            ]
        ]
    },
    {
        "id": "39c223d820891970",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4640,
        "wires": [
            [
                "0f25f300a03765d3"
            ]
        ],
        "l": false
    },
    {
        "id": "6608211061f830e2",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 19,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4640,
        "wires": [
            [
                "63fefac0515ca6ac"
            ]
        ]
    },
    {
        "id": "299ba18b7af3a6e5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4720,
        "wires": [
            [
                "0c5d75a6ebc95d19"
            ]
        ],
        "l": false
    },
    {
        "id": "3e0bf6e620a3ee5b",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 22,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4720,
        "wires": [
            [
                "4202b1081220795d"
            ]
        ]
    },
    {
        "id": "b34a77b4ba345b8e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4800,
        "wires": [
            [
                "b8a97dd104df8924"
            ]
        ],
        "l": false
    },
    {
        "id": "d8ea82733c08e843",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 25,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4800,
        "wires": [
            [
                "f9420941a7f1e56f"
            ]
        ]
    },
    {
        "id": "a076384c07aae51f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4880,
        "wires": [
            [
                "e7ca5a419987af04"
            ]
        ],
        "l": false
    },
    {
        "id": "8f673d8fe7c93fd6",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 28,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4880,
        "wires": [
            [
                "051abd0ce0cb9490"
            ]
        ]
    },
    {
        "id": "593f325218865367",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4960,
        "wires": [
            [
                "17d969608c06ba78"
            ]
        ],
        "l": false
    },
    {
        "id": "b18aab983becd1bc",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 31,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4960,
        "wires": [
            [
                "dacf26cf1e2e577d"
            ]
        ]
    },
    {
        "id": "cb66ed71ad74b490",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "f24d9462b2c2f4ce",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 2350,
        "y": 3820,
        "wires": []
    },
    {
        "id": "1b1211b416def853",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "f24d9462b2c2f4ce",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance (L)",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 2530,
        "y": 3820,
        "wires": []
    },
    {
        "id": "88bc397812c62d54",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "f24d9462b2c2f4ce",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance (L)",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 2730,
        "y": 3820,
        "wires": []
    },
    {
        "id": "9bd6e4c03f879364",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "d53c3b4207d65609",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 2350,
        "y": 3860,
        "wires": []
    },
    {
        "id": "c675aed6a24dfab4",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "d53c3b4207d65609",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance (L)",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 2530,
        "y": 3860,
        "wires": []
    },
    {
        "id": "848b20b9aaae9ab7",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "group": "d53c3b4207d65609",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance (L)",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 2730,
        "y": 3860,
        "wires": []
    },
    {
        "id": "3b18e765f290d429",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 315",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 3300,
        "wires": []
    },
    {
        "id": "e8a943f8a96d428d",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Parameters Main Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 3340,
        "wires": []
    },
    {
        "id": "6055f81b76235024",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "Active Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 105,
        "y": 4460,
        "wires": [
            [
                "f5b352ee10d45e39"
            ]
        ],
        "l": false
    },
    {
        "id": "f5b352ee10d45e39",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "function 25",
        "func": "let output = [],\n    current = {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    },\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\n\n\nfor (let i = 0; i < 10; i ++) {\n    current = {\n        name: names[i],\n        value: (i + 1) * 100,\n        upperTol: (i + 1) * 10 + (i + 1),\n        lowerTol: (i + 1) * 10,\n        instructions: \"Words in Parameter \" + (i + 1),\n        ifTestFailStop: ((i % 2) == 0) ? false : true\n    }\n    msg.payload = current;\n    msg.topic = 'Par',\n    msg.topic += (i != 9) ? ('0' + (i + 1)) : i + 1\n    msg.lineFlag = 'JSONdata';\n    node.send(msg);\n}\n\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 165,
        "y": 4460,
        "wires": [
            [
                "d9df423a3895d4be",
                "cb54ab3b8289b47d"
            ]
        ],
        "l": false
    },
    {
        "id": "d9df423a3895d4be",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 316",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 4360,
        "wires": []
    },
    {
        "id": "32df2ab2534d754a",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "7ff7b812d923eb51",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "save",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "save",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "save",
        "payload": "",
        "payloadType": "date",
        "x": 2250,
        "y": 3440,
        "wires": [
            [
                "1528d5c03f656391"
            ]
        ]
    },
    {
        "id": "b395b444c0d948d6",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "ActiveTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "lineFlag",
                "v": "JSONdata",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"File_Name\":\"ActiveTest\"}",
        "payloadType": "json",
        "x": 3130,
        "y": 4340,
        "wires": [
            [
                "5392a7c2a1692cd3"
            ]
        ]
    },
    {
        "id": "8c293ed2d8aa10d0",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "ActiveTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "JSONdata",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"basic\":{\"GB\":{\"value\":100,\"upperTol\":11,\"lowerTol\":10,\"upperVal\":\"\",\"lowerVal\":\"\"},\"ACW\":{\"value\":200,\"upperTol\":22,\"lowerTol\":20,\"upperVal\":\"\",\"lowerVal\":\"\"},\"IR\":{\"value\":300,\"upperTol\":33,\"lowerTol\":30,\"upperVal\":\"\",\"lowerVal\":\"\"},\"EL\":{\"value\":400,\"upperTol\":44,\"lowerTol\":40,\"upperVal\":\"\",\"lowerVal\":\"\"}}}",
        "payloadType": "json",
        "x": 150,
        "y": 2120,
        "wires": [
            [
                "8e39b643f9694dd0"
            ]
        ]
    },
    {
        "id": "e08ca0375cdbf2c1",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "b750fd9a1e049df3",
        "name": "debug 318",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 3460,
        "wires": []
    },
    {
        "id": "df6224383db0e75e",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4300,
        "y": 4320,
        "wires": [
            [
                "1bff7e2463390e69"
            ]
        ]
    },
    {
        "id": "1bff7e2463390e69",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "Trigger buffer",
        "func": "msg.complete = \"\";\nmsg.lineFlag = \"save\";\nlet send = []\n\n//Need to save the button push event into join nodes to know\n//if join dump occured from save. \nmsg.topic = \"save\";\nmsg.payload = \"saved from button\" // I'm certain a payload isn't necessary\n\n//if (flow.get(\"basicFormCheck\") && flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\nif (flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\n    send = [msg, { payload: \"Recipe is being saved\" }]\n} else {\n    let text = \"\";\n    //(flow.get(\"basicFormCheck\")) ? null : text += \"|| Basic form is not filled in \";\n    (flow.get(\"fileCodeCheck\")) ? null : text += \"|| File Code is not filled in \";\n    (flow.get(\"filenameCheck\")) ? null : text += \"|| File Name is not filled in \"\n    text += \"||\"\n    send = [, {payload: text}]\n}\n\nreturn send;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4470,
        "y": 4280,
        "wires": [
            [
                "71c595e63ff79b13",
                "6b60d868c60bad8f"
            ],
            [
                "1ce03c90a89697b3",
                "57d694413c2f01a3",
                "6b60d868c60bad8f"
            ]
        ]
    },
    {
        "id": "ca19a7a2f6dd2ecb",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "save",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 4290,
        "y": 4280,
        "wires": [
            [
                "1bff7e2463390e69"
            ]
        ]
    },
    {
        "id": "71c595e63ff79b13",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "Trigger out",
        "mode": "link",
        "links": [
            "406ccc7dc902cb53",
            "52f504cfc73cafc8",
            "871495341ec0155a",
            "ba6421b25b5c72d1"
        ],
        "x": 4615,
        "y": 4260,
        "wires": []
    },
    {
        "id": "6b60d868c60bad8f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "Save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4690,
        "y": 4240,
        "wires": []
    },
    {
        "id": "1ce03c90a89697b3",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "group": "0465010f96f3dad5",
        "order": 16,
        "width": 17,
        "height": 1,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "statuss",
        "x": 4620,
        "y": 4340,
        "wires": []
    },
    {
        "id": "57d694413c2f01a3",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "HMIalert",
        "topic": "",
        "name": "",
        "x": 4690,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "a1982ea9adddca11",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "Save",
        "info": "",
        "x": 4270,
        "y": 4240,
        "wires": []
    },
    {
        "id": "941d80461e53565b",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "4e347896ac92be60",
        "name": "Status in",
        "links": [
            "252a8317cf12e598",
            "d3d9847c7a50a19d",
            "6bc5bada2b8f6678",
            "57975c0730ca79b1",
            "3241449b1e876a30",
            "ebb92725639dba49",
            "86690c31f06da9e8",
            "09018b7e37fbd0c3"
        ],
        "x": 4515,
        "y": 4340,
        "wires": [
            [
                "1ce03c90a89697b3"
            ]
        ]
    },
    {
        "id": "b1ad242506530902",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Cancel / Clear",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Clear",
        "topicType": "str",
        "x": 4480,
        "y": 4520,
        "wires": [
            [
                "0875da1f7857ebef"
            ]
        ]
    },
    {
        "id": "434ae88eabfed344",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 4300,
        "y": 4520,
        "wires": [
            [
                "b1ad242506530902"
            ]
        ]
    },
    {
        "id": "5c0ca47db7de7914",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "Clear in",
        "links": [
            "dfafbb074fbdb135",
            "7ec219affebfe24c",
            "ed4cd4c73b905479"
        ],
        "x": 4335,
        "y": 4480,
        "wires": [
            [
                "b1ad242506530902"
            ]
        ]
    },
    {
        "id": "0875da1f7857ebef",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "Set Clear line",
        "func": "if (msg.lineFlag == undefined) {\n    msg.lineFlag = \"clear\";\n}\n\nmsg.complete = \"\";\nmsg.topic = \"clear\"\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4660,
        "y": 4520,
        "wires": [
            [
                "465d86337b87dea0",
                "252a8317cf12e598"
            ]
        ]
    },
    {
        "id": "465d86337b87dea0",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4810,
        "y": 4560,
        "wires": []
    },
    {
        "id": "252a8317cf12e598",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "Clear out",
        "mode": "link",
        "links": [
            "d7aee534c8662114",
            "6380ab3c4bd62f4c",
            "d9691dd722fbc6ec",
            "a094758d06aa3eb4",
            "74064f9dbf34c755",
            "6354d23031cdfbee",
            "1a1e0e1defa43f71",
            "941d80461e53565b",
            "c4735886d61a7a6b",
            "3eeef4109181c7b4",
            "0641aa28dd7a7d55",
            "9ff766c71fea5ab8",
            "8af2f4ee99b16137",
            "c1b824be4a149e9b",
            "26aa749b2bab4f5c",
            "f20ae25ed86a8160"
        ],
        "x": 4785,
        "y": 4480,
        "wires": []
    },
    {
        "id": "7ea79b52a3145ef8",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "d6adbcab7cef2569",
        "name": "Cancel / Clear",
        "info": "",
        "x": 4290,
        "y": 4440,
        "wires": []
    },
    {
        "id": "0ca2fefd0c760dfc",
        "type": "ui_text_input",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "",
        "label": "File Code",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3380,
        "y": 4100,
        "wires": [
            [
                "58aa594d12926a2e",
                "802afcddf8247622",
                "a792c924c93eb824"
            ]
        ]
    },
    {
        "id": "7c0c18c60dd0a49d",
        "type": "change",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.File_Code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3180,
        "y": 4100,
        "wires": [
            [
                "0ca2fefd0c760dfc",
                "d9aca6a39ee68dc5",
                "63fb3d84bde10dfd",
                "012f6873a87a421c"
            ]
        ]
    },
    {
        "id": "1a1e0e1defa43f71",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "File Code Clear in",
        "links": [
            "252a8317cf12e598"
        ],
        "x": 3235,
        "y": 4140,
        "wires": [
            [
                "0ca2fefd0c760dfc",
                "012f6873a87a421c",
                "ef6e5d343b8bb94e"
            ]
        ]
    },
    {
        "id": "58aa594d12926a2e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "Set topic",
        "func": "msg.topic = \"File_Code\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 4100,
        "wires": [
            [
                "fe2fd125a1985170",
                "1af4e1b2f640a324"
            ]
        ]
    },
    {
        "id": "b0892ee884fc3d86",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "File Code in",
        "links": [
            "6af902d695bd77d9"
        ],
        "x": 3065,
        "y": 4140,
        "wires": [
            [
                "7c0c18c60dd0a49d"
            ]
        ]
    },
    {
        "id": "fe2fd125a1985170",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "File Code out",
        "mode": "link",
        "links": [
            "24816058e18ea49a"
        ],
        "x": 3640,
        "y": 4060,
        "wires": []
    },
    {
        "id": "c044ead83e849bd6",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "File Code",
        "info": "",
        "x": 3100,
        "y": 3920,
        "wires": []
    },
    {
        "id": "802afcddf8247622",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "Save check File Code",
        "func": "let check = flow.get(\"fileCodeCheck\");\nif (check == undefined) {\n    context.set(\"fileCodeCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"fileCodeCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"fileCodeCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 4000,
        "wires": [
            [
                "a792c924c93eb824"
            ]
        ]
    },
    {
        "id": "a792c924c93eb824",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "Save check File Code",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 4000,
        "wires": []
    },
    {
        "id": "63fb3d84bde10dfd",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "debug 96",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3440,
        "y": 3920,
        "wires": []
    },
    {
        "id": "ef6e5d343b8bb94e",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "debug 255",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3490,
        "y": 3960,
        "wires": []
    },
    {
        "id": "6410f60462818572",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "activeTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "8100084100",
        "payloadType": "str",
        "x": 3150,
        "y": 4020,
        "wires": [
            [
                "0ca2fefd0c760dfc",
                "d9aca6a39ee68dc5",
                "012f6873a87a421c"
            ]
        ]
    },
    {
        "id": "1af4e1b2f640a324",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "827fa831eff54f82",
        "name": "debug 317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3820,
        "y": 4100,
        "wires": []
    },
    {
        "id": "4455d377704704b1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 1';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "d3cbb012b1a406a6",
                "b1fd165f110f9f26"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "e442ebce5eba834c",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 250,
        "y": 760,
        "wires": [
            [
                "4455d377704704b1",
                "5230c829eb2ddb0f",
                "a1f95b0b52584fdd",
                "c2e3d44872113d40",
                "45fd2ef4df9adebc",
                "e4a97f9dcb6c9f1e",
                "76c63e5719a80bba",
                "708684323da7ef02",
                "4efe9be938a6d0c4",
                "1bc73ebb7073039a"
            ]
        ]
    },
    {
        "id": "d3cbb012b1a406a6",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 760,
        "wires": [
            [
                "e2a1a3752fd2d703",
                "78756093e4d5be57"
            ]
        ]
    },
    {
        "id": "b1fd165f110f9f26",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 700,
        "wires": []
    },
    {
        "id": "78756093e4d5be57",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "debug 175",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 680,
        "wires": []
    },
    {
        "id": "13ea5f9e73e768b7",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "PLC Test indicator out",
        "mode": "link",
        "links": [
            "06de241923fb3027"
        ],
        "x": 715,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5230c829eb2ddb0f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "debug 177",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 700,
        "wires": []
    },
    {
        "id": "e2a1a3752fd2d703",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 760,
        "wires": [
            [
                "d38e42059faddb48",
                "8b6cdcac16546f5d"
            ],
            []
        ]
    },
    {
        "id": "3c6a7b7270f95e49",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "debug 174",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d6dfa202aac50a08",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Initialise PLC checking in",
        "links": [
            "bb173ba33d67cf16"
        ],
        "x": 75,
        "y": 900,
        "wires": [
            [
                "f6ad240b95bcc93a"
            ]
        ]
    },
    {
        "id": "f6be93a5333d4f7c",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 840,
        "wires": [
            [
                "ac63b577c405ad32",
                "cc6dfdc8e3f97b98"
            ],
            []
        ]
    },
    {
        "id": "3a7704aeb3729191",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 920,
        "wires": [
            [
                "fc68d311794a4992",
                "ae3eed1eb09eabc7"
            ],
            []
        ]
    },
    {
        "id": "b89652448221a8e1",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 1000,
        "wires": [
            [
                "34001adbd2eda7bd",
                "eddabb4e22349d3f"
            ],
            []
        ]
    },
    {
        "id": "8cd37e74c3e2dff5",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 840,
        "wires": [
            [
                "f6be93a5333d4f7c"
            ]
        ]
    },
    {
        "id": "50b00d2e9d9d0468",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 920,
        "wires": [
            [
                "3a7704aeb3729191"
            ]
        ]
    },
    {
        "id": "2a9b85caee5a7a81",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "b89652448221a8e1"
            ]
        ]
    },
    {
        "id": "a1f95b0b52584fdd",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 2';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 840,
        "wires": [
            [
                "8cd37e74c3e2dff5"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "c2e3d44872113d40",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 3';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 920,
        "wires": [
            [
                "50b00d2e9d9d0468"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "45fd2ef4df9adebc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 4';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "2a9b85caee5a7a81"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "06de241923fb3027",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "PLC Indicator Buffer in",
        "links": [
            "dc550e55a3ad01c0",
            "13ea5f9e73e768b7",
            "77355d48a911f470"
        ],
        "x": 475,
        "y": 1660,
        "wires": [
            [
                "896acc9327ec31b3"
            ]
        ]
    },
    {
        "id": "5c06434f788df45c",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "PLC Indicator Buffer out",
        "mode": "link",
        "links": [
            "e48051794ddf3e88"
        ],
        "x": 785,
        "y": 1660,
        "wires": []
    },
    {
        "id": "4cbc36bc389c3a94",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Local",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 830,
        "y": 1080,
        "wires": [
            [
                "e62f96b0a6067aa9",
                "6f67f1d9ddb39748"
            ],
            []
        ]
    },
    {
        "id": "df655c1225e74515",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1080,
        "wires": [
            [
                "4cbc36bc389c3a94",
                "3c6a7b7270f95e49"
            ]
        ]
    },
    {
        "id": "5c49690d4f930bda",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'local';\n\nif (msg.lineFlag == 'sqlHandshake') { //Value determined in the Template HS Buffer node\n    msg = {\n        payload: msg.payload,\n        machineID: msg.machineID\n    }\n}\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "df655c1225e74515"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "e2ebcb89eb8a385e",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "debug 299",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f1a1f012d626af94",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ATEKA 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 250,
        "y": 900,
        "wires": [
            [
                "4455d377704704b1"
            ],
            [
                "a1f95b0b52584fdd"
            ],
            [
                "c2e3d44872113d40"
            ],
            [
                "45fd2ef4df9adebc"
            ],
            [
                "e4a97f9dcb6c9f1e"
            ],
            [
                "76c63e5719a80bba"
            ],
            [
                "708684323da7ef02"
            ],
            [
                "4efe9be938a6d0c4"
            ],
            [
                "1bc73ebb7073039a"
            ]
        ]
    },
    {
        "id": "6f67f1d9ddb39748",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "local",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 880,
        "wires": []
    },
    {
        "id": "eddabb4e22349d3f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "ATEKA4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 840,
        "wires": []
    },
    {
        "id": "ae3eed1eb09eabc7",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "ATEKA3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 800,
        "wires": []
    },
    {
        "id": "cc6dfdc8e3f97b98",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "ATEKA2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 760,
        "wires": []
    },
    {
        "id": "8b6cdcac16546f5d",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "ATEKA1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "fdc7608ce5c00e1f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Buffer input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1660,
        "wires": []
    },
    {
        "id": "886b418ee679cebd",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Template HS Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// initialize context variables\nlet buffer = context.get('buffer') || []; //The buffer that contains the whole incomming message\nlet ID = context.get('ID') || [];       // A unique identifier of the incomming message, which is indexed and spliced in unison with buffer\n//Indicator for whether the buffer is waiting for a message to return or not\nlet waiting = context.get('waiting');  \nif (waiting == undefined) {\n    waiting = false; //Set the waiting or the current instance to false\n    context.set('waiting', true); // Sets the next message that'll be recieved to wait\n}\n \n// Set paramarams\n    //Sets the trigger msg member name and what the value of it is \nlet msgTriggerName = 'lineFlag',\n    msgTriggerValue = 'sqlHandshake',\n    incommingUniqueIDmsgMember = 'machineID',\n    outgoingUniqueIDmsgMember = 'machineID'\n\n// Check for trigger\nif (msg[msgTriggerName] == msgTriggerValue) {\n    let index = ID.indexOf(msg[incommingUniqueIDmsgMember]);\n    if (index != -1) { // Looking for the returned message in the context variables\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        return null;\n    }\n\n    //Make copy of incoming message\n    let msgCOPY = JSON.parse(JSON.stringify(msg));\n    // Sets the next msg to go out (FIFO)\n    msg = {\n        ...buffer[0]\n    }\n    msg[outgoingUniqueIDmsgMember] = ID[0];\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        return [ ,msgCOPY]\n    } else {\n        return [msg, msgCOPY];\n    }  \n} else if (msg.topic == 'resetBuffer') {\n    context.set('ID', undefined)\n    context.set('buffer', undefined)\n    context.set('waiting', false)\n} else {\n\n    // Add the incoming message payload and topic to the buffer\n    let index = ID.indexOf(msg.machineID);\n    if (index != -1) { // The message already exists\n        buffer[index] = msg;\n    } else {\n        buffer.push(msg);\n        ID.push(msg[incommingUniqueIDmsgMember]); \n    }\n\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return [msg, ];       \n    }\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1700,
        "wires": [
            [
                "5c06434f788df45c",
                "1149143c567f18c4"
            ],
            [
                "bb173ba33d67cf16",
                "ed2d11b76d3a53ae"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "bb173ba33d67cf16",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Return from PLC indicator buffer out",
        "mode": "link",
        "links": [
            "d6dfa202aac50a08"
        ],
        "x": 775,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1149143c567f18c4",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Top",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1680,
        "wires": []
    },
    {
        "id": "ed2d11b76d3a53ae",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Bottom",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f6ad240b95bcc93a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "function 31",
        "func": "msg = {\n    machineID: msg.machineID,\n    payload: 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 145,
        "y": 900,
        "wires": [
            [
                "f1a1f012d626af94"
            ]
        ],
        "l": false
    },
    {
        "id": "59ff9798a079d4b9",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "PLC finished test trigger",
        "info": "",
        "x": 180,
        "y": 680,
        "wires": []
    },
    {
        "id": "a95ae07b5ab28512",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping communication",
        "info": "",
        "x": 1330,
        "y": 60,
        "wires": []
    },
    {
        "id": "378c6296225c8dad",
        "type": "ui_dropdown",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Parameter Count",
        "group": "0465010f96f3dad5",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "Parameters 1 - 10",
                "type": "str"
            },
            {
                "label": "",
                "value": "Parameters 11 - 20",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "6aa300dd51405ad4"
            ]
        ]
    },
    {
        "id": "d385a952857aa920",
        "type": "ui_ui_control",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "",
        "events": "all",
        "x": 840,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6aa300dd51405ad4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "Set ui control",
        "func": "\nswitch (msg.payload) {\n    case \"Parameters 1 - 10\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\"]}}';\n        break;\n\n    case \"Parameters 11 - 20\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"]}}';\n        break;\n\n    case \"Parameters 21 - 30\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"],\"show\":[\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"]}}';\n        break;\n}\n\n/*\nlet groups = [\"Recipes_Stove 1\", \"Recipes_Stove 2\", \"Recipes_Stove 3\"];\n\nmsg.payload = \"Recipes_\" + msg.payload;\nlet index = groups.indexOf(msg.payload);\nlet pickedOption = groups.splice(index, 1);\nfor (let i = 0; i < groups.length; i++) {\n    groups[i] = '\"' + groups[i].toString().replace(/ /g, \"_\") + '\"';\n}\npickedOption = pickedOption.toString().replace(/ /g, \"_\");\nmsg.payload = '{\"group\":{\"hide\":[' + groups.toString() + '],\"show\":[\"' + pickedOption+'\"]}}';\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 380,
        "wires": [
            [
                "82a4e6c963b6bca0"
            ]
        ]
    },
    {
        "id": "82a4e6c963b6bca0",
        "type": "json",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "d385a952857aa920"
            ]
        ]
    },
    {
        "id": "d3d5223d08422474",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "Dropdown Parameters",
        "info": "",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "5a6f14d119497699",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "HMI CSV Write",
        "info": "",
        "x": 140,
        "y": 2780,
        "wires": []
    },
    {
        "id": "1bb1f7cc2ae18243",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Load to PLC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 2820,
        "wires": [
            [
                "afe3ec8186270ff5"
            ]
        ]
    },
    {
        "id": "afe3ec8186270ff5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Config FL Set Par",
        "func": "msg.data = {}; // Data that will be written to the csv\n\n\n//Set: filename for HMI csv\n//msg.data.shortFilename = flow.get('HMIrecipeName') // Note: Might want to dynamically set this\nmsg.data.shortFilename = 'Active';\nmsg.data.fileLocation = flow.get('HMIcsvLocation'); // Not the whole path + filename\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: msg.data.fileLocation,\n    pattern: '*.json' \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2880,
        "wires": [
            [
                "9237a61f3f7aa2d6",
                "a5c2bfad8d4f12ea"
            ]
        ]
    },
    {
        "id": "c9b997d4d95153f7",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2880,
        "wires": [
            [
                "afe3ec8186270ff5"
            ]
        ]
    },
    {
        "id": "9237a61f3f7aa2d6",
        "type": "fs-file-lister",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 560,
        "y": 2880,
        "wires": [
            [
                "637b24869f105280",
                "319fb4c24b67edfd"
            ]
        ],
        "info": "Looking for the HMI Recipe CSV"
    },
    {
        "id": "a5c2bfad8d4f12ea",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "FL Config",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2820,
        "wires": []
    },
    {
        "id": "637b24869f105280",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "FL ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 2820,
        "wires": []
    },
    {
        "id": "319fb4c24b67edfd",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Separate files",
        "func": "msg.payload.forEach((element) => {\n    node.send({\n        payload: element,\n        IDfilename: element.split('\\\\').pop()\n    })\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2880,
        "wires": [
            [
                "b0bbc107cbb989c8",
                "79383a50460fb84b"
            ]
        ]
    },
    {
        "id": "b0bbc107cbb989c8",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "FL ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2820,
        "wires": []
    },
    {
        "id": "79383a50460fb84b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "HS Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  20) {\n    return null;\n}*/\n\n// initialize context variables\nlet buffer = context.get('buffer') || []; //The buffer that contains the whole incomming message\nlet ID = context.get('ID') || [];       // A unique identifier of the incomming message, which is indexed and spliced in unison with buffer\n//Indicator for whether the buffer is waiting for a message to return or not\nlet waiting = context.get('waiting');  \nif (waiting == undefined) {\n    waiting = false; //Set the waiting or the current instance to false\n    context.set('waiting', true); // Sets the next message that'll be recieved to wait\n}\n\n// Set paramarams\n    //Sets the trigger msg member name and what the value of it is \nlet msgTriggerName = 'lineFlag',\n    msgTriggerValue = 'fileReading',\n    incommingUniqueIDmsgMember = 'IDfilename',\n    outgoingUniqueIDmsgMember = 'IDfilename'\n\n// Check for trigger\nif (msg[msgTriggerName] == msgTriggerValue) {\n    let index = ID.indexOf(msg[incommingUniqueIDmsgMember]);\n    if (index != -1) { // Looking for the returned message in the context variables\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n\n    // Sets the next msg to go out (FIFO)\n    msg = {\n        ...buffer[0]\n    }\n    msg[outgoingUniqueIDmsgMember] = ID[0];\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n    } else {\n        msg[msgTriggerName] = msgTriggerValue\n        msg.bufferCount = ID.length\n        return msg;\n    }  \n} else {\n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg[incommingUniqueIDmsgMember]);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            msg[msgTriggerName] = msgTriggerValue\n            msg.bufferCount = ID.length\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2880,
        "wires": [
            [
                "1dafdab711244010",
                "9638424ce55bafac"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "b621e31f60520cb7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Set write -> HMI CSV",
        "func": "//msg.payload = global.get(\"writeData\");\n\n//Set\nlet data = msg.payload,\n    parKeys,\n    basKey;\n\nif (msg.payload.parameterData != undefined) {\n    parKeys = Object.keys(msg.payload.parameterData) || [];\n} else {\n    parKeys = []\n}\nif (msg.payload.basic != undefined) {\n    basKey = Object.keys(msg.payload.basic) || [];\n} else {\n    basKey = []\n}\n    \nlet names = [],\n    values = [],\n    instructions = [],\n    output = [],\n    parameterCount = 20, // Set\n    basicCount = basKey.length,\n    totalCount = 35, //basicCount + parameterCount;\n    count = 1;\n\nmsg.recipeIdentity = data.File_Code;\n// First part is mostly hard coded parameters\noutput.push([data.File_Code, 5, totalCount, , , ,],\n            [8, 20, 0, 0, , ,],\n            [5, 2, 4, 2, , ,],\n            [5, 2, 4, 2, , ,],\n            [0, 1, 0, 0, , ,],\n            [8, 25, 0, 0, , ,]);\n\n//First line of data is special\noutput.push([count++, data.File_Name, 0, 0, + data.Powered_Inspection, ,]);\n\n//del\nlet basicHeaders = [\"Ground Bond\", \"ACW Test\", \"Insulation Resistance\", \"Earth Leakage\"],\n    j = 0,\n    i = 0;\n\nfor(i = 0; i < basicCount; i++) {\n    output.push([count++, basicHeaders[j++], data.basic[basKey[i]].lowerVal, data.basic[basKey[i]].upperVal, 0, ,]);\n}\n\n//node.warn('final i: ' + i);\n//output.push([count++, basicHeaders[j++], data.basic[basKey[--i]], 0, 0, ,]) // used for initial\n\n//Incomplete: Assumption 1 that the length of incoming Parameter data is < \nfor (let i = 0; i < parKeys.length; i++) {/*\n    names.push(data.parameterData[parKeys[i]].name);\n    values.push(data.parameterData[parKeys[i]].value);\n    instructions.push(data.parameterData[parKeys[i]].instructions);*/\n    let instructions = data.parameterData[parKeys[i]].instructions\n    if (instructions == undefined) { // No instructions were set\n        instructions = \"\"\n    } else {\n        instructions = instructions.substring(0, 50)\n    }\n        \n    output.push([count++, data.parameterData[parKeys[i]].name.substring(0, 40), data.parameterData[parKeys[i]].lowerVal, data.parameterData[parKeys[i]].upperVal, + data.parameterData[parKeys[i]].ifTestFailStop, instructions]);\n}\nwhile (count <= totalCount) {\n    output.push([count++, , 0, 0, 0, \"\"]);\n}\nlet text = \"\";\n//del\nnode.send([, {output: output}]);\n//\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    text += output[i].toString() + \"\\r\\n\";\n}\n\ntext += '\\r\\n';\n\nmsg.payload = {\n//    output: output,\n    text: text\n}\n\nmsg.check = {\n    basKey: basKey,\n    parKeys: parKeys\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2900,
        "wires": [
            [
                "4f02696ce162017a",
                "79383a50460fb84b",
                "eeb826c2bb74fded"
            ],
            [
                "dcebfacc6a50241e"
            ]
        ]
    },
    {
        "id": "1dafdab711244010",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "HS Buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 2820,
        "wires": []
    },
    {
        "id": "9638424ce55bafac",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Config Read File",
        "func": "msg.filename = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2880,
        "wires": [
            [
                "9afc632ca087cf3f",
                "51946cbae1d69e01"
            ]
        ]
    },
    {
        "id": "85ce25fdcd82b9ba",
        "type": "json",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1450,
        "y": 2880,
        "wires": [
            [
                "71f2027831381a79",
                "b621e31f60520cb7"
            ]
        ]
    },
    {
        "id": "4f02696ce162017a",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "HMI JSON write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 2820,
        "wires": []
    },
    {
        "id": "eeb826c2bb74fded",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Store",
        "func": "let buffer = context.get('buffer') || \"ENRCP-4.0, , , , , ,\\r\\n\";\nbuffer += msg.payload.text;\ncontext.set('buffer', buffer);\nif (msg.bufferCount == 2) {\n    msg.data = {};\n    msg.data.text = buffer\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2880,
        "wires": [
            [
                "975deaea0ffb411c",
                "3579e20f8a40fde0"
            ]
        ]
    },
    {
        "id": "9afc632ca087cf3f",
        "type": "file in",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1300,
        "y": 2880,
        "wires": [
            [
                "1ba62f03edd0c67b",
                "85ce25fdcd82b9ba"
            ]
        ]
    },
    {
        "id": "51946cbae1d69e01",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Config Read",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 2800,
        "wires": []
    },
    {
        "id": "71f2027831381a79",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 2820,
        "wires": []
    },
    {
        "id": "975deaea0ffb411c",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Store",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 2820,
        "wires": []
    },
    {
        "id": "3579e20f8a40fde0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Create First section of HMI csv",
        "func": "\n\nmsg.payload = { // Used for File Lister node\n    start: global.get('userCredentialsLocation'),\n    //Set: name of file with user names and passwords\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2880,
        "wires": [
            [
                "59a072a71c2d9dcb"
            ]
        ]
    },
    {
        "id": "1ba62f03edd0c67b",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Read file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2820,
        "wires": []
    },
    {
        "id": "e9f969682be26528",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1800,
        "y": 2940,
        "wires": [
            [
                "3579e20f8a40fde0"
            ]
        ]
    },
    {
        "id": "59a072a71c2d9dcb",
        "type": "fs-file-lister",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 2280,
        "y": 2880,
        "wires": [
            [
                "3015b01d2ed3f726",
                "0116d326e887e56f"
            ]
        ],
        "info": "Looking for the Operator credentials csv"
    },
    {
        "id": "3015b01d2ed3f726",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "debug 392",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2840,
        "wires": []
    },
    {
        "id": "0116d326e887e56f",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2880,
        "wires": [
            [
                "b87b1f6bb83a4310"
            ],
            [
                "2f948fe2ca0b3d80"
            ]
        ]
    },
    {
        "id": "2f948fe2ca0b3d80",
        "type": "change",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Set Filename",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2590,
        "y": 2920,
        "wires": [
            [
                "9e9f393f3d4487d3"
            ]
        ]
    },
    {
        "id": "4b7c4b4c44f13096",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Set Payload",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 2860,
        "wires": [
            [
                "cbce752a13355643"
            ]
        ]
    },
    {
        "id": "9e9f393f3d4487d3",
        "type": "file in",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2760,
        "y": 2920,
        "wires": [
            [
                "6130ccb455d238cc"
            ]
        ]
    },
    {
        "id": "6130ccb455d238cc",
        "type": "csv",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2910,
        "y": 2920,
        "wires": [
            [
                "c5d74ac1446471a1",
                "e9dd697d23038cdf"
            ]
        ]
    },
    {
        "id": "c5d74ac1446471a1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Set write -> HMI CSV",
        "func": "\nmsg.data.usernames = [];\nmsg.data.passwords = [];\n\nlet count = 1;\nlet output = [];\n\n//Set: The credential character limit\nlet credCharLimit = 40;\n\nfor (let i = 0; i < msg.payload.length; i++) { // Grab the user name and passwords\n    msg.data.usernames.push(isNaN(msg.payload[i].username) ? msg.payload[i].username.substring(0, credCharLimit) : msg.payload[i].username.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be username\n    msg.data.passwords.push(msg.payload[i].password.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be password\n}\n\n//\nlet operatorCount = msg.data.usernames.length;\nfor (var i = 0; i < operatorCount; i++) {\n    output.push(\n        [msg.data.usernames[i], 2, 2, , ,],\n        [8, 10, 0, 0, ,],\n        [8, 10, 0, 0, ,],\n        [1, msg.data.usernames[i], msg.data.passwords[i], , ,],\n        [2, , , , ,],\n        [, , , , ,]\n    )\n}\n\nlet text = \"\";\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    if (output[i][0] == undefined) {\n        text += \"\\r\\n\";\n    } else {\n        text += output[i].toString() + \"\\r\\n\";\n    }\n}\n//text += '\\r\\n';\n\n//Setting up config for write file node\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; // This should be defined in 'Config FL Set Par' node\nmsg.payload = msg.data.text + text;\n\nmsg.check = {\n    usernames: msg.data.usernames,\n    passwords: msg.data.passwords,\n    output: output,\n    text: text\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 2920,
        "wires": [
            [
                "082811891e488f44",
                "0fe3f1f9cf50b21c"
            ]
        ]
    },
    {
        "id": "e9dd697d23038cdf",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "CSV output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3090,
        "y": 2880,
        "wires": []
    },
    {
        "id": "082811891e488f44",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Write Recipe Initial Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 2880,
        "wires": []
    },
    {
        "id": "0fe3f1f9cf50b21c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "Config write",
        "func": "msg.filename = flow.get('HMIcsvLocation') + flow.get('HMIrecipeName')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 2920,
        "wires": [
            [
                "b7c2a94e5e145d0d"
            ]
        ]
    },
    {
        "id": "b7c2a94e5e145d0d",
        "type": "file",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 3480,
        "y": 2920,
        "wires": [
            [
                "5521e611282f4d02",
                "b81fdfd72a63143f"
            ]
        ]
    },
    {
        "id": "5521e611282f4d02",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "debug 411",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3670,
        "y": 2880,
        "wires": []
    },
    {
        "id": "b81fdfd72a63143f",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "HMI CSV write out",
        "mode": "link",
        "links": [
            "7d4c46dda06587b6"
        ],
        "x": 3605,
        "y": 2940,
        "wires": []
    },
    {
        "id": "a7c25ba0988c600c",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "name": "Load to PLC",
        "info": "",
        "x": 2750,
        "y": 1900,
        "wires": []
    },
    {
        "id": "7d4c46dda06587b6",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "name": "Download to Machines in",
        "links": [
            "b81fdfd72a63143f"
        ],
        "x": 2695,
        "y": 2000,
        "wires": [
            [
                "904a6ab362f8ad75"
            ]
        ]
    },
    {
        "id": "8d3d7dec6e438c45",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 289",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1960,
        "wires": []
    },
    {
        "id": "75a39c7bf2fe0149",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machineID = 'local'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2000,
        "wires": [
            [
                "a195d72a92186702",
                "325a493c06722a4c"
            ]
        ],
        "l": false
    },
    {
        "id": "384250d022c9fce9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA1'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2100,
        "wires": [
            [
                "32adf5a4bdc10f61"
            ]
        ],
        "l": false
    },
    {
        "id": "8193f6bb5d26b334",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA2'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2180,
        "wires": [
            [
                "11c1756362f635c1"
            ]
        ],
        "l": false
    },
    {
        "id": "734ce32a5c1f6d5e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA3'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2260,
        "wires": [
            [
                "06dbb9c493411cd6"
            ]
        ],
        "l": false
    },
    {
        "id": "a271092649362d2a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA4'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2340,
        "wires": [
            [
                "c146683a0acdb1f0"
            ]
        ],
        "l": false
    },
    {
        "id": "9a9160eb5e802aa9",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2760,
        "y": 2120,
        "wires": [
            [
                "75a39c7bf2fe0149"
            ]
        ]
    },
    {
        "id": "a195d72a92186702",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machineID: msg.machineID\n    }\n},\nmsgBottom = {\n    comTest: {\n        position: 'bottom',\n        _msgid: msg._msgid,\n        machineID: msg.machineID\n    }\n}\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2000,
        "wires": [
            [
                "9f39fdc8a85e7570",
                "3271aaf3b3db6a0b"
            ],
            [
                "d7a650e53ae58a3d"
            ]
        ]
    },
    {
        "id": "325a493c06722a4c",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 417",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 1880,
        "wires": []
    },
    {
        "id": "32adf5a4bdc10f61",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2100,
        "wires": [
            [
                "442d6bf580d6c736",
                "fe17d97052bb31de"
            ],
            [
                "23ae177bd08ba7bc"
            ]
        ]
    },
    {
        "id": "11c1756362f635c1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2180,
        "wires": [
            [
                "43d9e8bc9b09f55b",
                "22e568250ac33374"
            ],
            [
                "edab912191bbf980"
            ]
        ]
    },
    {
        "id": "06dbb9c493411cd6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2260,
        "wires": [
            [
                "2dbf9feaf7fd76ce",
                "19fdaf6b7b5fd447"
            ],
            [
                "4edb97d935a44318"
            ]
        ]
    },
    {
        "id": "c146683a0acdb1f0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2340,
        "wires": [
            [
                "7587247fd8856022",
                "8bc02c6c90be28ba"
            ],
            [
                "9140e8e92516ee75"
            ]
        ]
    },
    {
        "id": "9f39fdc8a85e7570",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 1960,
        "wires": [
            [
                "3271aaf3b3db6a0b"
            ]
        ]
    },
    {
        "id": "d7a650e53ae58a3d",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "05bf051581f2da76",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3220,
        "y": 2020,
        "wires": [
            [
                "7dff2e757238b19c"
            ]
        ]
    },
    {
        "id": "442d6bf580d6c736",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2060,
        "wires": [
            [
                "fe17d97052bb31de"
            ]
        ]
    },
    {
        "id": "23ae177bd08ba7bc",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "cba284f995b6a9ad",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2100,
        "wires": [
            [
                "f44af2c7236c682f",
                "fe17d97052bb31de"
            ]
        ]
    },
    {
        "id": "43d9e8bc9b09f55b",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2140,
        "wires": [
            [
                "22e568250ac33374"
            ]
        ]
    },
    {
        "id": "edab912191bbf980",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "22ef728605d3719a",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2180,
        "wires": [
            [
                "1f90d5bfb05e94fe",
                "22e568250ac33374"
            ]
        ]
    },
    {
        "id": "2dbf9feaf7fd76ce",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2220,
        "wires": [
            [
                "19fdaf6b7b5fd447"
            ]
        ]
    },
    {
        "id": "4edb97d935a44318",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2260,
        "wires": [
            [
                "c47fc27b664e089a",
                "19fdaf6b7b5fd447"
            ]
        ]
    },
    {
        "id": "7587247fd8856022",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2300,
        "wires": [
            [
                "8bc02c6c90be28ba"
            ]
        ]
    },
    {
        "id": "9140e8e92516ee75",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "40dd813a15fb0880",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2340,
        "wires": [
            [
                "c9d9ead5e439c368",
                "8bc02c6c90be28ba"
            ]
        ]
    },
    {
        "id": "7dff2e757238b19c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 2020,
        "wires": [
            [
                "a058d70eb0f3cee4"
            ]
        ]
    },
    {
        "id": "5e743c9378ab4e8f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop, ] \n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [ ,msgBottom] \n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1960,
        "wires": [
            [
                "a6e3bd4adfe86be8"
            ],
            [
                "70dc12e59dc0c1aa",
                "db6f3a720d2c3980"
            ]
        ]
    },
    {
        "id": "69099f45a66cec7a",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 413",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3460,
        "y": 1900,
        "wires": []
    },
    {
        "id": "8e0ae5cafca22e0e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2060,
        "wires": [
            [],
            [
                "6f2538f5d92db72d"
            ]
        ]
    },
    {
        "id": "f44af2c7236c682f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2100,
        "wires": [
            [
                "f973a685873dca17"
            ]
        ]
    },
    {
        "id": "751a7b8fae6e59e7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2140,
        "wires": [
            [],
            [
                "44de6da601d6e776"
            ]
        ]
    },
    {
        "id": "1f90d5bfb05e94fe",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2180,
        "wires": [
            [
                "fad1dd81db35b5c2"
            ]
        ]
    },
    {
        "id": "81c43c76810bdf0e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2220,
        "wires": [
            [],
            [
                "7b74c871b6fe896e"
            ]
        ]
    },
    {
        "id": "c47fc27b664e089a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2260,
        "wires": [
            [
                "4f6916055726e3aa"
            ]
        ]
    },
    {
        "id": "d530e54467362e46",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2300,
        "wires": [
            [],
            [
                "8c0b3c2f05653b3b"
            ]
        ]
    },
    {
        "id": "c9d9ead5e439c368",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2340,
        "wires": [
            [
                "19846fc859ded1b3"
            ]
        ]
    },
    {
        "id": "a058d70eb0f3cee4",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3560,
        "y": 2020,
        "wires": [
            [
                "85a62feae21f0941"
            ]
        ]
    },
    {
        "id": "70dc12e59dc0c1aa",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 414",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3690,
        "y": 1920,
        "wires": []
    },
    {
        "id": "a6e3bd4adfe86be8",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 415",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3690,
        "y": 1880,
        "wires": []
    },
    {
        "id": "db6f3a720d2c3980",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "6f2538f5d92db72d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "f973a685873dca17",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2100,
        "wires": [
            [
                "31692cd4a0262160"
            ]
        ]
    },
    {
        "id": "44de6da601d6e776",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "fad1dd81db35b5c2",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2180,
        "wires": [
            [
                "30066b233988da26"
            ]
        ]
    },
    {
        "id": "7b74c871b6fe896e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6916055726e3aa",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2260,
        "wires": [
            [
                "8ca67f9f9972d141"
            ]
        ]
    },
    {
        "id": "8c0b3c2f05653b3b",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "19846fc859ded1b3",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2340,
        "wires": [
            [
                "0d76d1f921d6dd72"
            ]
        ]
    },
    {
        "id": "85a62feae21f0941",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "aca8e25181d21be7",
        "emptyMsgOnFail": true,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3730,
        "y": 2020,
        "wires": [
            [
                "e23e73677561d93d"
            ],
            [
                "e23e73677561d93d"
            ]
        ]
    },
    {
        "id": "31692cd4a0262160",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2100,
        "wires": [
            [],
            [
                "74779d0df039f16f"
            ]
        ]
    },
    {
        "id": "30066b233988da26",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2180,
        "wires": [
            [],
            [
                "d17b9e951585ae94"
            ]
        ]
    },
    {
        "id": "8ca67f9f9972d141",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2260,
        "wires": [
            [],
            [
                "885f7acd70986807"
            ]
        ]
    },
    {
        "id": "0d76d1f921d6dd72",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "4f042df482363103",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2340,
        "wires": [
            [],
            [
                "545889b7fb8c720a"
            ]
        ]
    },
    {
        "id": "e23e73677561d93d",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 247",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3920,
        "y": 2020,
        "wires": []
    },
    {
        "id": "74779d0df039f16f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 374",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2060,
        "wires": []
    },
    {
        "id": "d17b9e951585ae94",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 376",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2140,
        "wires": []
    },
    {
        "id": "885f7acd70986807",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 378",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2220,
        "wires": []
    },
    {
        "id": "545889b7fb8c720a",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 416",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2300,
        "wires": []
    },
    {
        "id": "198d23f934462b99",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "e3aa9ce8b9e41a04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Parameters 1 - 10",
        "payloadType": "str",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "378c6296225c8dad"
            ]
        ]
    },
    {
        "id": "958bc3653453de5a",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 1040,
        "wires": [
            [
                "fbc4b6a6219129d1"
            ]
        ]
    },
    {
        "id": "fbc4b6a6219129d1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "function 50",
        "func": "let count = context.get('count') || 0;\nmsg.messageId = count\ncontext.set('count', count + 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 1040,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "570dcf2c31262f58",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 1100,
        "wires": [
            [
                "fbc4b6a6219129d1"
            ]
        ]
    },
    {
        "id": "ef89646cdf17db8f",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "862fab04f4d863e2",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e1373bf4b21019ce",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 220,
        "wires": [
            [
                "65211202e594f24b",
                "ef89646cdf17db8f"
            ]
        ]
    },
    {
        "id": "b5e49bcece484491",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 140,
        "wires": [
            [
                "e0cc668cda4bd2c7",
                "b46b4179faab8064",
                "f870e367d01744e5",
                "e1373bf4b21019ce"
            ]
        ]
    },
    {
        "id": "65211202e594f24b",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 260,
        "wires": []
    },
    {
        "id": "4c394628a990de99",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set delay",
        "func": "msg.delay = 5000 // total delayable time\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 80,
        "wires": [
            [
                "b5e49bcece484491",
                "7421b31d841b3ef3",
                "b7b07462dc60a603",
                "0ecda1ce5dacf1d4",
                "e64cf2f8a22ccf8a",
                "7a13649eaa9686bb",
                "7aedcb92cf796177",
                "b5528597a78285e2",
                "4b84c96491bb0643"
            ]
        ]
    },
    {
        "id": "03138ba1a370e10d",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Local",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "862fab04f4d863e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 140,
        "wires": [
            [
                "b5e49bcece484491"
            ],
            []
        ]
    },
    {
        "id": "e0cc668cda4bd2c7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 180,
        "wires": [
            [
                "bbcb7f0d2d0c6594"
            ]
        ]
    },
    {
        "id": "b46b4179faab8064",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 140,
        "wires": [
            [
                "e07697f2708e0850"
            ]
        ]
    },
    {
        "id": "f5aee22768c67b8f",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 80,
        "wires": [
            [
                "4c394628a990de99"
            ]
        ]
    },
    {
        "id": "852cbf3ea8b79043",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Strip msg",
        "func": "delete msg.delay\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 140,
        "wires": [
            [
                "03138ba1a370e10d",
                "7e905ef5ee74e7fa",
                "0925dacc23e730c5",
                "542ed3b87117a8cd",
                "7d0452acff5fcf97",
                "38abd8c139eae07e",
                "e844bd21f6cb0f56",
                "e959135622ae5489",
                "b995c5751cabce18"
            ]
        ]
    },
    {
        "id": "bbcb7f0d2d0c6594",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 180,
        "wires": []
    },
    {
        "id": "e07697f2708e0850",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "d": true,
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Local PLC",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 140,
        "wires": []
    },
    {
        "id": "164d4dc9f9f535c1",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Looking",
        "func": "//msg.delay = flow.get('parameters').watchdog.plcTimer * 1000\nmsg.delay = 3000 // Delay is 3 seconds\nmsg.payload = \"SELECT 1\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 140,
        "wires": [
            [
                "56eeb6e508b3f05a",
                "852cbf3ea8b79043"
            ]
        ]
    },
    {
        "id": "bee524873fb60211",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "d": true,
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56eeb6e508b3f05a",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Var Delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 200,
        "wires": [
            [
                "164d4dc9f9f535c1"
            ]
        ]
    },
    {
        "id": "391814ff56b6f995",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "164d4dc9f9f535c1"
            ]
        ]
    },
    {
        "id": "9670b34f08631485",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "ec998e1eb45fe4eb",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1869c832bb77d249",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 400,
        "wires": [
            [
                "5686858dec2de450",
                "9670b34f08631485"
            ]
        ]
    },
    {
        "id": "7421b31d841b3ef3",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 320,
        "wires": [
            [
                "9732177351fee69c",
                "d6548007ea7a5ca5",
                "f956c8769718c6f0",
                "1869c832bb77d249"
            ]
        ]
    },
    {
        "id": "5686858dec2de450",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 440,
        "wires": []
    },
    {
        "id": "7e905ef5ee74e7fa",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 320,
        "wires": [
            [
                "7421b31d841b3ef3"
            ],
            []
        ]
    },
    {
        "id": "9732177351fee69c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 360,
        "wires": [
            [
                "3ebe78440e5650fd"
            ]
        ]
    },
    {
        "id": "d6548007ea7a5ca5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 320,
        "wires": [
            [
                "c1f3c08dc24119d6"
            ]
        ]
    },
    {
        "id": "3ebe78440e5650fd",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 360,
        "wires": []
    },
    {
        "id": "c1f3c08dc24119d6",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 1",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 320,
        "wires": []
    },
    {
        "id": "2640a23a54475d27",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8c3bf8e16b11a468",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "da9fe7a69397cf03",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "df133577eb8b0df4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 580,
        "wires": [
            [
                "47d4f598bbe8379a",
                "8c3bf8e16b11a468"
            ]
        ]
    },
    {
        "id": "b7b07462dc60a603",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 500,
        "wires": [
            [
                "7d05bcf78fddd286",
                "4c1f531c1dda05f6",
                "a2cab59124d765bb",
                "df133577eb8b0df4"
            ]
        ]
    },
    {
        "id": "47d4f598bbe8379a",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 620,
        "wires": []
    },
    {
        "id": "0925dacc23e730c5",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 500,
        "wires": [
            [
                "b7b07462dc60a603"
            ],
            []
        ]
    },
    {
        "id": "7d05bcf78fddd286",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 540,
        "wires": [
            [
                "d3cedb2d4b78eebf"
            ]
        ]
    },
    {
        "id": "4c1f531c1dda05f6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 500,
        "wires": [
            [
                "9de2189ba53f71b0"
            ]
        ]
    },
    {
        "id": "d3cedb2d4b78eebf",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 540,
        "wires": []
    },
    {
        "id": "9de2189ba53f71b0",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 500,
        "wires": []
    },
    {
        "id": "c9a3415a2ec1a426",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "caede8e9eb89a745",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "5d0e1198b746388a",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "7f1fc77f88b4c17a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 760,
        "wires": [
            [
                "225034760a5d3b02",
                "caede8e9eb89a745"
            ]
        ]
    },
    {
        "id": "0ecda1ce5dacf1d4",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 680,
        "wires": [
            [
                "61b223c904ae15d6",
                "664a8bd0b5cbccb6",
                "5484b10184157a76",
                "7f1fc77f88b4c17a"
            ]
        ]
    },
    {
        "id": "225034760a5d3b02",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 800,
        "wires": []
    },
    {
        "id": "542ed3b87117a8cd",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 680,
        "wires": [
            [
                "0ecda1ce5dacf1d4"
            ],
            []
        ]
    },
    {
        "id": "61b223c904ae15d6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 720,
        "wires": [
            [
                "19dbf7ca099e49f1"
            ]
        ]
    },
    {
        "id": "664a8bd0b5cbccb6",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 680,
        "wires": [
            [
                "aa8ac766f5613f75"
            ]
        ]
    },
    {
        "id": "19dbf7ca099e49f1",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 720,
        "wires": []
    },
    {
        "id": "aa8ac766f5613f75",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 3",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 680,
        "wires": []
    },
    {
        "id": "b20058257fe51d8f",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d51b0d378605a432",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "4f042df482363103",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "db2164758971c32f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 940,
        "wires": [
            [
                "d3f17ed181a96031",
                "d51b0d378605a432"
            ]
        ]
    },
    {
        "id": "e64cf2f8a22ccf8a",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 860,
        "wires": [
            [
                "2dab9c0efae67e44",
                "d422d42a3427d2a4",
                "81a0c78fe7572752",
                "db2164758971c32f"
            ]
        ]
    },
    {
        "id": "d3f17ed181a96031",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 980,
        "wires": []
    },
    {
        "id": "7d0452acff5fcf97",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 860,
        "wires": [
            [
                "e64cf2f8a22ccf8a"
            ],
            []
        ]
    },
    {
        "id": "2dab9c0efae67e44",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 900,
        "wires": [
            [
                "c0b404faca69dbbc"
            ]
        ]
    },
    {
        "id": "d422d42a3427d2a4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 860,
        "wires": [
            [
                "2f89e3d6fe71d2d7"
            ]
        ]
    },
    {
        "id": "c0b404faca69dbbc",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 900,
        "wires": []
    },
    {
        "id": "2f89e3d6fe71d2d7",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 4",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 860,
        "wires": []
    },
    {
        "id": "442dee010b96414f",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "19e194d03186abe6",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "ATEKA T1 in",
        "links": [
            "fa28c85ae5389691"
        ],
        "x": 225,
        "y": 2940,
        "wires": [
            [
                "afe3ec8186270ff5"
            ]
        ]
    },
    {
        "id": "dcebfacc6a50241e",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "g": "eb76455ade74569f",
        "name": "TESTING",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2940,
        "wires": []
    },
    {
        "id": "4d97256b81ea5d71",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "name": "Dashboard login",
        "info": "",
        "x": 3140,
        "y": 3160,
        "wires": []
    },
    {
        "id": "9ec55fa2fbda9f0a",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "Autoload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3160,
        "y": 3540,
        "wires": [
            [
                "43ed187d88352ccc"
            ]
        ]
    },
    {
        "id": "43ed187d88352ccc",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Config FL",
        "func": "msg.payload = {\n    \"start\": flow.get('dashboardCredentialsLocation'),\n    \"pattern\": flow.get('dashboardCredentialsName')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3340,
        "y": 3540,
        "wires": [
            [
                "17045099558f1cc4"
            ]
        ]
    },
    {
        "id": "17045099558f1cc4",
        "type": "fs-file-lister",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 3500,
        "y": 3540,
        "wires": [
            [
                "703bca2ed96a963c"
            ]
        ]
    },
    {
        "id": "703bca2ed96a963c",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3650,
        "y": 3540,
        "wires": [
            [
                "c6f978c010797a85"
            ],
            [
                "ee819b6e408a323e"
            ]
        ]
    },
    {
        "id": "c6f978c010797a85",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Error",
        "func": "msg.payload = \"The Credential data cannot be found, please contact admin.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3790,
        "y": 3500,
        "wires": [
            [
                "c54b9f962880af80"
            ]
        ]
    },
    {
        "id": "c54b9f962880af80",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3950,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "ee819b6e408a323e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Config Read File",
        "func": "msg.filename = flow.get('dashboardCredentialsLocation') + flow.get('dashboardCredentialsName');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 3540,
        "wires": [
            [
                "881debac28ce0d1c"
            ]
        ]
    },
    {
        "id": "881debac28ce0d1c",
        "type": "file in",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 4020,
        "y": 3540,
        "wires": [
            [
                "8c5c4f6fba27988a"
            ]
        ]
    },
    {
        "id": "8c5c4f6fba27988a",
        "type": "csv",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4170,
        "y": 3540,
        "wires": [
            [
                "37935ee26551b59c"
            ]
        ]
    },
    {
        "id": "37935ee26551b59c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Par from Data",
        "func": "/*\n    The headers for the columns of the dashboardCredentials\n    are hard coded.\n*/\nlet length = msg.payload.length,\n    usernames = [],\n    passwords = [],\n    userLevel = [],\n    credentialData = {};\nif (length <= 1) {\n    //The file is incorrectly set up\n    // Dev error handling\n} else {\n    for (let i = 0; i < length; i++) {\n        usernames.push(msg.payload[i].Username.toString());\n        passwords.push(msg.payload[i].Password.toString());\n        userLevel.push(msg.payload[i].Level);\n    }\n    //Set up the flows\n    credentialData = {\n        usernames: usernames,\n        passwords: passwords,\n        userLevel: userLevel\n    }\n    flow.set('credentialData', credentialData);\n    //checks\n    msg.check = {\n        credentialData: credentialData\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4340,
        "y": 3540,
        "wires": [
            []
        ]
    },
    {
        "id": "b7d670f1be6808ab",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "group": "18ea443589aff38f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "(Settings) Login Text",
        "label": "",
        "format": "To log in as a Guest press LOGIN while all fields are empty.",
        "layout": "row-left",
        "className": "",
        "x": 4240,
        "y": 3480,
        "wires": []
    },
    {
        "id": "ae25d314d7e54019",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "group": "494580998616b55b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Referral login msg (Recipe)",
        "label": "",
        "format": "Please sign in using the \"Settings\" tab.",
        "layout": "row-spread",
        "className": "",
        "x": 4260,
        "y": 3400,
        "wires": []
    },
    {
        "id": "07e015a9424fcb79",
        "type": "ui_form",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "label": "Dashboard Login",
        "group": "18ea443589aff38f",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "Clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 3170,
        "y": 3400,
        "wires": [
            [
                "78f2b9bab1f25ec0"
            ]
        ]
    },
    {
        "id": "78f2b9bab1f25ec0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Check credentials",
        "func": "let credentialData = flow.get('credentialData');\nlet usernameIndex = credentialData.usernames.indexOf(msg.payload.Username);\nif (msg.payload.Username == \"\" && msg.payload.Password == \"\") { //Case when the credentials are empty, logging in Guest\n    msg = {\n        userInfo: {\n            username: \"Guest\",\n            userLevel: 'Guest'\n        }\n    }\n    return [msg,];\n} else if (usernameIndex !== -1) { // Username exists\n    if (credentialData.passwords[usernameIndex] == msg.payload.Password ) { //Password matches\n        let userLevel = 'Error';\n        switch (credentialData.userLevel[usernameIndex]) {\n            case 1:\n                userLevel = 'Guest'\n                flow.set('userLevel', 'guest');\n                break;\n            case 2:\n                userLevel = 'Operator'\n                flow.set('userLevel', 'operator')\n                break;\n            case 3:\n                userLevel = 'Admin'\n                flow.set('userLevel', 'admin')\n                break;\n        }\n        msg = {\n            userInfo: {\n                username: credentialData.usernames[usernameIndex],\n                userLevel: userLevel,\n            }\n        }\n        return [msg, ];\n    }else {\n        msg.payload = 'Either the username or password are incorrect';\n        return [ ,msg];\n    }\n} else {\n     if (msg.payload.Username == \"dev\" && msg.payload.Password == \"Peanut\") { // Hard coded access for dev\n        msg = {\n            userInfo: {\n                username: 'Developer',\n                userLevel: 'Admin',\n            }\n        }\n        return [msg,];\n    } else {\n         msg.payload = 'Either the username or password are incorrect';\n         return [, msg];\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 3400,
        "wires": [
            [
                "cd7d687aed4d1295",
                "ef11eb710c3c7d22"
            ],
            [
                "53b17e6ea06afca5"
            ]
        ]
    },
    {
        "id": "cd7d687aed4d1295",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ui control",
        "func": "let msg1 = {};\n\n//Show the normal page\nif (msg.topic == 'logout') {\n    msg.payload = {\n        \"group\": {\n            \"hide\": [\n                \"Recipes_Parameter_Names_11_-_20\",\n                \"Recipes_Parameter_Values_11_-_20\",\n                \"Recipes_Parameter_Instructions_11_-_20\",\n                \"Recipes_Stop_On_Fail_11_-_20\",\n                \"Recipes_Parameter_Names_21_-_30\",\n                \"Recipes_Parameter_Values_21_-_30\",\n                \"Recipes_Parameter_Instructions_21_-_30\",\n                \"Recipes_Parameter_Names_1_-_10\",\n                \"Recipes_Parameter_Values_1_-_10\",\n                \"Recipes_Parameter_Instructions_1_-_10\",\n                \"Recipes_Stop_On_Fail_1_-_10\",\n                \"Recipes_Test_Name\",\n                \"Recipes_Basic_Tests\",\n                \"Settings_Registration\",\n                \"Settings_Update_Password\",\n                \"Settings_User_database\",\n                \"Settings_Insufficient_Rights\",\n                \"Settings_Delete\",\n                \"Testers_Communication_status\"\n            ],\n            \"show\": [\n                \"Recipes_Login\",\n                \"Settings_Login\"\n            ]\n        }\n    }\n} else if ('userInfo' in msg) { // If user is being logged in\n    if (msg.userInfo.userLevel == 'Operator') {\n        msg.payload = {\n            \"group\": {\n                \"hide\": [\n                    \"Recipes_Parameter_Names_11_-_20\",\n                    \"Recipes_Parameter_Values_11_-_20\",\n                    \"Recipes_Parameter_Instructions_11_-_20\",\n                    \"Recipes_Stop_On_Fail_11_-_20\",\n                    \"Recipes_Parameter_Names_21_-_30\",\n                    \"Recipes_Parameter_Values_21_-_30\",\n                    \"Recipes_Parameter_Instructions_21_-_30\",\n                    \"Recipes_Login\",\n                    \"Settings_Login\"\n                ],\n                \"show\": [\n                    \"Recipes_Parameter_Names_1_-_10\",\n                    \"Recipes_Parameter_Values_1_-_10\",\n                    \"Recipes_Parameter_Instructions_1_-_10\",\n                    \"Recipes_Stop_On_Fail_1_-_10\",\n                    \"Recipes_Test_Name\",\n                    \"Recipes_Basic_Tests\",\n                    \"Settings_Insufficient_Rights\",\n                    \"Testers_Communication_status\"\n                ]\n            }\n        };\n    } else if (msg.userInfo.userLevel == 'Admin') {\n        msg.payload = {\n            \"group\": {\n                \"hide\": [\n                    \"Recipes_Parameter_Names_11_-_20\",\n                    \"Recipes_Parameter_Values_11_-_20\",\n                    \"Recipes_Parameter_Instructions_11_-_20\",\n                    \"Recipes_Stop_On_Fail_11_-_20\",\n                    \"Recipes_Parameter_Names_21_-_30\",\n                    \"Recipes_Parameter_Values_21_-_30\",\n                    \"Recipes_Parameter_Instructions_21_-_30\",\n                    \"Recipes_Login\",\n                    \"Settings_Login\",\n                    \"Settings_Insufficient_Rights\"\n                ],\n                \"show\": [\n                    \"Recipes_Parameter_Names_1_-_10\",\n                    \"Recipes_Parameter_Values_1_-_10\",\n                    \"Recipes_Parameter_Instructions_1_-_10\",\n                    \"Recipes_Stop_On_Fail_1_-_10\",\n                    \"Recipes_Test_Name\",\n                    \"Recipes_Basic_Tests\",\n                    \"Settings_Registration\",\n                    \"Settings_Update_Password\",\n                    \"Settings_User_database\",\n                    \"Settings_Delete\",\n                    \"Testers_Communication_status\"\n                ]\n            }\n        };\n    }\n\n    // Set system logged in variables\n    let dashboardInfo = global.get('dashboardInfo') || {}\n    dashboardInfo.user = {\n        username: msg.userInfo.username,\n        userLevel: msg.userInfo.userLevel\n    }\n    global.set('dashboardInfo', dashboardInfo)\n/*\n    // Write to dashboard and write dashboard login event using\n    msg1 = {\n        payload: msg.userInfo.username,\n        level: msg.userInfo.userLevel,\n        dashboardInfo: {\n            username:   global.get('dashboardInfo').userInfo.username,\n            userLevel:  global.get('dashboardInfo').userInfo.userLevel,\n            event:      'Logged in',\n            changed:    'Nothing',\n            current:    '',\n            previous:   '',\n            timestamp:  new Date().toISOString\n        }\n    }*/\n}\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 3380,
        "wires": [
            [
                "7d6ad27c5d534fa8",
                "d75f43d52a70b6d5",
                "8d9ec08ea406741d"
            ],
            [
                "fb8a82a779e17bcb"
            ]
        ]
    },
    {
        "id": "53b17e6ea06afca5",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3590,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "7d6ad27c5d534fa8",
        "type": "ui_ui_control",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "events": "all",
        "x": 3740,
        "y": 3340,
        "wires": [
            []
        ]
    },
    {
        "id": "fb8a82a779e17bcb",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "group": "0465010f96f3dad5",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "(Recipe) [main header]",
        "label": "{{msg.level}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 3780,
        "y": 3400,
        "wires": []
    },
    {
        "id": "59d649b5eea840a0",
        "type": "ui_button",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "LOGOUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear logout",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "logout",
        "topicType": "str",
        "x": 3320,
        "y": 3360,
        "wires": [
            [
                "e3c44730f87df273"
            ]
        ]
    },
    {
        "id": "236c22d379da2d32",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "group": "d343b6541bd84142",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Insufficient rights (Settings)",
        "label": "",
        "format": "Insufficient rights to access.",
        "layout": "row-spread",
        "className": "",
        "x": 4260,
        "y": 3440,
        "wires": []
    },
    {
        "id": "4da074b02b4def1e",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "name": "Read dashboardCredentials.csv",
        "info": "",
        "x": 3290,
        "y": 3480,
        "wires": []
    },
    {
        "id": "ac5da62c113d4e55",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "Logout",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "logout",
        "payload": "",
        "payloadType": "date",
        "x": 3320,
        "y": 3320,
        "wires": [
            [
                "e3c44730f87df273"
            ]
        ]
    },
    {
        "id": "cd73a01571251555",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "40013950c3567b56",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "296afe7ee31efbfb",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1120,
        "wires": [
            [
                "8f26e2c70ad1df61",
                "cd73a01571251555"
            ]
        ]
    },
    {
        "id": "7a13649eaa9686bb",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 1040,
        "wires": [
            [
                "6b51f9861ed1b365",
                "53956d56e21afc2e",
                "96b25e88186eedaf",
                "296afe7ee31efbfb"
            ]
        ]
    },
    {
        "id": "8f26e2c70ad1df61",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 1160,
        "wires": []
    },
    {
        "id": "38abd8c139eae07e",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 1040,
        "wires": [
            [
                "7a13649eaa9686bb"
            ],
            []
        ]
    },
    {
        "id": "6b51f9861ed1b365",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1080,
        "wires": [
            [
                "95ef48661e088918"
            ]
        ]
    },
    {
        "id": "53956d56e21afc2e",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1040,
        "wires": [
            [
                "e94b21bdbf53dc21"
            ]
        ]
    },
    {
        "id": "95ef48661e088918",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 1080,
        "wires": []
    },
    {
        "id": "e94b21bdbf53dc21",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 5",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fc47e6b6c26bba0a",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9baa1f973eb7bcc4",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "d91a9c96d93230a8",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "4fba1e590f448289",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1300,
        "wires": [
            [
                "7c3e7cc11899466f",
                "9baa1f973eb7bcc4"
            ]
        ]
    },
    {
        "id": "7aedcb92cf796177",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 1220,
        "wires": [
            [
                "f00a011d83e715f2",
                "c6650c07f9e33fee",
                "a5a53be4d4b17c5a",
                "4fba1e590f448289"
            ]
        ]
    },
    {
        "id": "7c3e7cc11899466f",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e844bd21f6cb0f56",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 1220,
        "wires": [
            [
                "7aedcb92cf796177"
            ],
            []
        ]
    },
    {
        "id": "f00a011d83e715f2",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1260,
        "wires": [
            [
                "ce3b41153e3066e5"
            ]
        ]
    },
    {
        "id": "c6650c07f9e33fee",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1220,
        "wires": [
            [
                "47c2245c41cc9d9b"
            ]
        ]
    },
    {
        "id": "ce3b41153e3066e5",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 1260,
        "wires": []
    },
    {
        "id": "47c2245c41cc9d9b",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 6",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 1220,
        "wires": []
    },
    {
        "id": "bc60979dd4136248",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "89264ffdddd96494",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "91ab9af69d6680b0",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "5322efdbb214d086",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1480,
        "wires": [
            [
                "b1da864349aeca1b",
                "89264ffdddd96494"
            ]
        ]
    },
    {
        "id": "b5528597a78285e2",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 1400,
        "wires": [
            [
                "0f7205035e13652f",
                "79718299f32559a7",
                "3b9be02ea2c4e1cc",
                "5322efdbb214d086"
            ]
        ]
    },
    {
        "id": "b1da864349aeca1b",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e959135622ae5489",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 1400,
        "wires": [
            [
                "b5528597a78285e2"
            ],
            []
        ]
    },
    {
        "id": "0f7205035e13652f",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1440,
        "wires": [
            [
                "e6b21b493b663f30"
            ]
        ]
    },
    {
        "id": "79718299f32559a7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1400,
        "wires": [
            [
                "fd951138bada8f7f"
            ]
        ]
    },
    {
        "id": "e6b21b493b663f30",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 1440,
        "wires": []
    },
    {
        "id": "fd951138bada8f7f",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 7",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 1400,
        "wires": []
    },
    {
        "id": "88c2febd25c05651",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "8325ba8c041e3ba5",
        "type": "modbus-queue-info",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "topic": "",
        "unitid": 1,
        "queueReadIntervalTime": 1000,
        "lowLowLevel": 25,
        "lowLevel": 75,
        "highLevel": 150,
        "highHighLevel": 300,
        "server": "75dbc07d8ec25bc4",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": false,
        "x": 2410,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "40be991252a76e78",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Re-Initiate",
        "func": "// Whatever disconnected probably needs the process to reinitialis\n// when it connects back up\nlet isFirstInstance = context.get('isFirstInstance')\nif (isFirstInstance === undefined) {\n    isFirstInstance = true\n    context.set('isFirstInstance', false)\n}\n\nif (isFirstInstance == false && msg.payload) {\n    msg.reInitiate = true\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1660,
        "wires": [
            [
                "a9ac061f679c84b5",
                "8325ba8c041e3ba5"
            ]
        ]
    },
    {
        "id": "4b84c96491bb0643",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Trigger",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2020,
        "y": 1580,
        "wires": [
            [
                "bb5c761b8ec850d4",
                "e8a671990a4dee02",
                "56d4bdecd43b20eb",
                "40be991252a76e78"
            ]
        ]
    },
    {
        "id": "a9ac061f679c84b5",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity Re-Initiate out",
        "mode": "link",
        "links": [
            "9bbc64c60e43c9b3",
            "d4dedf0c7cc2f9a5",
            "d8ef7cca502f272d"
        ],
        "x": 2355,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b995c5751cabce18",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Ping Ateka 8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1850,
        "y": 1580,
        "wires": [
            [
                "4b84c96491bb0643"
            ],
            []
        ]
    },
    {
        "id": "bb5c761b8ec850d4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard notification",
        "func": "if (msg.payload) {\n    msg.payload = 'PLC connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1620,
        "wires": [
            [
                "f5e773b32fbd591c"
            ]
        ]
    },
    {
        "id": "e8a671990a4dee02",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "Set Dashboard msg",
        "func": "if (msg.payload) {\n    msg.payload = 'Connected'\n} else {\n    msg.payload = 'PLC disconnected'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1580,
        "wires": [
            [
                "0ffd01ed3a3e0e90"
            ]
        ]
    },
    {
        "id": "f5e773b32fbd591c",
        "type": "link out",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "PLC Connectivity DB Noti out",
        "mode": "link",
        "links": [
            "7ca68671b7339fe7"
        ],
        "x": 2445,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0ffd01ed3a3e0e90",
        "type": "ui_text",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "group": "8ea8176a04b0b27a",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "PLC: Ateka 8",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2430,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1eef91e3c32b8fb8",
        "type": "ui_switch",
        "z": "18a7ffc09fc6eb29",
        "g": "a59b805b8c8f97f5",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8ea8176a04b0b27a",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-wifi",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "signal_wifi_off",
        "offcolor": "red",
        "animate": true,
        "className": "",
        "x": 2610,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "4cd97baa3c97ab62",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA4'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2420,
        "wires": [
            [
                "ce01541aced653c7"
            ]
        ],
        "l": false
    },
    {
        "id": "ce01541aced653c7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2420,
        "wires": [
            [
                "8e660d7d6828636e",
                "bdb92c4532060ca3"
            ],
            [
                "aad403d0af8154ee"
            ]
        ]
    },
    {
        "id": "8e660d7d6828636e",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2380,
        "wires": [
            [
                "bdb92c4532060ca3"
            ]
        ]
    },
    {
        "id": "aad403d0af8154ee",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "5c2d06e024f58a13",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2420,
        "wires": [
            [
                "d24b44d39368a066",
                "bdb92c4532060ca3"
            ]
        ]
    },
    {
        "id": "ea5e963d38729955",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2380,
        "wires": [
            [],
            [
                "9f0540e22cca6dc7"
            ]
        ]
    },
    {
        "id": "d24b44d39368a066",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2420,
        "wires": [
            [
                "7ea3608e9b663622"
            ]
        ]
    },
    {
        "id": "9f0540e22cca6dc7",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "7ea3608e9b663622",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2420,
        "wires": [
            [
                "700370b24ca21c96"
            ]
        ]
    },
    {
        "id": "700370b24ca21c96",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "40013950c3567b56",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2420,
        "wires": [
            [],
            [
                "9170bb94d8b48876"
            ]
        ]
    },
    {
        "id": "9170bb94d8b48876",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 428",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2380,
        "wires": []
    },
    {
        "id": "5f04a1db16451361",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA4'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2500,
        "wires": [
            [
                "71e087e3d19fbb4c"
            ]
        ],
        "l": false
    },
    {
        "id": "71e087e3d19fbb4c",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2500,
        "wires": [
            [
                "338911750223c85e",
                "c913988ae8fc2704"
            ],
            [
                "17e2d72d34e643e5"
            ]
        ]
    },
    {
        "id": "338911750223c85e",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2460,
        "wires": [
            [
                "c913988ae8fc2704"
            ]
        ]
    },
    {
        "id": "17e2d72d34e643e5",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "38eabdcc99274a70",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2500,
        "wires": [
            [
                "69abf898eef9d135",
                "c913988ae8fc2704"
            ]
        ]
    },
    {
        "id": "9eff1f2683d43462",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2460,
        "wires": [
            [],
            [
                "4cbf1b2a65493286"
            ]
        ]
    },
    {
        "id": "69abf898eef9d135",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2500,
        "wires": [
            [
                "c007e44c262a9737"
            ]
        ]
    },
    {
        "id": "4cbf1b2a65493286",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "c007e44c262a9737",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2500,
        "wires": [
            [
                "5c956a9897717689"
            ]
        ]
    },
    {
        "id": "5c956a9897717689",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "d91a9c96d93230a8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2500,
        "wires": [
            [],
            [
                "389f42641d27b47f"
            ]
        ]
    },
    {
        "id": "389f42641d27b47f",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 429",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2460,
        "wires": []
    },
    {
        "id": "0291d1f3b53dabdf",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA4'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2580,
        "wires": [
            [
                "969d3c31a30d78c2"
            ]
        ],
        "l": false
    },
    {
        "id": "969d3c31a30d78c2",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2580,
        "wires": [
            [
                "4ab83ddffc39b734",
                "ca67a02b2df70aae"
            ],
            [
                "a5730c1a6a7b62d1"
            ]
        ]
    },
    {
        "id": "4ab83ddffc39b734",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2540,
        "wires": [
            [
                "ca67a02b2df70aae"
            ]
        ]
    },
    {
        "id": "a5730c1a6a7b62d1",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "929f306b79852fb6",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2580,
        "wires": [
            [
                "c2f32d64b7ec9882",
                "ca67a02b2df70aae"
            ]
        ]
    },
    {
        "id": "78f550e2128d5e59",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2540,
        "wires": [
            [],
            [
                "310d579558cdfeed"
            ]
        ]
    },
    {
        "id": "c2f32d64b7ec9882",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2580,
        "wires": [
            [
                "890c32122471c97b"
            ]
        ]
    },
    {
        "id": "310d579558cdfeed",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "890c32122471c97b",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2580,
        "wires": [
            [
                "96f42805dba71741"
            ]
        ]
    },
    {
        "id": "96f42805dba71741",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "91ab9af69d6680b0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2580,
        "wires": [
            [],
            [
                "7209b1468767a521"
            ]
        ]
    },
    {
        "id": "7209b1468767a521",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 430",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2540,
        "wires": []
    },
    {
        "id": "30a9379a21e15798",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set Line",
        "func": "msg.machingID = 'ATEKA4'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2935,
        "y": 2660,
        "wires": [
            [
                "d216ff370f91e66a"
            ]
        ],
        "l": false
    },
    {
        "id": "d216ff370f91e66a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestBefore",
        "func": "msg.lineFlag == 'activityTest'\nlet msgTop = {\n    comTest: {\n        position: 'top',\n        _msgid: msg._msgid,\n        machingID: msg.machingID\n    }\n},\n    msgBottom = {\n        comTest: {\n            position: 'bottom',\n            _msgid: msg._msgid,\n            machingID: msg.machingID\n        }\n    }\nreturn [msgTop, msgBottom];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2660,
        "wires": [
            [
                "c0c24256da59c16a",
                "1092b21bd5aa3330"
            ],
            [
                "78267eb3f6e2bfef"
            ]
        ]
    },
    {
        "id": "c0c24256da59c16a",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3230,
        "y": 2620,
        "wires": [
            [
                "1092b21bd5aa3330"
            ]
        ]
    },
    {
        "id": "78267eb3f6e2bfef",
        "type": "ftp in",
        "z": "18a7ffc09fc6eb29",
        "ftp": "716bedc2c801b386",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3230,
        "y": 2660,
        "wires": [
            [
                "2d812dadd99ca0e9",
                "1092b21bd5aa3330"
            ]
        ]
    },
    {
        "id": "50d67038b55e3e81",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "ComTestAfter",
        "func": "//Set\nlet line1 = 'top',\n    line2 = 'bottom',\n    successMSG = 'Succesfully sent to ',\n    failedMSG = 'Could not send to ' + msg.comTest.machineID\n\n\nlet top = context.get(line1) || false,\n    bottom = context.get(line2) || false,\n    msgID = context.get('msgID') || msg._msgid,\n    /*\n    Error level:\n    0: on start up\n    1: communication normal\n    2: communication not caught in time\n    */\n    error = context.get('error') || 0\n\n//Make sure we compare messages of the same origin\nif (msgID != msg._msgid) {\n    context.set(line1, false)\n    context.set(line2, false)\n    context.set('error', 0)\n}\n//Error handling\nif (error == 1) {\n    if (msg.comTest.position == line1) {\n        context.set(line1, false)\n        context.set(line2, false)\n        context.set('error', 0);\n        return null\n    } else {\n        //The control is one bottom message and two top messages. The second top message has the delay\n        node.warn('We should not have gotten here')\n    }\n}\n\n//\nif (msg.comTest.position == line2 && top || msg.comTest.position == line1 && bottom) { //If the message comes through as normal\n    context.set('error', 1)\n    let msgTop = {\n        payload: successMSG\n    }\n    return [msgTop,]\n} else if (msg.comTest.position == line1 && top) { //Two top messages came through, bottom failed to come in time\n    let msgBottom = {\n        payload: failedMSG\n    }\n    return [, msgBottom]\n} else { //\n    if (msg.comTest.position == line1) {\n        context.set(line1, true)\n    } else if (msg.comTest.position == line2) {\n        context.set(line2, true)\n    } else {\n        node.warn('Definitely should not have gotten here');\n    }\n    //node.warn('Unaccounted error')\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2620,
        "wires": [
            [],
            [
                "63ae67efa4cb6d62"
            ]
        ]
    },
    {
        "id": "2d812dadd99ca0e9",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 2660,
        "wires": [
            [
                "6afb432dee294a8f"
            ]
        ]
    },
    {
        "id": "63ae67efa4cb6d62",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "NodeWarn",
        "func": "node.warn(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "6afb432dee294a8f",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3590,
        "y": 2660,
        "wires": [
            [
                "3db67ea913e461f0"
            ]
        ]
    },
    {
        "id": "3db67ea913e461f0",
        "type": "modbus-write",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "75dbc07d8ec25bc4",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3760,
        "y": 2660,
        "wires": [
            [],
            [
                "b928aa7c58a32f30"
            ]
        ]
    },
    {
        "id": "b928aa7c58a32f30",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 431",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 2620,
        "wires": []
    },
    {
        "id": "ba78f633b14a58e2",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 1180,
        "wires": [
            [
                "c7f1843dea01bd61"
            ],
            []
        ]
    },
    {
        "id": "68afb727077132ce",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1180,
        "wires": [
            [
                "ba78f633b14a58e2"
            ]
        ]
    },
    {
        "id": "76c63e5719a80bba",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 5';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "68afb727077132ce"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "578f2ed29075aec8",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 1260,
        "wires": [
            [
                "710a1e77c3fb8296"
            ],
            []
        ]
    },
    {
        "id": "25d8a8bb293bd143",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1260,
        "wires": [
            [
                "578f2ed29075aec8"
            ]
        ]
    },
    {
        "id": "708684323da7ef02",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 6';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1260,
        "wires": [
            [
                "25d8a8bb293bd143"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "a400c280af657a65",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 1340,
        "wires": [
            [
                "6665b1d72142958d"
            ],
            []
        ]
    },
    {
        "id": "7a798c118e1211e8",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1340,
        "wires": [
            [
                "a400c280af657a65"
            ]
        ]
    },
    {
        "id": "4efe9be938a6d0c4",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 7';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1340,
        "wires": [
            [
                "7a798c118e1211e8"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "e1f8374e980ed85b",
        "type": "modbus-getter",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 840,
        "y": 1420,
        "wires": [
            [
                "c5af68da6fd155f8"
            ],
            []
        ]
    },
    {
        "id": "20d111394e91e3b5",
        "type": "delay",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1420,
        "wires": [
            [
                "e1f8374e980ed85b"
            ]
        ]
    },
    {
        "id": "1bc73ebb7073039a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA 8';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1420,
        "wires": [
            [
                "20d111394e91e3b5"
            ],
            [
                "9f8ccd6fc4351d5d"
            ]
        ]
    },
    {
        "id": "11e124c584953c86",
        "type": "comment",
        "z": "18a7ffc09fc6eb29",
        "name": "Logout Timer",
        "info": "",
        "x": 3330,
        "y": 3180,
        "wires": []
    },
    {
        "id": "18f7d4dde3bc89f5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Write Delete",
        "func": "// Get the file name\nmsg.actualFileName = msg.filename.split('/')[msg.filename.split('/').length - 1]\nlet filePath = msg.filename.split('/')\nfilePath.pop()\nmsg.filePath = filePath.join('/')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 3180,
        "wires": [
            [
                "8aa931598e19adc1"
            ]
        ]
    },
    {
        "id": "8aa931598e19adc1",
        "type": "fs-ops-delete",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "",
        "path": "filePath",
        "pathType": "msg",
        "filename": "actualFileName",
        "filenameType": "msg",
        "x": 1310,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "432b5537805e08f9",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "NO",
        "cancel": "YES",
        "raw": false,
        "className": "",
        "topic": "Delete Recipe",
        "name": "",
        "x": 925,
        "y": 3140,
        "wires": [
            [
                "aa3c9d8c6218ccb0"
            ]
        ],
        "l": false
    },
    {
        "id": "8fde8a58a201079a",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Set Notification",
        "func": "let actualFileName = msg.filename.split('/')[msg.filename.split('/').length - 1]\nmsg.payload = 'Are you sure you want to delete ' + actualFileName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 3140,
        "wires": [
            [
                "432b5537805e08f9"
            ]
        ],
        "l": false
    },
    {
        "id": "aa3c9d8c6218ccb0",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "YES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 3140,
        "wires": [
            [],
            [
                "18f7d4dde3bc89f5"
            ]
        ]
    },
    {
        "id": "effbd1c3df4f7867",
        "type": "switch",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3120,
        "wires": [
            [],
            [
                "8fde8a58a201079a"
            ]
        ]
    },
    {
        "id": "8cfe37a36bee9df5",
        "type": "fs-file-lister",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 660,
        "y": 3120,
        "wires": [
            [
                "effbd1c3df4f7867"
            ]
        ]
    },
    {
        "id": "bfdc878a3bb95f2d",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Config FL",
        "func": "//del: used for testing\nmsg = JSON.parse(JSON.stringify(flow.get('AAA')));\nmsg.payload = {\n    start: global.get('recipeJSONlocation'),\n    pattern: msg.payload.filename\n}\nmsg.filename = msg.payload.start + msg.payload.pattern;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3120,
        "wires": [
            [
                "8cfe37a36bee9df5"
            ]
        ]
    },
    {
        "id": "b64c6cd1bbaa63d0",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "5bd40d6fa0af9c0a",
        "name": "Template Buffer",
        "func": "//Hard coded: The buffer should have a single member with known key\nlet bufferKey = 'filename';\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Check for progress trigger\nif ((msg.topic == 'delete') && (buffer[bufferKey] != undefined)) {\n    msg.payload = {\n        filePath: global.get('recipeJSONlocation') + buffer[bufferKey],\n        filename: buffer[bufferKey]\n    }\n    context.set('buffer', undefined);\n    msg.lineFlag = 'deleteRecipe';\n    let obj = JSON.parse(JSON.stringify(msg));\n    flow.set('AAA', obj);\n    return msg;\n} else \n\n// Add the incoming message payload and topic to the buffer\nif (bufferKey in msg) {\n    buffer[bufferKey] = msg.filename.split('\\\\').pop();\n    context.set('buffer', buffer);\n} else \n\n// Clear check\nif (msg.topic == 'clear') {\n    context.set('buffer', undefined)\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3120,
        "wires": [
            [
                "bfdc878a3bb95f2d"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "4ef8de7f639e5aea",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Check triggers",
        "func": "if (msg.payload == 'Yes') { // Recieved from user dashboard query\n    context.set('isUserActive', true)\n} else if (msg.payload == 'No' || msg.payload == 0) {\n    msg.payload = 'logout'\n    msg.topic = 'logout'\n    return msg\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3900,
        "y": 3300,
        "wires": [
            [
                "cd7d687aed4d1295",
                "2fec95ed1bf5c595"
            ]
        ]
    },
    {
        "id": "66b0fd6da94ac194",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "function 57",
        "func": "let msg2 = {payload: msg.payload, reset: true}; //resets the trigger if a response is given\nif (msg.payload == 'Yes') {\n    return [msg, msg2]\n} else {\n    return [ , msg2]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3775,
        "y": 3240,
        "wires": [
            [
                "6c1999fdda29d014"
            ],
            [
                "4ef8de7f639e5aea",
                "4b848aff1f2a2885"
            ]
        ],
        "l": false
    },
    {
        "id": "4b848aff1f2a2885",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3650,
        "y": 3300,
        "wires": [
            [
                "4ef8de7f639e5aea"
            ]
        ]
    },
    {
        "id": "4218c34177306dcf",
        "type": "ui_toast",
        "z": "18a7ffc09fc6eb29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "No",
        "cancel": "Yes",
        "raw": false,
        "className": "",
        "topic": "Are you there?",
        "name": "",
        "x": 3650,
        "y": 3240,
        "wires": [
            [
                "66b0fd6da94ac194"
            ]
        ]
    },
    {
        "id": "4592adeecc86c591",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Set payloads",
        "func": "if (msg.payload == 0) {\n    let msg1 = {\n        payload: 'Are you still using the dashboard?'\n    }\n    return[msg1, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 3260,
        "wires": [
            [
                "4218c34177306dcf"
            ],
            [
                "4b848aff1f2a2885"
            ]
        ]
    },
    {
        "id": "43e9df946fe59724",
        "type": "trigger",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3290,
        "y": 3260,
        "wires": [
            [
                "4592adeecc86c591"
            ]
        ]
    },
    {
        "id": "d789332bb2ac8b93",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3155,
        "y": 3240,
        "wires": [
            [
                "43e9df946fe59724"
            ]
        ],
        "l": false
    },
    {
        "id": "d75f43d52a70b6d5",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "name": "Gate",
        "func": "if (msg.topic != \"logout\") {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3150,
        "y": 3300,
        "wires": [
            [
                "43e9df946fe59724"
            ]
        ]
    },
    {
        "id": "8d9ec08ea406741d",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 3360,
        "wires": []
    },
    {
        "id": "2fec95ed1bf5c595",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 481",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4080,
        "y": 3260,
        "wires": []
    },
    {
        "id": "93fd52d16cb37d44",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "3c74d756fb604c9d",
        "name": "Start up Flow Variables",
        "func": "\n// Set the locations for files\n// Note that these locations need to end in a slash, and slashes should not be back slashes ( \\ )\nglobal.set('recipeJSONlocation', \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Node-red/Files/\");\nglobal.set('stepResultsCSVlocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Node-red/Files/')\nglobal.set('userCredentialsLocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Node-red/Files/'); // Gets altered by node red\nflow.set('dashboardCredentialsLocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Node-red/Files/'); // CSV file with login data for Node Red Dashboard usage\nflow.set('HMIcsvLocation', \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Node-red/Files/\"); // HMI file that loads to HMI for recipe writing\n\n// Set file names\nglobal.set('userCredentialsFilename', 'userCredentials.csv');\nflow.set('dashboardCredentialsName', 'dashboardCredentials.csv');\nflow.set('HMIrecipeName', 'NewEnRcp.csv');\n\nif (flow.get('testResultID') == undefined) {\n    flow.set('testResultID', 236);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f8d1389a285a5778",
        "type": "link in",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "PLC Indicator buffer reset in ",
        "links": [],
        "x": 405,
        "y": 1760,
        "wires": [
            [
                "c93e50142be51fde"
            ]
        ]
    },
    {
        "id": "c93e50142be51fde",
        "type": "function",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "function 58",
        "func": "msg.topic = 'resetBuffer'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 1760,
        "wires": [
            [
                "886b418ee679cebd"
            ]
        ],
        "l": false
    },
    {
        "id": "97d2433977fd36bc",
        "type": "inject",
        "z": "18a7ffc09fc6eb29",
        "g": "29fdf49c57332f39",
        "name": "Rest buffer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1720,
        "wires": [
            [
                "c93e50142be51fde"
            ]
        ]
    },
    {
        "id": "ef11eb710c3c7d22",
        "type": "debug",
        "z": "18a7ffc09fc6eb29",
        "name": "debug 486",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3620,
        "y": 3480,
        "wires": []
    },
    {
        "id": "833bf51add1f6b28",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 780,
        "wires": [
            [
                "1bea77ba7e04fca7"
            ]
        ]
    },
    {
        "id": "1bea77ba7e04fca7",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 0';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 780,
        "wires": [
            [
                "1bbf9740816f283b"
            ]
        ]
    },
    {
        "id": "e48051794ddf3e88",
        "type": "link in",
        "z": "30b839ab81bb1134",
        "name": "Load PLC info in",
        "links": [
            "5c06434f788df45c"
        ],
        "x": 145,
        "y": 680,
        "wires": [
            [
                "ec8c482d07872e49",
                "e69b2968926421ec"
            ]
        ]
    },
    {
        "id": "1bbf9740816f283b",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "local getter",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 700,
        "y": 780,
        "wires": [
            [],
            [
                "faf005d9233fbfea",
                "b473027d4ac01d34"
            ]
        ]
    },
    {
        "id": "faf005d9233fbfea",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 780,
        "wires": [
            [
                "762445cd9337c11b",
                "f2dfe6866388de68"
            ]
        ]
    },
    {
        "id": "b473027d4ac01d34",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 230",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 740,
        "wires": []
    },
    {
        "id": "762445cd9337c11b",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 231",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 740,
        "wires": []
    },
    {
        "id": "f2dfe6866388de68",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg 0\n//Earth bond\t15 102\tfloat\t2 Reg 1\n//IR\t        15 104\tfloat\t2 Reg 2\n//ACW\t        15 106\tfloat\t2 Reg 3\n//ELC\t        15 108\tfloat\t2 Reg 4\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 780,
        "wires": [
            [
                "08c3f516fe4eb595"
            ]
        ]
    },
    {
        "id": "08c3f516fe4eb595",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "local getter",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1330,
        "y": 780,
        "wires": [
            [],
            [
                "29fd29f57748bcc7",
                "c7a9dae35b55f064"
            ]
        ]
    },
    {
        "id": "29fd29f57748bcc7",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 780,
        "wires": [
            [
                "8fc5673b72b562c2",
                "595f682b352e2611"
            ]
        ]
    },
    {
        "id": "c7a9dae35b55f064",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 232",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 740,
        "wires": []
    },
    {
        "id": "8fc5673b72b562c2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 233",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 740,
        "wires": []
    },
    {
        "id": "595f682b352e2611",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 780,
        "wires": [
            [
                "4411f36c6a32d35a"
            ]
        ]
    },
    {
        "id": "4411f36c6a32d35a",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "local getter",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1900,
        "y": 780,
        "wires": [
            [],
            [
                "a1a81766748148c2",
                "cdaca32092213ebd"
            ]
        ]
    },
    {
        "id": "a1a81766748148c2",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [20, 20],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = floatValues[0];\ntestResults.parameterVoltages = floatValues[1];\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 780,
        "wires": [
            [
                "c88ffa83d75518c4",
                "529afd81937f42e3"
            ]
        ]
    },
    {
        "id": "cdaca32092213ebd",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 234",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 740,
        "wires": []
    },
    {
        "id": "c88ffa83d75518c4",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 740,
        "wires": []
    },
    {
        "id": "529afd81937f42e3",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 780,
        "wires": [
            [
                "ff5705a41f375779",
                "45825e29f47c31e2"
            ]
        ]
    },
    {
        "id": "ff5705a41f375779",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "local getter",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2470,
        "y": 780,
        "wires": [
            [],
            [
                "f613df3809e49d79",
                "33641a7ef206abb2"
            ]
        ]
    },
    {
        "id": "45825e29f47c31e2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 720,
        "wires": []
    },
    {
        "id": "f613df3809e49d79",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 780,
        "wires": [
            [
                "6d89d41af16b667a",
                "5202fe9f7c7ad02f"
            ]
        ]
    },
    {
        "id": "33641a7ef206abb2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 740,
        "wires": []
    },
    {
        "id": "6d89d41af16b667a",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 238",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 720,
        "wires": []
    },
    {
        "id": "5202fe9f7c7ad02f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 780,
        "wires": [
            [
                "db5c40ca89470584",
                "0b5fc9948d40e903"
            ]
        ]
    },
    {
        "id": "db5c40ca89470584",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "local getter",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3050,
        "y": 780,
        "wires": [
            [],
            [
                "1bcd2811df7b5789",
                "36eaa71762db9c27"
            ]
        ]
    },
    {
        "id": "0b5fc9948d40e903",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 251",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 720,
        "wires": []
    },
    {
        "id": "1bcd2811df7b5789",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 780,
        "wires": [
            [
                "a3a86239b3c291e9",
                "53b493f4ae487ec8"
            ]
        ]
    },
    {
        "id": "36eaa71762db9c27",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 252",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 740,
        "wires": []
    },
    {
        "id": "a3a86239b3c291e9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 253",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 720,
        "wires": []
    },
    {
        "id": "2dbbc018f192ddda",
        "type": "link out",
        "z": "30b839ab81bb1134",
        "name": "Loaded TestResults from PLC",
        "mode": "link",
        "links": [
            "8b08e84c33faf788"
        ],
        "x": 4615,
        "y": 780,
        "wires": []
    },
    {
        "id": "1ebe35e5b5dd9488",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2500,
        "wires": [
            [
                "18d396ade7033362"
            ]
        ]
    },
    {
        "id": "18d396ade7033362",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "config File Lister",
        "func": "msg.payload = {\n    start: global.get('recipeJSONlocation'),\n    pattern: '*.json'\n}  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2500,
        "wires": [
            [
                "9440de56bd66a2ef"
            ]
        ]
    },
    {
        "id": "8b08e84c33faf788",
        "type": "link in",
        "z": "30b839ab81bb1134",
        "name": "Find TestResult Test in",
        "links": [
            "2dbbc018f192ddda",
            "d682b6b8fe3c6634"
        ],
        "x": 195,
        "y": 2420,
        "wires": [
            [
                "18d396ade7033362",
                "d8b0c5981fa98571"
            ]
        ]
    },
    {
        "id": "9440de56bd66a2ef",
        "type": "fs-file-lister",
        "z": "30b839ab81bb1134",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 560,
        "y": 2500,
        "wires": [
            [
                "d6281de5bf38c398",
                "2571a3a635bef3b8"
            ]
        ]
    },
    {
        "id": "d6281de5bf38c398",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2460,
        "wires": []
    },
    {
        "id": "2571a3a635bef3b8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Split",
        "func": "let testResults = flow.get('testResults') || {};\ntestResults.recipeID\nfor (let i = 0; i < msg.payload.length; i++) {\n    node.send({\n        filename : msg.payload[i],\n        topic: i,\n        search: testResults.recipeID,\n        machineID: msg.machineID\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2500,
        "wires": [
            [
                "244b1ae45a804313",
                "59e50c2367ccb897"
            ]
        ]
    },
    {
        "id": "244b1ae45a804313",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Buffer",
        "func": "/*\n//infinite loop preventer\nlet loop = context.get('loop') || 0;\n\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    //Looking for my value\n    let test = JSON.parse(msg.payload);\n    let machineID = msg.machineID \n    if (parseInt(test.File_Code) == parseInt(msg.search)) {\n        context.set('ID', undefined);\n        context.set('buffer', undefined);\n        context.set('waiting', false);\n        flow.set('test', test);\n        return [, msg, ];\n    }\n\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        /*loop: loop*/\n    }\n    if (ID[0] == undefined) { //When the buffer is empty\n        //del\n        node.warn(msg)\n        node.send([, , {\n            payload: '',//msg.machineID + \" :The JSON file with the recipe \" + msg.search + \"  data stored could not be found\",\n            machineID: machineID  \n        }]);\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n    } else {\n        return [msg, , ];\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        /*loop: loop*/\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return [msg, ];\n    }\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2500,
        "wires": [
            [
                "2459dbbaa550cbd3",
                "99201b9345324dbc"
            ],
            [
                "13aa03d95772a9d2",
                "ba8ad8d8538c91b1"
            ],
            [
                "6bbf5f7e6eac1302"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "59e50c2367ccb897",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 185",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2440,
        "wires": []
    },
    {
        "id": "ecea33bfb43a99c8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2500,
        "wires": [
            [
                "e7338525cee709b4",
                "244b1ae45a804313"
            ]
        ]
    },
    {
        "id": "2459dbbaa550cbd3",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 184",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2440,
        "wires": []
    },
    {
        "id": "99201b9345324dbc",
        "type": "file in",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1160,
        "y": 2500,
        "wires": [
            [
                "5e66956b3c5977c5",
                "ecea33bfb43a99c8"
            ]
        ]
    },
    {
        "id": "13aa03d95772a9d2",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Create data from PLC",
        "func": "let results = flow.get('testResults'),\n    test = flow.get('test'),\n    testResultID = results.testResultID,\n    parCount = results.parCount,\n    headers = [ // Step ID gets done by MSQL\n        \"Test_Result_ID\",\n        \"Step_Number\",\n        \"Measurement\",\n        \"Max_Allowed\",\n        \"Min_Allowed\",\n        \"Result\",\n        \"Reason\",\n        \"Step_Name\",\n        \"Instructions\"\n    ],\n    output = [],\n    arr = [],\n    i = 0,\n    stepNum = 1,\n    basicStepNameHeaders = ['Dead Short', 'Ground Bond', 'ACW Test', 'Insulation Resistance', 'Earth Leakage'],\n    basicKeys = Object.keys(test.basic),\n    allParameterKeys = Object.keys(test.parameterData),\n    singleParameterKeys = Object.keys(test.parameterData[allParameterKeys[0]])\n\nmsg.headers = headers;\nmsg.results = results\n\n//Because dead short isn't in the recipe sent\narr.push(testResultID);\narr.push(stepNum); // Step Number\narr.push(parseFloat(results.basicResults[0].toFixed(2))); //Value\narr.push(1000)//max\narr.push(0)//min\narr.push(results.coilBasic[0]) // Result\narr.push('')//(results.coilBasic[0]) ? results.basicResults[0].toFixed(2) + 'mA is within range' : results.basicResults[0].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n// Basic section\nfor (i = 0; i < basicStepNameHeaders.length - 2; i++) { // Basic section\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\n    arr.push(test.basic[basicKeys[i]].upperVal)//max\n    arr.push(test.basic[basicKeys[i]].lowerVal)//min\n    arr.push(results.coilBasic[stepNum - 1]) // Result\n    arr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) +'mA is out of range') // Reason\n    arr.push(basicStepNameHeaders[stepNum - 1]) // stepName\n    arr.push(\"\"); // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\n// Last basic element doesn't have the min value\narr.push(testResultID);\narr.push(stepNum);\narr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\narr.push(test.basic[basicKeys[i]].upperVal)//max\narr.push(test.basic[basicKeys[i]].lowerVal)//min\narr.push(results.coilBasic[stepNum - 1]) // Result\narr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n//Parameter section \n\nfor (let i = 0; i < parCount; i++) {\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.parameterResults[i].toFixed(2))); //Value\n    arr.push(test.parameterData[allParameterKeys[i]].upperVal)//max\n    arr.push(test.parameterData[allParameterKeys[i]].lowerVal)//min\n    arr.push(results.coilPar[i]) // Result\n    arr.push((results.coilPar[i]) ? results.parameterResults[i].toFixed(2) + 'W is within range' : results.parameterResults[i].toFixed(2) + 'W is out of range') // Reason\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[0]]) // stepName\n    arr.push(test.parameterData[allParameterKeys[i]].instructions) // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\nflow.set('testResultID', flow.get('testResultID') + 1);\n\nmsg.check = {\n    test: test, \n    results: results\n}\n\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2600,
        "wires": [
            [
                "7f7fa15fa8420e27",
                "ea9b3e7ba3a19ec4",
                "03ab8637d79c99c1",
                "30a8ed50ad503530"
            ]
        ]
    },
    {
        "id": "ba8ad8d8538c91b1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2560,
        "wires": []
    },
    {
        "id": "e7338525cee709b4",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 182",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 2420,
        "wires": []
    },
    {
        "id": "5e66956b3c5977c5",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 183",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2440,
        "wires": []
    },
    {
        "id": "83d534a16aecd14a",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 940,
        "y": 2600,
        "wires": [
            [
                "13aa03d95772a9d2"
            ]
        ]
    },
    {
        "id": "7f7fa15fa8420e27",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 191",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2560,
        "wires": []
    },
    {
        "id": "ea9b3e7ba3a19ec4",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Config File Listener",
        "func": "\ndelete msg.results\nmsg.data = msg.payload;\nmsg.columns = msg.headers.toString();\nlet pattern = msg.machineID + 'stepResults.csv'\nmsg.filename = flow.get('stepResultsCSVlocation') + pattern;\nmsg.payload = {\n    start: global.get('stepResultsCSVlocation'),\n    pattern: pattern\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2600,
        "wires": [
            [
                "c73713dc0860d465"
            ]
        ]
    },
    {
        "id": "03ab8637d79c99c1",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "SQL Statement",
        "func": "// Add in time stamp\nlet timestamp = new Date().toISOString()\nfor (let i = 0; i < msg.payload.length; i++) {\n    msg.payload[i].push(timestamp)\n}\nmsg.headers.push('Time_Stamp')\n\n// AtekaTestResults Table info //\nlet results = msg.results\ndelete msg.results\n\nlet fullTestTable = '[Defy].[dbo].[AtekaTestResults]'\nlet fullTestHeaders = '(Test_Result_ID, Result, Time_Stamp, Operator)'\nlet fullTestPassFail = results.coilFullTest ? 'PASS': 'FAIL'\nlet fullTestValues = `(${results.testResultID}, '${fullTestPassFail}', '${timestamp}', '${results.operator}')`\nlet firstInsert = `INSERT INTO ${fullTestTable} ${fullTestHeaders} VALUES ${fullTestValues}`\n\nnode.send({\n    payload: firstInsert,\n    topic: 'firstInsert',\n})\n// AtekaTestResults Table info Done //\n\n// Insert statement\nlet task = \"INSERT INTO \",\n    tableName = \"\",\n    headers = \"( \" + msg.headers.toString() + \" )\",\n    valueText = \"\",\n    values = [],\n    tableNumber = 0\n    \n// Set tableNumber\nswitch (msg.machineID) {\n    case 'ATEKA 1':\n        tableNumber = 1\n        break;\n    case 'ATEKA 2':\n        tableNumber = 2\n        break;\n    case \"ATEKA 3\":\n        tableNumber = 3\n        break;\n    case 'ATEKA 4':\n        tableNumber = 4\n        break;\n    case 'ATEKA 5':\n        tableNumber = 5\n        break;\n    case 'ATEKA 6':\n        tableNumber = 6\n        break;\n    case 'ATEKA 7':\n        tableNumber = 7\n        break;\n    case 'ATEKA 8':\n        tableNumber = 8\n        break;\n    default:\n        node.warn(msg.machineID)\n        node.warn('We do the bee boo bee babp')\n        break;\n}\n\n//REVERT\ntableName = '[ATEKA_DB].[dbo].[AtekaStepResults' + tableNumber + '] '\n//tableName = '[Defy].[dbo].[AtekaStepResults' + tableNumber + '] '\nnode.warn('Table Number: ' + tableNumber);\nmsg.payload.forEach((array) => {\n\n    // Data manipulation before writing\n    // Round value and min max values to 4 decimal points \n    for (let j = 2; j <= 4; j++) {\n        array[j] = array[j].toFixed(4)\n    }\n\n    // Some are numbers, some are text. For loop is easier to catch those\n    let i = 0; // Count of i will be kept\n    valueText += array[i++].toString(); // First instance is the tested appliance ID\n\n    for (i; i <= 4; i++) { // Adds up the numbers\n        valueText += \", \" + array[i].toString();\n    }\n\n    if(array[i++]) {\n        valueText += \", 'PASS'\";\n    } else {\n        valueText += \", 'FAIL'\";\n    }\n\n    for (i; i <= 9; i++) { // Catching the text fields\n        valueText += \", '\" + array[i] + \"'\"; \n    }\n\n    valueText = \" VALUES ( \" + valueText + \" ) \";\n    node.send({ \n        payload: task + tableName + headers + valueText,\n        topic: array[0] // Using the Step number to define each, should use unique ID\n        });\n    values.push(valueText);\n\n    valueText = \"\";\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 2720,
        "wires": [
            [
                "ef23d1df8a887529",
                "a96297bca0ba36f0",
                "8284ed276dbc988c"
            ]
        ]
    },
    {
        "id": "30a8ed50ad503530",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Return msg",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2760,
        "wires": [
            [
                "f9896c184849361c",
                "c50ca808a46e3ce2"
            ]
        ]
    },
    {
        "id": "c73713dc0860d465",
        "type": "fs-file-lister",
        "z": "30b839ab81bb1134",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 1620,
        "y": 2600,
        "wires": [
            [
                "ac6f65e9425dddb4"
            ]
        ]
    },
    {
        "id": "ef23d1df8a887529",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 2720,
        "wires": [
            [
                "5925109f90f252d5",
                "bab4abd9cbe6d8e1"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "f9896c184849361c",
        "type": "link out",
        "z": "30b839ab81bb1134",
        "name": "Trigger listener out",
        "mode": "link",
        "links": [
            "f7c019b20bccde87",
            "28054bc0bb0387bf"
        ],
        "x": 1625,
        "y": 2780,
        "wires": []
    },
    {
        "id": "ac6f65e9425dddb4",
        "type": "switch",
        "z": "30b839ab81bb1134",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1770,
        "y": 2600,
        "wires": [
            [
                "691946b32306a87d",
                "376a5df2bc9d06a1"
            ],
            [
                "4decf197e483b060"
            ]
        ]
    },
    {
        "id": "dda5ddc5310d7979",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 2720,
        "wires": [
            [
                "6bee8f4aa2b4b0a8",
                "ef23d1df8a887529"
            ]
        ]
    },
    {
        "id": "5925109f90f252d5",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 198",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 2680,
        "wires": []
    },
    {
        "id": "bab4abd9cbe6d8e1",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2020,
        "y": 2720,
        "wires": [
            [
                "3361057877a630e5",
                "dda5ddc5310d7979"
            ]
        ]
    },
    {
        "id": "691946b32306a87d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Set Payload",
        "func": "msg.filename = global.get('stepResultsCSVlocation') + msg.machineID + 'stepResults.csv'\nmsg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2520,
        "wires": [
            [
                "6b9e955d716688bd",
                "5b546955172386a3"
            ]
        ]
    },
    {
        "id": "376a5df2bc9d06a1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 192",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 2460,
        "wires": []
    },
    {
        "id": "4decf197e483b060",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Set Payload",
        "func": "msg.filename = global.get('stepResultsCSVlocation') + msg.machineID + 'stepResults.csv'\nmsg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 2600,
        "wires": [
            [
                "e01608a3e19f9fe5"
            ]
        ]
    },
    {
        "id": "6bee8f4aa2b4b0a8",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 199",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 2680,
        "wires": []
    },
    {
        "id": "3361057877a630e5",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 196",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 2680,
        "wires": []
    },
    {
        "id": "6b9e955d716688bd",
        "type": "csv",
        "z": "30b839ab81bb1134",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2110,
        "y": 2520,
        "wires": [
            [
                "ba04e4da5ad5483e",
                "62d00e3ee86ce2a4"
            ]
        ]
    },
    {
        "id": "5b546955172386a3",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 2460,
        "wires": []
    },
    {
        "id": "e01608a3e19f9fe5",
        "type": "csv",
        "z": "30b839ab81bb1134",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2110,
        "y": 2600,
        "wires": [
            [
                "62d00e3ee86ce2a4"
            ]
        ]
    },
    {
        "id": "ba04e4da5ad5483e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 193",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 2460,
        "wires": []
    },
    {
        "id": "62d00e3ee86ce2a4",
        "type": "file",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2300,
        "y": 2520,
        "wires": [
            [
                "2ab21cbdba536c53"
            ]
        ]
    },
    {
        "id": "e69b2968926421ec",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 300",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 580,
        "wires": []
    },
    {
        "id": "5805a72fe1a96a3c",
        "type": "ui_toast",
        "z": "30b839ab81bb1134",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1190,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "c50ca808a46e3ce2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "Finished reading PLC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 2820,
        "wires": []
    },
    {
        "id": "d235a391e11a8663",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Store data",
        "info": "",
        "x": 100,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2f1b039d1aa2abf7",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Read PLC",
        "info": "",
        "x": 100,
        "y": 560,
        "wires": []
    },
    {
        "id": "48f35881f2e39f3f",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3000,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "80439fd01aa7603a",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3060,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "58e1574f47ca99d3",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f1c75f1adfd397e2",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "4f042df482363103",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c826ef7e74d00a9b",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "local",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2070,
        "y": 3240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "93254757d63cbba6",
        "type": "switch",
        "z": "30b839ab81bb1134",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ATEKA 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 1770,
        "y": 3100,
        "wires": [
            [
                "9cdca73ab906e10f"
            ],
            [
                "292cd83307765e8c"
            ],
            [
                "280f2d80357905e8"
            ],
            [
                "c7964256096caf40"
            ],
            [
                "472d40955c8bce87"
            ],
            [
                "6d85a103456ed82b"
            ],
            [
                "bd12209907dafc58"
            ],
            [
                "b90cc74da42b60af"
            ],
            [
                "894859417035429e"
            ]
        ]
    },
    {
        "id": "6074ddc30262050f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 1';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "eeebde08fbec63c8"
            ]
        ]
    },
    {
        "id": "bdba11dee96f1c37",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 880,
        "wires": [
            [
                "6074ddc30262050f"
            ]
        ]
    },
    {
        "id": "eeebde08fbec63c8",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 880,
        "wires": [
            [],
            [
                "cf6309839eaa69b5",
                "cbb6f77f61e72e42"
            ]
        ]
    },
    {
        "id": "cf6309839eaa69b5",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 880,
        "wires": [
            [
                "2f2e636b9119671f",
                "308e6ba3772387e4"
            ]
        ]
    },
    {
        "id": "cbb6f77f61e72e42",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 320",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 840,
        "wires": []
    },
    {
        "id": "2f2e636b9119671f",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 321",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 840,
        "wires": []
    },
    {
        "id": "308e6ba3772387e4",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 880,
        "wires": [
            [
                "0788bc9c48c1a00e"
            ]
        ]
    },
    {
        "id": "0788bc9c48c1a00e",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 880,
        "wires": [
            [],
            [
                "f8416b12058371a1",
                "fc46b157a084811d"
            ]
        ]
    },
    {
        "id": "f8416b12058371a1",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 880,
        "wires": [
            [
                "4812b035b9ffccfb",
                "4a102a329faa5a26"
            ]
        ]
    },
    {
        "id": "fc46b157a084811d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 322",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 840,
        "wires": []
    },
    {
        "id": "4812b035b9ffccfb",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 323",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 840,
        "wires": []
    },
    {
        "id": "4a102a329faa5a26",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 880,
        "wires": [
            [
                "26c0049ad09a2c5c"
            ]
        ]
    },
    {
        "id": "26c0049ad09a2c5c",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 880,
        "wires": [
            [],
            [
                "37e930efa77ede2d",
                "ee956b5b3cb35830"
            ]
        ]
    },
    {
        "id": "37e930efa77ede2d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 880,
        "wires": [
            [
                "a5fefcf0e3037b1c",
                "0a043035d48d9799"
            ]
        ]
    },
    {
        "id": "ee956b5b3cb35830",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 324",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 840,
        "wires": []
    },
    {
        "id": "a5fefcf0e3037b1c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 325",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 840,
        "wires": []
    },
    {
        "id": "0a043035d48d9799",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 880,
        "wires": [
            [
                "c8ad6dc34d0211e7",
                "d804baddf302e3c0"
            ]
        ]
    },
    {
        "id": "c8ad6dc34d0211e7",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 880,
        "wires": [
            [],
            [
                "704bbd7c54a49646",
                "2f9cc12c6dac6f14"
            ]
        ]
    },
    {
        "id": "d804baddf302e3c0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 326",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 840,
        "wires": []
    },
    {
        "id": "704bbd7c54a49646",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 880,
        "wires": [
            [
                "3f8a3a24698ceda7",
                "7c02401ab6616e41"
            ]
        ]
    },
    {
        "id": "2f9cc12c6dac6f14",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 327",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 840,
        "wires": []
    },
    {
        "id": "3f8a3a24698ceda7",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 840,
        "wires": []
    },
    {
        "id": "7c02401ab6616e41",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 880,
        "wires": [
            [
                "e4a1e7c4402df4b8",
                "f181dd616d424a32"
            ]
        ]
    },
    {
        "id": "e4a1e7c4402df4b8",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 880,
        "wires": [
            [],
            [
                "a23eb0f91d7ae2ba",
                "33833cd8fb1bc565"
            ]
        ]
    },
    {
        "id": "f181dd616d424a32",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 329",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 840,
        "wires": []
    },
    {
        "id": "a23eb0f91d7ae2ba",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 880,
        "wires": [
            [
                "546e923be4812c83",
                "e506ed18619b1441"
            ]
        ]
    },
    {
        "id": "33833cd8fb1bc565",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 330",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 840,
        "wires": []
    },
    {
        "id": "546e923be4812c83",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 331",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 820,
        "wires": []
    },
    {
        "id": "3c720acc9896528c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 2';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 980,
        "wires": [
            [
                "0d48cf256a40719b"
            ]
        ]
    },
    {
        "id": "abf98aad76b4ee30",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "3c720acc9896528c"
            ]
        ]
    },
    {
        "id": "0d48cf256a40719b",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 980,
        "wires": [
            [],
            [
                "1f7d660048124936",
                "bc14f7ac75f67dcd"
            ]
        ]
    },
    {
        "id": "1f7d660048124936",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 980,
        "wires": [
            [
                "73438dba74324d05",
                "2b8ad2d2b5fcde02"
            ]
        ]
    },
    {
        "id": "bc14f7ac75f67dcd",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 332",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 940,
        "wires": []
    },
    {
        "id": "73438dba74324d05",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 333",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 940,
        "wires": []
    },
    {
        "id": "2b8ad2d2b5fcde02",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 980,
        "wires": [
            [
                "8cd3f5215b6b98bd"
            ]
        ]
    },
    {
        "id": "8cd3f5215b6b98bd",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 980,
        "wires": [
            [],
            [
                "23baccbd1aef2d37",
                "96e06fc69a0c63e0"
            ]
        ]
    },
    {
        "id": "23baccbd1aef2d37",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 980,
        "wires": [
            [
                "429685a6166ab096",
                "7b3ca39af973b38f"
            ]
        ]
    },
    {
        "id": "96e06fc69a0c63e0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 334",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 940,
        "wires": []
    },
    {
        "id": "429685a6166ab096",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 335",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 940,
        "wires": []
    },
    {
        "id": "7b3ca39af973b38f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 980,
        "wires": [
            [
                "9f2f4d5d93c5bad0"
            ]
        ]
    },
    {
        "id": "9f2f4d5d93c5bad0",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 980,
        "wires": [
            [],
            [
                "5d8666dd23345d5f",
                "e19162caa096fe30"
            ]
        ]
    },
    {
        "id": "5d8666dd23345d5f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 980,
        "wires": [
            [
                "e94ffdda288dfcf9",
                "132938edd7143a2f"
            ]
        ]
    },
    {
        "id": "e19162caa096fe30",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 336",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 940,
        "wires": []
    },
    {
        "id": "e94ffdda288dfcf9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 337",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 940,
        "wires": []
    },
    {
        "id": "132938edd7143a2f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 980,
        "wires": [
            [
                "8514c1d66aeb68e8",
                "da8133468f884585"
            ]
        ]
    },
    {
        "id": "8514c1d66aeb68e8",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 980,
        "wires": [
            [],
            [
                "1e0887b0bd42fb15",
                "2bf6eed14d533cef"
            ]
        ]
    },
    {
        "id": "da8133468f884585",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 338",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 940,
        "wires": []
    },
    {
        "id": "1e0887b0bd42fb15",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 980,
        "wires": [
            [
                "fc75a16fb4f65e14",
                "a6b7933a8270495f"
            ]
        ]
    },
    {
        "id": "2bf6eed14d533cef",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 339",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 940,
        "wires": []
    },
    {
        "id": "fc75a16fb4f65e14",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 340",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 940,
        "wires": []
    },
    {
        "id": "a6b7933a8270495f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 980,
        "wires": [
            [
                "28f1666bd6b2b376",
                "c47a9fcfbe7aad5e"
            ]
        ]
    },
    {
        "id": "28f1666bd6b2b376",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 980,
        "wires": [
            [],
            [
                "883d978fe59cda67",
                "48fbf971791fa5b0"
            ]
        ]
    },
    {
        "id": "c47a9fcfbe7aad5e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 341",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 940,
        "wires": []
    },
    {
        "id": "883d978fe59cda67",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 980,
        "wires": [
            [
                "cf6d64154e249347",
                "4ef13a36ebad928d"
            ]
        ]
    },
    {
        "id": "48fbf971791fa5b0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 342",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 940,
        "wires": []
    },
    {
        "id": "cf6d64154e249347",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 343",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 920,
        "wires": []
    },
    {
        "id": "ff59bd361bcdefbe",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 3';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "ba7c67336e88ee6a"
            ]
        ]
    },
    {
        "id": "a6e98eae8e0e4da2",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1080,
        "wires": [
            [
                "ff59bd361bcdefbe"
            ]
        ]
    },
    {
        "id": "ba7c67336e88ee6a",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1080,
        "wires": [
            [],
            [
                "6dbaa7f2ac52b4e9",
                "e76d985f9ab25067"
            ]
        ]
    },
    {
        "id": "6dbaa7f2ac52b4e9",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "d98e5881d8be8ebe",
                "53b518d00b27e45f"
            ]
        ]
    },
    {
        "id": "e76d985f9ab25067",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 344",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d98e5881d8be8ebe",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 345",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "53b518d00b27e45f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1080,
        "wires": [
            [
                "3537ca9a17315b38"
            ]
        ]
    },
    {
        "id": "3537ca9a17315b38",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1080,
        "wires": [
            [],
            [
                "a0a7589d85eec977",
                "ee9e1d75c3f590b9"
            ]
        ]
    },
    {
        "id": "a0a7589d85eec977",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "73b518649495ee47",
                "254236715cd5afec"
            ]
        ]
    },
    {
        "id": "ee9e1d75c3f590b9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 346",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1040,
        "wires": []
    },
    {
        "id": "73b518649495ee47",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 347",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1040,
        "wires": []
    },
    {
        "id": "254236715cd5afec",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1080,
        "wires": [
            [
                "2c3b1790910332cf"
            ]
        ]
    },
    {
        "id": "2c3b1790910332cf",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1080,
        "wires": [
            [],
            [
                "3922f489780eb83d",
                "a661cdd6c8f8fa68"
            ]
        ]
    },
    {
        "id": "3922f489780eb83d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1080,
        "wires": [
            [
                "79e1127c0148aa9d",
                "2cbb1966e387561b"
            ]
        ]
    },
    {
        "id": "a661cdd6c8f8fa68",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 348",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "79e1127c0148aa9d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 349",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2cbb1966e387561b",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1080,
        "wires": [
            [
                "7dfafcc1e956d337",
                "d3911e42bb77363d"
            ]
        ]
    },
    {
        "id": "7dfafcc1e956d337",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1080,
        "wires": [
            [],
            [
                "f2de98895ab91698",
                "e69f46466d750ad4"
            ]
        ]
    },
    {
        "id": "d3911e42bb77363d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 350",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f2de98895ab91698",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1080,
        "wires": [
            [
                "f5ba351681e40178",
                "936d6f77ca52c3bf"
            ]
        ]
    },
    {
        "id": "e69f46466d750ad4",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 351",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f5ba351681e40178",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 352",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1040,
        "wires": []
    },
    {
        "id": "936d6f77ca52c3bf",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1080,
        "wires": [
            [
                "ea542a4cf891d9e9",
                "a29fb7846a9c03e2"
            ]
        ]
    },
    {
        "id": "ea542a4cf891d9e9",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1080,
        "wires": [
            [],
            [
                "f19c0913c5dce784",
                "99388fdfae1d0e97"
            ]
        ]
    },
    {
        "id": "a29fb7846a9c03e2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 353",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f19c0913c5dce784",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1080,
        "wires": [
            [
                "3e3538e6b599f90e",
                "1821b3cb118daed4"
            ]
        ]
    },
    {
        "id": "99388fdfae1d0e97",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 354",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3e3538e6b599f90e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 355",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1f69f7c696120f5c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 4';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "82e57b6b2560e594"
            ]
        ]
    },
    {
        "id": "522186f6b6b40c7d",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1180,
        "wires": [
            [
                "1f69f7c696120f5c"
            ]
        ]
    },
    {
        "id": "82e57b6b2560e594",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1180,
        "wires": [
            [],
            [
                "58112c277abed917",
                "a421349422439fb7"
            ]
        ]
    },
    {
        "id": "58112c277abed917",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1180,
        "wires": [
            [
                "dba8abe561be087d",
                "6a80783a603c2553"
            ]
        ]
    },
    {
        "id": "a421349422439fb7",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 356",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1140,
        "wires": []
    },
    {
        "id": "dba8abe561be087d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 357",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6a80783a603c2553",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1180,
        "wires": [
            [
                "8ae42ee69604bd99"
            ]
        ]
    },
    {
        "id": "8ae42ee69604bd99",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1180,
        "wires": [
            [],
            [
                "ebb93b063e764326",
                "c01aa67c4eaf4a7d"
            ]
        ]
    },
    {
        "id": "ebb93b063e764326",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1180,
        "wires": [
            [
                "c26b48c11ae89c41",
                "aa8badfd6c65c4da"
            ]
        ]
    },
    {
        "id": "c01aa67c4eaf4a7d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 358",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c26b48c11ae89c41",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 359",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1140,
        "wires": []
    },
    {
        "id": "aa8badfd6c65c4da",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1180,
        "wires": [
            [
                "ec06221bec74fd66"
            ]
        ]
    },
    {
        "id": "ec06221bec74fd66",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1180,
        "wires": [
            [],
            [
                "c8197c356cbce414",
                "835638d6bbe9858d"
            ]
        ]
    },
    {
        "id": "c8197c356cbce414",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1180,
        "wires": [
            [
                "0556a659981073ca",
                "51ac1e112e74292f"
            ]
        ]
    },
    {
        "id": "835638d6bbe9858d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 360",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0556a659981073ca",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 361",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "51ac1e112e74292f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1180,
        "wires": [
            [
                "855539bd5d58dcfc",
                "ceb167574e1c8cf0"
            ]
        ]
    },
    {
        "id": "855539bd5d58dcfc",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1180,
        "wires": [
            [],
            [
                "6785611eca7d0c23",
                "225ff0634b2f788b"
            ]
        ]
    },
    {
        "id": "ceb167574e1c8cf0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 362",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6785611eca7d0c23",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1180,
        "wires": [
            [
                "cb908a7935b13c43",
                "fb4e7c2a96e18b9b"
            ]
        ]
    },
    {
        "id": "225ff0634b2f788b",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 363",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cb908a7935b13c43",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 364",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fb4e7c2a96e18b9b",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1180,
        "wires": [
            [
                "f9995ef2a5546bc7",
                "885ff2775eadd910"
            ]
        ]
    },
    {
        "id": "f9995ef2a5546bc7",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1180,
        "wires": [
            [],
            [
                "eefef6a5bd939799",
                "e6ed8749e9ba7f75"
            ]
        ]
    },
    {
        "id": "885ff2775eadd910",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 365",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1140,
        "wires": []
    },
    {
        "id": "eefef6a5bd939799",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1180,
        "wires": [
            [
                "6aa1aaddbe846a53",
                "dba64390f0f4eb4f"
            ]
        ]
    },
    {
        "id": "e6ed8749e9ba7f75",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 366",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6aa1aaddbe846a53",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 367",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ec8c482d07872e49",
        "type": "switch",
        "z": "30b839ab81bb1134",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA 8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "621c2b709f2207f2"
            ],
            [
                "6074ddc30262050f",
                "621c2b709f2207f2",
                "97c83a2e77f090db"
            ],
            [
                "3c720acc9896528c",
                "621c2b709f2207f2",
                "6b8220d990c56ce1"
            ],
            [
                "ff59bd361bcdefbe",
                "621c2b709f2207f2",
                "38d79a7d94661a2f"
            ],
            [
                "1f69f7c696120f5c",
                "621c2b709f2207f2",
                "aec6fe453457ce0d"
            ],
            [
                "b211b07ca2eaa770",
                "621c2b709f2207f2",
                "414ff9dd42f2e18c"
            ],
            [
                "b0fb7c7a31ad0e45",
                "621c2b709f2207f2",
                "6cc85256d8276ca0"
            ],
            [
                "75ef834a44bb8e9d",
                "621c2b709f2207f2",
                "4dae02cc4956263b"
            ],
            [
                "795fb142df03d472",
                "621c2b709f2207f2",
                "b6982996aaab3d43"
            ]
        ]
    },
    {
        "id": "9cdca73ab906e10f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 26",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3000,
        "wires": [
            [
                "48f35881f2e39f3f",
                "a6edd0d9ca456d5f",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "292cd83307765e8c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 27",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3060,
        "wires": [
            [
                "80439fd01aa7603a",
                "aa35c5800651163a",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "280f2d80357905e8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 28",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3120,
        "wires": [
            [
                "58e1574f47ca99d3",
                "fc30dae4e6d3b530",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "c7964256096caf40",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 29",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3180,
        "wires": [
            [
                "f1c75f1adfd397e2",
                "397b3435b78c11c0",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "472d40955c8bce87",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 30",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3240,
        "wires": [
            [
                "c826ef7e74d00a9b",
                "600a0279d9b4d7f4",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "600a0279d9b4d7f4",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "local",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 3240,
        "wires": []
    },
    {
        "id": "f7c019b20bccde87",
        "type": "link in",
        "z": "30b839ab81bb1134",
        "name": "PLC machine switch bit off in",
        "links": [
            "f9896c184849361c"
        ],
        "x": 1635,
        "y": 3060,
        "wires": [
            [
                "93254757d63cbba6",
                "c4d9d5efd5a63ced"
            ]
        ]
    },
    {
        "id": "c4d9d5efd5a63ced",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "PLC machine switch bit off in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 2940,
        "wires": []
    },
    {
        "id": "397b3435b78c11c0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3180,
        "wires": []
    },
    {
        "id": "fc30dae4e6d3b530",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3120,
        "wires": []
    },
    {
        "id": "aa35c5800651163a",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3060,
        "wires": []
    },
    {
        "id": "a6edd0d9ca456d5f",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3000,
        "wires": []
    },
    {
        "id": "dc550e55a3ad01c0",
        "type": "link out",
        "z": "30b839ab81bb1134",
        "name": "PLC machine switch bit off out",
        "mode": "link",
        "links": [
            "06de241923fb3027"
        ],
        "x": 2275,
        "y": 3660,
        "wires": []
    },
    {
        "id": "621c2b709f2207f2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "Start PLC Read",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 360,
        "wires": []
    },
    {
        "id": "4ae34cabbd92172c",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Turn bit to read off",
        "info": "",
        "x": 1680,
        "y": 2920,
        "wires": []
    },
    {
        "id": "0f0df45ff2eac772",
        "type": "ftp in",
        "z": "30b839ab81bb1134",
        "ftp": "05bf051581f2da76",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 370,
        "y": 3620,
        "wires": [
            [
                "38150b9e725130e2"
            ]
        ]
    },
    {
        "id": "73f2d297a306cd08",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 220,
        "y": 3620,
        "wires": [
            [
                "0f0df45ff2eac772"
            ]
        ]
    },
    {
        "id": "38150b9e725130e2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 379",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 3620,
        "wires": []
    },
    {
        "id": "d8b0c5981fa98571",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 419",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 2360,
        "wires": []
    },
    {
        "id": "a6426c1433f575f3",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Grab data",
        "func": "msg ={\n    incommingMsg : JSON.parse(JSON.stringify(msg)),\n    flowTestResults: flow.get('testResults')\n} \nmsg.payload = JSON.stringify(msg)\nmsg.filename = 'C:/Ateka/grabbedData.json'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2400,
        "wires": [
            [
                "f0d8d3129f7c4c68"
            ]
        ]
    },
    {
        "id": "1f21440ac5c3aa10",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 420",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2360,
        "wires": []
    },
    {
        "id": "f0d8d3129f7c4c68",
        "type": "file",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 540,
        "y": 2400,
        "wires": [
            [
                "1f21440ac5c3aa10"
            ]
        ]
    },
    {
        "id": "2ab21cbdba536c53",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "csv Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 2460,
        "wires": []
    },
    {
        "id": "58da13b8e2751112",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "PLC machine switch bit off out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 3740,
        "wires": []
    },
    {
        "id": "a96297bca0ba36f0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "SQL Statement out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 2680,
        "wires": []
    },
    {
        "id": "0552c582692c8a86",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 3700,
        "wires": [
            [
                "1703e272bf58afa8"
            ]
        ]
    },
    {
        "id": "1703e272bf58afa8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read database",
        "func": "msg.payload = 'SELECT TOP (1000) * FROM [ATEKA_DB].[dbo].[AtekaStepResults3]'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 3700,
        "wires": [
            [
                "ed90865be5901520"
            ]
        ]
    },
    {
        "id": "ed90865be5901520",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 560,
        "y": 3700,
        "wires": [
            [
                "45d3775e5d85f4e3"
            ]
        ]
    },
    {
        "id": "45d3775e5d85f4e3",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 421",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 3700,
        "wires": []
    },
    {
        "id": "c21190b95a668cb8",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Testing",
        "info": "",
        "x": 170,
        "y": 3520,
        "wires": []
    },
    {
        "id": "b6ac614c9d366098",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 880,
        "wires": [
            [
                "0b055c3b408b9d78"
            ]
        ]
    },
    {
        "id": "326210f7a7a4219f",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 880,
        "wires": [
            [],
            [
                "b6ac614c9d366098"
            ]
        ]
    },
    {
        "id": "e506ed18619b1441",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 880,
        "wires": [
            [
                "326210f7a7a4219f"
            ]
        ]
    },
    {
        "id": "53b493f4ae487ec8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 780,
        "wires": [
            [
                "7e6f61a5472ef209"
            ]
        ]
    },
    {
        "id": "7e6f61a5472ef209",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "862fab04f4d863e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3630,
        "y": 780,
        "wires": [
            [],
            [
                "a73eae1cb7f126ce"
            ]
        ]
    },
    {
        "id": "a73eae1cb7f126ce",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 780,
        "wires": [
            [
                "cc8049e19b1778ec"
            ]
        ]
    },
    {
        "id": "4ef13a36ebad928d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 980,
        "wires": [
            [
                "5a3e0bfb67f3582b"
            ]
        ]
    },
    {
        "id": "5a3e0bfb67f3582b",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 980,
        "wires": [
            [],
            [
                "51104e4eec92ee41"
            ]
        ]
    },
    {
        "id": "51104e4eec92ee41",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 980,
        "wires": [
            [
                "6d542017d4cb2fe1"
            ]
        ]
    },
    {
        "id": "1821b3cb118daed4",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1080,
        "wires": [
            [
                "2043c088d763d322"
            ]
        ]
    },
    {
        "id": "2043c088d763d322",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1080,
        "wires": [
            [],
            [
                "ed22be8652709f2a"
            ]
        ]
    },
    {
        "id": "ed22be8652709f2a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1080,
        "wires": [
            [
                "3c6d3e5e0fc92527"
            ]
        ]
    },
    {
        "id": "dba64390f0f4eb4f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1180,
        "wires": [
            [
                "7e6b6a9c93443a1c"
            ]
        ]
    },
    {
        "id": "7e6b6a9c93443a1c",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1180,
        "wires": [
            [],
            [
                "f23cc4fcda6cbccc"
            ]
        ]
    },
    {
        "id": "f23cc4fcda6cbccc",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1180,
        "wires": [
            [
                "41645013030da11a"
            ]
        ]
    },
    {
        "id": "9db0b33daf444f89",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1280,
        "wires": [
            [],
            [
                "6a40ab05eefa6a6d",
                "eaf5fa0dcc52e4d1"
            ]
        ]
    },
    {
        "id": "1a9ce3f0c616404f",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 432",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6a40ab05eefa6a6d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1280,
        "wires": [
            [
                "2cf7d97697d79407",
                "a4412ac91fdf9e32"
            ]
        ]
    },
    {
        "id": "eaf5fa0dcc52e4d1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 433",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2cf7d97697d79407",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 434",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a4412ac91fdf9e32",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1280,
        "wires": [
            [
                "f5d57bc65d6f1505"
            ]
        ]
    },
    {
        "id": "f5d57bc65d6f1505",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1280,
        "wires": [
            [],
            [
                "34d7ba179f066baa"
            ]
        ]
    },
    {
        "id": "34d7ba179f066baa",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1280,
        "wires": [
            [
                "d229c28cab56f433"
            ]
        ]
    },
    {
        "id": "2cf65e1315c0d774",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1280,
        "wires": [
            [
                "27c03cc02d1c309d",
                "2d2bcc8b4357c466"
            ]
        ]
    },
    {
        "id": "d360809c362c9091",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 435",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1240,
        "wires": []
    },
    {
        "id": "27c03cc02d1c309d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 436",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2d2bcc8b4357c466",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1280,
        "wires": [
            [
                "22c68ecfce8f6778",
                "0f1f80e954595c82"
            ]
        ]
    },
    {
        "id": "22c68ecfce8f6778",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1280,
        "wires": [
            [],
            [
                "bc8f61fe16fcf642",
                "a790263f98c0db64"
            ]
        ]
    },
    {
        "id": "0f1f80e954595c82",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 437",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1240,
        "wires": []
    },
    {
        "id": "bc8f61fe16fcf642",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1280,
        "wires": [
            [
                "4b7cf451065cd65c",
                "8a1dc7d37c490191"
            ]
        ]
    },
    {
        "id": "a790263f98c0db64",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 438",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4b7cf451065cd65c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 439",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8a1dc7d37c490191",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1280,
        "wires": [
            [
                "9db0b33daf444f89",
                "1a9ce3f0c616404f"
            ]
        ]
    },
    {
        "id": "572d511bdda9eafe",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 440",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e60505b09986a3ee",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1280,
        "wires": [
            [
                "fe30bf803a333afe"
            ]
        ]
    },
    {
        "id": "fe30bf803a333afe",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1280,
        "wires": [
            [],
            [
                "b5c254575e1ad9ea",
                "d734a5fcf02b2c9e"
            ]
        ]
    },
    {
        "id": "b5c254575e1ad9ea",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1280,
        "wires": [
            [
                "be2becaea6236042",
                "068e98884c76b76e"
            ]
        ]
    },
    {
        "id": "d734a5fcf02b2c9e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 441",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1240,
        "wires": []
    },
    {
        "id": "be2becaea6236042",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 442",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1240,
        "wires": []
    },
    {
        "id": "068e98884c76b76e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1280,
        "wires": [
            [
                "5fd872796e85226d"
            ]
        ]
    },
    {
        "id": "5fd872796e85226d",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1280,
        "wires": [
            [],
            [
                "2cf65e1315c0d774",
                "d360809c362c9091"
            ]
        ]
    },
    {
        "id": "b211b07ca2eaa770",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 5';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1280,
        "wires": [
            [
                "1fe05a5a5385d60f"
            ]
        ]
    },
    {
        "id": "8a8aefa5d6539301",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1280,
        "wires": [
            [
                "b211b07ca2eaa770"
            ]
        ]
    },
    {
        "id": "1fe05a5a5385d60f",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1280,
        "wires": [
            [],
            [
                "af5da2032fc0a75a",
                "366da216cbc5b730"
            ]
        ]
    },
    {
        "id": "af5da2032fc0a75a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1280,
        "wires": [
            [
                "572d511bdda9eafe",
                "e60505b09986a3ee"
            ]
        ]
    },
    {
        "id": "366da216cbc5b730",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 443",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1240,
        "wires": []
    },
    {
        "id": "635c8306ebe7ab82",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1380,
        "wires": [
            [],
            [
                "6acc21d1c3f010f8",
                "52b039ec01f2b707"
            ]
        ]
    },
    {
        "id": "fdf69fda22dc052d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 444",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6acc21d1c3f010f8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1380,
        "wires": [
            [
                "797bb6536a96695c",
                "efc9d98965b6090e"
            ]
        ]
    },
    {
        "id": "52b039ec01f2b707",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 445",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1340,
        "wires": []
    },
    {
        "id": "797bb6536a96695c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 446",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1320,
        "wires": []
    },
    {
        "id": "efc9d98965b6090e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1380,
        "wires": [
            [
                "265f796b16267be4"
            ]
        ]
    },
    {
        "id": "265f796b16267be4",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1380,
        "wires": [
            [],
            [
                "baa721b356c72269"
            ]
        ]
    },
    {
        "id": "baa721b356c72269",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1380,
        "wires": [
            [
                "0ea289b6a50aaad0"
            ]
        ]
    },
    {
        "id": "885171cba40a3e1b",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1380,
        "wires": [
            [
                "b09adf821ad4b76f",
                "bc338882b541b48a"
            ]
        ]
    },
    {
        "id": "0e0b8d1bb8b24245",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 447",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b09adf821ad4b76f",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 448",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bc338882b541b48a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1380,
        "wires": [
            [
                "9784ed25eb5950a4",
                "3cfc85f766bd1129"
            ]
        ]
    },
    {
        "id": "9784ed25eb5950a4",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1380,
        "wires": [
            [],
            [
                "1a07de3c10592306",
                "b08bf6f1a59e1b83"
            ]
        ]
    },
    {
        "id": "3cfc85f766bd1129",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 449",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1a07de3c10592306",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1380,
        "wires": [
            [
                "c8078c4f869e8737",
                "29534b8ea64df5d1"
            ]
        ]
    },
    {
        "id": "b08bf6f1a59e1b83",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 450",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c8078c4f869e8737",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 451",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1340,
        "wires": []
    },
    {
        "id": "29534b8ea64df5d1",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1380,
        "wires": [
            [
                "635c8306ebe7ab82",
                "fdf69fda22dc052d"
            ]
        ]
    },
    {
        "id": "0fd74d137fbd07b9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 452",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4a1098f986d3cfea",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1380,
        "wires": [
            [
                "e724f8f5c7b6a280"
            ]
        ]
    },
    {
        "id": "e724f8f5c7b6a280",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1380,
        "wires": [
            [],
            [
                "8861da520598c0bc",
                "1c14eb1cadefc3b5"
            ]
        ]
    },
    {
        "id": "8861da520598c0bc",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1380,
        "wires": [
            [
                "b79cd73979b0e894",
                "dfc5b0594a955eef"
            ]
        ]
    },
    {
        "id": "1c14eb1cadefc3b5",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 453",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b79cd73979b0e894",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 454",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1340,
        "wires": []
    },
    {
        "id": "dfc5b0594a955eef",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1380,
        "wires": [
            [
                "98faa5d3c23d250a"
            ]
        ]
    },
    {
        "id": "98faa5d3c23d250a",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1380,
        "wires": [
            [],
            [
                "885171cba40a3e1b",
                "0e0b8d1bb8b24245"
            ]
        ]
    },
    {
        "id": "b0fb7c7a31ad0e45",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 6';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1380,
        "wires": [
            [
                "6118f5fc6b88dd84"
            ]
        ]
    },
    {
        "id": "98834ed20a05f0c2",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1380,
        "wires": [
            [
                "b0fb7c7a31ad0e45"
            ]
        ]
    },
    {
        "id": "6118f5fc6b88dd84",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1380,
        "wires": [
            [],
            [
                "495e01fa63da1348",
                "877704bbe03240d1"
            ]
        ]
    },
    {
        "id": "495e01fa63da1348",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1380,
        "wires": [
            [
                "0fd74d137fbd07b9",
                "4a1098f986d3cfea"
            ]
        ]
    },
    {
        "id": "877704bbe03240d1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 455",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1340,
        "wires": []
    },
    {
        "id": "35cdc08d978e0a0c",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1480,
        "wires": [
            [],
            [
                "7d25dcf7b452185a",
                "99961146b9698ed9"
            ]
        ]
    },
    {
        "id": "ecfe0ea7c1193c05",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 456",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1440,
        "wires": []
    },
    {
        "id": "7d25dcf7b452185a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1480,
        "wires": [
            [
                "feb903401dbf2c75",
                "06a8103d82310909"
            ]
        ]
    },
    {
        "id": "99961146b9698ed9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 457",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1440,
        "wires": []
    },
    {
        "id": "feb903401dbf2c75",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 458",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "06a8103d82310909",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1480,
        "wires": [
            [
                "d76c6bc7b5c4f6ee"
            ]
        ]
    },
    {
        "id": "d76c6bc7b5c4f6ee",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1480,
        "wires": [
            [],
            [
                "6b51c5adb44d4884"
            ]
        ]
    },
    {
        "id": "6b51c5adb44d4884",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1480,
        "wires": [
            [
                "0590bfa64f919a8b"
            ]
        ]
    },
    {
        "id": "3fc0c214ab972a0e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1480,
        "wires": [
            [
                "22fae7cfd231470a",
                "00067d0b85bf71ac"
            ]
        ]
    },
    {
        "id": "c60d8504d897082a",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 459",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1440,
        "wires": []
    },
    {
        "id": "22fae7cfd231470a",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 460",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1440,
        "wires": []
    },
    {
        "id": "00067d0b85bf71ac",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1480,
        "wires": [
            [
                "23388614634e2e25",
                "e4abacd2bca18ebe"
            ]
        ]
    },
    {
        "id": "23388614634e2e25",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1480,
        "wires": [
            [],
            [
                "ae9c935d7693824e",
                "f4c45754a73e5269"
            ]
        ]
    },
    {
        "id": "e4abacd2bca18ebe",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 461",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ae9c935d7693824e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1480,
        "wires": [
            [
                "eac6c2f19edf83c6",
                "7b331bea9e063339"
            ]
        ]
    },
    {
        "id": "f4c45754a73e5269",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 462",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1440,
        "wires": []
    },
    {
        "id": "eac6c2f19edf83c6",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 463",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1440,
        "wires": []
    },
    {
        "id": "7b331bea9e063339",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1480,
        "wires": [
            [
                "35cdc08d978e0a0c",
                "ecfe0ea7c1193c05"
            ]
        ]
    },
    {
        "id": "80b993c226fb7f70",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 464",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1e1957e86e1383e5",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1480,
        "wires": [
            [
                "221931764de7e2d6"
            ]
        ]
    },
    {
        "id": "221931764de7e2d6",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1480,
        "wires": [
            [],
            [
                "c795a8cdb0092976",
                "121c9c98d67891c6"
            ]
        ]
    },
    {
        "id": "c795a8cdb0092976",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1480,
        "wires": [
            [
                "6c1c55cb297fde8d",
                "a5b8f74dca066150"
            ]
        ]
    },
    {
        "id": "121c9c98d67891c6",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 465",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6c1c55cb297fde8d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 466",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a5b8f74dca066150",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1480,
        "wires": [
            [
                "f509cc4fc08bf8c2"
            ]
        ]
    },
    {
        "id": "f509cc4fc08bf8c2",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1480,
        "wires": [
            [],
            [
                "3fc0c214ab972a0e",
                "c60d8504d897082a"
            ]
        ]
    },
    {
        "id": "75ef834a44bb8e9d",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 7';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1480,
        "wires": [
            [
                "f8bbf6d9c025abd4"
            ]
        ]
    },
    {
        "id": "071714ac6a80ab84",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1480,
        "wires": [
            [
                "75ef834a44bb8e9d"
            ]
        ]
    },
    {
        "id": "f8bbf6d9c025abd4",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1480,
        "wires": [
            [],
            [
                "1205bc1ff9968a38",
                "6af51a029e5623d2"
            ]
        ]
    },
    {
        "id": "1205bc1ff9968a38",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1480,
        "wires": [
            [
                "80b993c226fb7f70",
                "1e1957e86e1383e5"
            ]
        ]
    },
    {
        "id": "6af51a029e5623d2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 467",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c5eef41fcd59ad65",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1580,
        "wires": [
            [],
            [
                "e152a527f87bd663",
                "a521e112a9012b3d"
            ]
        ]
    },
    {
        "id": "ab85394ae40a43b5",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 468",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e152a527f87bd663",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1580,
        "wires": [
            [
                "c85953188081a1c2",
                "36060771662bb390"
            ]
        ]
    },
    {
        "id": "a521e112a9012b3d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 469",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1540,
        "wires": []
    },
    {
        "id": "c85953188081a1c2",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 470",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1520,
        "wires": []
    },
    {
        "id": "36060771662bb390",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Char",
        "func": "let sa = 1800,\n    addresses = 10\n    \nmsg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': sa, 'quantity': addresses } \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1580,
        "wires": [
            [
                "d719ae105f1fd73a"
            ]
        ]
    },
    {
        "id": "d719ae105f1fd73a",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3600,
        "y": 1580,
        "wires": [
            [],
            [
                "03cb1225080165d9"
            ]
        ]
    },
    {
        "id": "03cb1225080165d9",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Process Read",
        "func": "\nlet string = ''\nlet buf = msg.payload.buffer\n\nfor (let i = 0; i < buf.length; i += 2) {\n    string += String.fromCharCode(buf[i + 1]) + String.fromCharCode(buf[i])\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.testResultID = string;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1580,
        "wires": [
            [
                "3ae63d400ed05ff9"
            ]
        ]
    },
    {
        "id": "8731020d87906788",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1580,
        "wires": [
            [
                "a5f8b094fe6904e9",
                "9edefdba6c512d89"
            ]
        ]
    },
    {
        "id": "81525fa88dfc158c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 471",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1540,
        "wires": []
    },
    {
        "id": "a5f8b094fe6904e9",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 472",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1540,
        "wires": []
    },
    {
        "id": "9edefdba6c512d89",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1580,
        "wires": [
            [
                "9d6f0a25379281f3",
                "70aa7bfeb190d9df"
            ]
        ]
    },
    {
        "id": "9d6f0a25379281f3",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1580,
        "wires": [
            [],
            [
                "28a430bcefe1c155",
                "45f1ba2842da20e8"
            ]
        ]
    },
    {
        "id": "70aa7bfeb190d9df",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 473",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1540,
        "wires": []
    },
    {
        "id": "28a430bcefe1c155",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1580,
        "wires": [
            [
                "1ac53627fb61b6db",
                "75f79742dfdf4fa1"
            ]
        ]
    },
    {
        "id": "45f1ba2842da20e8",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 474",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1540,
        "wires": []
    },
    {
        "id": "1ac53627fb61b6db",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 475",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1540,
        "wires": []
    },
    {
        "id": "75f79742dfdf4fa1",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1580,
        "wires": [
            [
                "c5eef41fcd59ad65",
                "ab85394ae40a43b5"
            ]
        ]
    },
    {
        "id": "80c1b04667334153",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 476",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d4214051d14d0836",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1580,
        "wires": [
            [
                "95608cc733aeef2c"
            ]
        ]
    },
    {
        "id": "95608cc733aeef2c",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1580,
        "wires": [
            [],
            [
                "7adf5916f01ec439",
                "537bc0c02ed5e0a4"
            ]
        ]
    },
    {
        "id": "7adf5916f01ec439",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1580,
        "wires": [
            [
                "3fddc5ddb349a6b6",
                "e2af2b0e5abdeb93"
            ]
        ]
    },
    {
        "id": "537bc0c02ed5e0a4",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 477",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1540,
        "wires": []
    },
    {
        "id": "3fddc5ddb349a6b6",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 478",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e2af2b0e5abdeb93",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1580,
        "wires": [
            [
                "4472eb4e34910694"
            ]
        ]
    },
    {
        "id": "4472eb4e34910694",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1580,
        "wires": [
            [],
            [
                "8731020d87906788",
                "81525fa88dfc158c"
            ]
        ]
    },
    {
        "id": "795fb142df03d472",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "msg.machineID = 'ATEKA 8';\n// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1580,
        "wires": [
            [
                "7e97a5f02cbc1060"
            ]
        ]
    },
    {
        "id": "255c08a29403e6f5",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "ATEKA 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1580,
        "wires": [
            [
                "795fb142df03d472"
            ]
        ]
    },
    {
        "id": "7e97a5f02cbc1060",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1580,
        "wires": [
            [],
            [
                "46c31e5d8efec744",
                "8d63f21d65a74c4e"
            ]
        ]
    },
    {
        "id": "46c31e5d8efec744",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\n//Added\nmsg.recipeFileName = charValues[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1580,
        "wires": [
            [
                "80c1b04667334153",
                "d4214051d14d0836"
            ]
        ]
    },
    {
        "id": "8d63f21d65a74c4e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4fd1159c6561f71d",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "40013950c3567b56",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6d85a103456ed82b",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 51",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3300,
        "wires": [
            [
                "4fd1159c6561f71d",
                "264468d6f1809ddc",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "264468d6f1809ddc",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3300,
        "wires": []
    },
    {
        "id": "2cab2646f690e5bc",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "d91a9c96d93230a8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bd12209907dafc58",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 52",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3360,
        "wires": [
            [
                "2cab2646f690e5bc",
                "3e2fe5f2ce1edac6",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "3e2fe5f2ce1edac6",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3360,
        "wires": []
    },
    {
        "id": "85a5b6089cf64a99",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "91ab9af69d6680b0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b90cc74da42b60af",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 53",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3420,
        "wires": [
            [
                "85a5b6089cf64a99",
                "bf3c463a1268faf0",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "bf3c463a1268faf0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3420,
        "wires": []
    },
    {
        "id": "2cda629f2fcec389",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "75dbc07d8ec25bc4",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2080,
        "y": 3480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "894859417035429e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 54",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1955,
        "y": 3480,
        "wires": [
            [
                "2cda629f2fcec389",
                "474fb388f8ad4bf3",
                "e0c981028d3a9f1c"
            ]
        ],
        "l": false
    },
    {
        "id": "474fb388f8ad4bf3",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "ATEKA8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3480,
        "wires": []
    },
    {
        "id": "8284ed276dbc988c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 2820,
        "wires": [
            [
                "878a4d09d4596288",
                "a1b06dd62b6fe31e"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "878a4d09d4596288",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 482",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2780,
        "wires": []
    },
    {
        "id": "a1b06dd62b6fe31e",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "b6265e907b90e448",
        "name": "AtekaLocal",
        "query": "",
        "outField": "payload",
        "x": 2050,
        "y": 2820,
        "wires": [
            [
                "4af6332039f1540d",
                "a520d25c41b69f46"
            ]
        ]
    },
    {
        "id": "a520d25c41b69f46",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2820,
        "wires": [
            [
                "8f21c38fe6b6a368",
                "8284ed276dbc988c"
            ]
        ]
    },
    {
        "id": "4af6332039f1540d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 483",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 2780,
        "wires": []
    },
    {
        "id": "8f21c38fe6b6a368",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 484",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 2780,
        "wires": []
    },
    {
        "id": "63ad2f9d6050d06c",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Turn Read On",
        "info": "",
        "x": 170,
        "y": 2700,
        "wires": []
    },
    {
        "id": "ce3f304b7b3d5f0a",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 2780,
        "wires": [
            [
                "254b9584af06b37e"
            ]
        ]
    },
    {
        "id": "5d5feadb74eb5601",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 2840,
        "wires": [
            [
                "b1ba796a8586b056"
            ]
        ]
    },
    {
        "id": "31aecf59b58ab003",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 2900,
        "wires": [
            [
                "c162b3b99d069217"
            ]
        ]
    },
    {
        "id": "776f173fcc9a5a88",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 2960,
        "wires": [
            [
                "4aeec76d3d56d74f"
            ]
        ]
    },
    {
        "id": "faf5f67622a75af2",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 3020,
        "wires": [
            [
                "0f659671e114f285"
            ]
        ]
    },
    {
        "id": "d1456aebc7c29751",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 3080,
        "wires": [
            [
                "64e5c7b2cad60a17"
            ]
        ]
    },
    {
        "id": "745c537a6e2e7330",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 3140,
        "wires": [
            [
                "7f583471f1e5cb86"
            ]
        ]
    },
    {
        "id": "baa69b13462ae94f",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "PLC 8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 3200,
        "wires": [
            [
                "9e605ac2c1534d68"
            ]
        ]
    },
    {
        "id": "254b9584af06b37e",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 2780,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "b1ba796a8586b056",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 2840,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "c162b3b99d069217",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 2900,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "4aeec76d3d56d74f",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "4f042df482363103",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 2960,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "0f659671e114f285",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "40013950c3567b56",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 3020,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "64e5c7b2cad60a17",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "d91a9c96d93230a8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 3080,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "7f583471f1e5cb86",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "91ab9af69d6680b0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 3140,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "9e605ac2c1534d68",
        "type": "modbus-write",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "75dbc07d8ec25bc4",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 3200,
        "wires": [
            [
                "ef5ff58f03cd3a4e"
            ],
            []
        ]
    },
    {
        "id": "ef5ff58f03cd3a4e",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 485",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2720,
        "wires": []
    },
    {
        "id": "97c83a2e77f090db",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 400,
        "wires": []
    },
    {
        "id": "6b8220d990c56ce1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "38d79a7d94661a2f",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 480,
        "wires": []
    },
    {
        "id": "aec6fe453457ce0d",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 520,
        "wires": []
    },
    {
        "id": "414ff9dd42f2e18c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "6cc85256d8276ca0",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 600,
        "wires": []
    },
    {
        "id": "4dae02cc4956263b",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "b6982996aaab3d43",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 680,
        "wires": []
    },
    {
        "id": "6644313c73b00a95",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "Test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2960,
        "wires": []
    },
    {
        "id": "cc8049e19b1778ec",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 780,
        "wires": [
            [
                "0f3d3362922253e9"
            ]
        ]
    },
    {
        "id": "5cf00c44b734cc93",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4430,
        "y": 780,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "0b055c3b408b9d78",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 880,
        "wires": [
            [
                "675855c391320466"
            ]
        ]
    },
    {
        "id": "93da14c95dc848fe",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 880,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "6d542017d4cb2fe1",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 980,
        "wires": [
            [
                "6fdeb8b0b21153dc"
            ]
        ]
    },
    {
        "id": "58d33065307e4197",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 980,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "3c6d3e5e0fc92527",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1080,
        "wires": [
            [
                "ae83851e8a60f520"
            ]
        ]
    },
    {
        "id": "b01d9b5b3d34e7cc",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1080,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "41645013030da11a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1180,
        "wires": [
            [
                "24ab376b1859aa11"
            ]
        ]
    },
    {
        "id": "bff968000a063f2f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1180,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "d229c28cab56f433",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1280,
        "wires": [
            [
                "6560cbaa2c65a739"
            ]
        ]
    },
    {
        "id": "e2147779da5b553c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1280,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "0ea289b6a50aaad0",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1380,
        "wires": [
            [
                "979323f09ea84188"
            ]
        ]
    },
    {
        "id": "c995a06ad44785dc",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1380,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "0590bfa64f919a8b",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1480,
        "wires": [
            [
                "fce9f224862293f4"
            ]
        ]
    },
    {
        "id": "8d9a473ccd12c65e",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1480,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "3ae63d400ed05ff9",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 120,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1580,
        "wires": [
            [
                "0292054907852a28"
            ]
        ]
    },
    {
        "id": "5dabace951945d7c",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.responseBuffer.buffer.slice(0, 10), //0 Char Recipe ID\n        ],\n    floatBuf = [], //0 Float Par Count ,\n    charBufRegLength = [5],\n    floatBufRegLength = [],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.operator = charValues[0]\nflow.set('testResults', testResults);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4390,
        "y": 1580,
        "wires": [
            [
                "2dbbc018f192ddda"
            ]
        ]
    },
    {
        "id": "675855c391320466",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 880,
        "wires": [
            [
                "93da14c95dc848fe"
            ],
            []
        ]
    },
    {
        "id": "6fdeb8b0b21153dc",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 980,
        "wires": [
            [
                "58d33065307e4197"
            ],
            []
        ]
    },
    {
        "id": "ae83851e8a60f520",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1080,
        "wires": [
            [
                "b01d9b5b3d34e7cc"
            ],
            []
        ]
    },
    {
        "id": "24ab376b1859aa11",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1180,
        "wires": [
            [
                "bff968000a063f2f"
            ],
            []
        ]
    },
    {
        "id": "6560cbaa2c65a739",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka5",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "40013950c3567b56",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1280,
        "wires": [
            [
                "e2147779da5b553c"
            ],
            []
        ]
    },
    {
        "id": "979323f09ea84188",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka6",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "d91a9c96d93230a8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1380,
        "wires": [
            [
                "c995a06ad44785dc"
            ],
            []
        ]
    },
    {
        "id": "fce9f224862293f4",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka7",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "91ab9af69d6680b0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1480,
        "wires": [
            [
                "8d9a473ccd12c65e"
            ],
            []
        ]
    },
    {
        "id": "0292054907852a28",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "Ateka8",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "75dbc07d8ec25bc4",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4220,
        "y": 1580,
        "wires": [
            [
                "5dabace951945d7c"
            ],
            []
        ]
    },
    {
        "id": "0f3d3362922253e9",
        "type": "modbus-flex-getter",
        "z": "30b839ab81bb1134",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "862fab04f4d863e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4250,
        "y": 780,
        "wires": [
            [
                "5cf00c44b734cc93"
            ],
            []
        ]
    },
    {
        "id": "6bbf5f7e6eac1302",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Set payload",
        "func": "let results = flow.get('testResults')\nlet timestamp = new Date().toISOString()\n\n// Set error message\nlet msgError = {\n    payload: `Missing Recipe for ${results.recipeFileName}`\n}\nnode.send([msgError])\n\n// Set the INSERT query for the full test\nlet fullTestTable = '[Defy].[dbo].[AtekaTestResults]'\nlet fullTestHeaders = '(Test_Result_ID, Result, Time_Stamp, Operator)'\nlet fullTestPassFail = results.coilFullTest ? 'PASS' : 'FAIL'\nlet fullTestValues = `(${results.testResultID}, '${fullTestPassFail}', '${timestamp}', '${results.operator}')`\nlet firstInsert = `INSERT INTO ${fullTestTable} ${fullTestHeaders} VALUES ${fullTestValues}`\n\nnode.send([, { // Send out the second output\n    payload: firstInsert,\n    topic: 'firstInsert',\n}])\n\n//// Step results ////\nlet testResultID = results.testResultID // Full ID of test\nlet parCount = results.parCount // Count of extra parameters\nlet topicCounter = 0; // Used for the buffer\nlet stepCounter = 1;\nlet headers = [ // Step ID gets done by MSQL\n        \"Test_Result_ID\",\n        \"Step_Number\",\n        \"Measurement\",\n        \"Result\",\n        \"Reason\",\n        'Time_Stamp'\n    ]\nlet tableNumber = 0; // Used to write to specific table\nswitch (msg.machineID) {\n    case 'ATEKA 1':\n        tableNumber = 1\n        break;\n    case 'ATEKA 2':\n        tableNumber = 2\n        break;\n    case \"ATEKA 3\":\n        tableNumber = 3\n        break;\n    case 'ATEKA 4':\n        tableNumber = 4\n        break;\n    case 'ATEKA 5':\n        tableNumber = 5\n        break;\n    case 'ATEKA 6':\n        tableNumber = 6\n        break;\n    case 'ATEKA 7':\n        tableNumber = 7\n        break;\n    case 'ATEKA 8':\n        tableNumber = 8\n        break;\n    default:\n        node.warn(msg.machineID)\n        node.warn('We do the bee boo bee babp')\n        break;\n}\nlet tableName = ''\n//REVERT\ntableName = '[ATEKA_DB].[dbo].[AtekaStepResults' + tableNumber + '] '\n//tableName = '[Defy].[dbo].[AtekaStepResults' + tableNumber + '] '\n\n// Round the values\n// Round value and min max values to 4 decimal points \nfor (let i = 0; i < 5; i++) {\n    results.basicResults[i] = results.basicResults[i].toFixed(4)\n}\nfor (let i = 0; i < parCount + 1; i++) {\n    results.parameterResults[i] = results.parameterResults[i].toFixed(4)\n    results.parameterVoltages[i] = results.parameterVoltages[i].toFixed(4)\n}\n\n// Basic tests\nfor (let i = 0; i < 5; i++) {\n    let stepResult = results.coilBasic[i] ? 'PASS' : 'FAIL'\n    let sendMsg = {\n        topic : topicCounter++,\n        payload: `INSERT INTO ${tableName} (${headers}) VALUES (${testResultID}, ${stepCounter++}, ${results.basicResults[i]}, '${stepResult}', 'ERROR recipe ${results.recipeFileName} not in Node Red', '${timestamp}') `\n    }\n    node.send([, sendMsg])\n}\n\n// Parameter tests\nfor (let i = 0; i < parCount + 1; i++) {\n    let stepResult = results.coilPar[i] ? 'PASS' : 'FAIL'\n    let sendMsg = {\n        topic: topicCounter++,\n        payload: `INSERT INTO ${tableName} (${headers}) VALUES (${testResultID}, ${stepCounter++}, ${results.parameterResults[i]}, '${stepResult}', 'ERROR recipe ${results.recipeFileName} not in Node Red', '${timestamp}') `\n    }\n    node.send([, sendMsg])\n}\n\nmsg.lineFlag = 'sqlHandshake'\nreturn [ , ,msg]; // Just returning to switch the plc bit off and coarry on reading",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2680,
        "wires": [
            [
                "5805a72fe1a96a3c"
            ],
            [
                "a337f5a7d3642bae",
                "601a319a49c0aa47"
            ],
            [
                "93254757d63cbba6",
                "6644313c73b00a95"
            ]
        ]
    },
    {
        "id": "a337f5a7d3642bae",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "TESTING",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 2780,
        "wires": []
    },
    {
        "id": "177ba660bfcb731c",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 3880,
        "wires": [
            [
                "96581afa71053a4f"
            ]
        ]
    },
    {
        "id": "96581afa71053a4f",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Get tables",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3880,
        "wires": [
            [
                "8dda82e4c6659abc"
            ]
        ]
    },
    {
        "id": "8dda82e4c6659abc",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "7cf223fe452c25b2",
        "name": "",
        "query": "USE [ATEKA_DB]; --Replace with your actual database name\n\nSELECT TABLE_NAME\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE';",
        "outField": "payload",
        "x": 460,
        "y": 3880,
        "wires": [
            [
                "ccfd43d0218c84f8"
            ]
        ]
    },
    {
        "id": "ccfd43d0218c84f8",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "function 58",
        "func": "let text = ''\nfor (let obj in msg.payload) {\n    text += msg.payload[obj].TABLE_NAME + '\\n'\n}\nmsg.payload = text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3880,
        "wires": [
            [
                "7fb1d0cae379145c",
                "9fa9d1e977de5e00"
            ]
        ]
    },
    {
        "id": "7fb1d0cae379145c",
        "type": "file",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Database/TableNames.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1070,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "9fa9d1e977de5e00",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 490",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 3820,
        "wires": []
    },
    {
        "id": "588b1314fefc9fbd",
        "type": "comment",
        "z": "30b839ab81bb1134",
        "name": "Query Database structure",
        "info": "",
        "x": 150,
        "y": 3820,
        "wires": []
    },
    {
        "id": "362f16e85072fd64",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 3940,
        "wires": [
            [
                "60344bf70e655ad7"
            ]
        ]
    },
    {
        "id": "60344bf70e655ad7",
        "type": "file in",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Database/TableNames.txt",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 3940,
        "wires": [
            [
                "c880cbf6e2456e45",
                "2aefe170bda4a66a"
            ]
        ]
    },
    {
        "id": "c880cbf6e2456e45",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 492",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 4020,
        "wires": []
    },
    {
        "id": "2aefe170bda4a66a",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Send Queries",
        "func": "msg.bufferID = msg.payload\nmsg.payload = `\nUSE [ATEKA_DB]; -- Replace with your actual database name\n\n-- Replace 'YourTableName' with the actual name of your table\nDECLARE @tableName NVARCHAR(128) = ${msg.payload};\n\nSELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = @tableName;\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3940,
        "wires": [
            [
                "3b9c332dd4d33397",
                "38635c4a78aff483"
            ]
        ]
    },
    {
        "id": "3b9c332dd4d33397",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  20) {\n    return null;\n}*/\n\n// initialize context variables\nlet buffer = context.get('buffer') || []; //The buffer that contains the whole incomming message\nlet ID = context.get('ID') || [];       // A unique identifier of the incomming message, which is indexed and spliced in unison with buffer\n//Indicator for whether the buffer is waiting for a message to return or not\nlet waiting = context.get('waiting');\nif (waiting == undefined) {\n    waiting = false; //Set the waiting or the current instance to false\n    context.set('waiting', true); // Sets the next message that'll be recieved to wait\n}\n\n// Set paramarams\n//Sets the trigger msg member name and what the value of it is \nlet msgTriggerName = 'lineFlag',\n    msgTriggerValue = 'fileReading',\n    incommingUniqueIDmsgMember = 'bufferID',\n    outgoingUniqueIDmsgMember = 'bufferID'\n\n// Check for trigger\nif (msg[msgTriggerName] == msgTriggerValue) {\n    let index = ID.indexOf(msg[incommingUniqueIDmsgMember]);\n    if (index != -1) { // Looking for the returned message in the context variables\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n\n    // Sets the next msg to go out (FIFO)\n    msg = {\n        ...buffer[0]\n    }\n    msg[outgoingUniqueIDmsgMember] = ID[0];\n\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n    } else {\n        msg[msgTriggerName] = msgTriggerValue\n        msg.bufferCount = ID.length\n        return msg;\n    }\n} else {\n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg[incommingUniqueIDmsgMember]);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n        msg[msgTriggerName] = msgTriggerValue\n        msg.bufferCount = ID.length\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 3940,
        "wires": [
            [
                "68d08317c69576a0"
            ]
        ]
    },
    {
        "id": "38635c4a78aff483",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 493",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 4020,
        "wires": []
    },
    {
        "id": "12cf8896581cc862",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "7cf223fe452c25b2",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1470,
        "y": 3940,
        "wires": [
            [
                "b713700d2f5d5cd1",
                "3b9c332dd4d33397",
                "21aa35e0d3c74172"
            ]
        ]
    },
    {
        "id": "68d08317c69576a0",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Get Table Structure",
        "func": "msg.payload = `\nUSE [ATEKA_DB]; -- Replace with your actual database name\n\n-- Replace 'YourTableName' with the actual name of your table\nDECLARE @tableName NVARCHAR(128) = 'AtekaTestResults';\n\nSELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = @tableName;\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 3940,
        "wires": [
            [
                "12cf8896581cc862"
            ]
        ]
    },
    {
        "id": "b713700d2f5d5cd1",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 491",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 3900,
        "wires": []
    },
    {
        "id": "21aa35e0d3c74172",
        "type": "function",
        "z": "30b839ab81bb1134",
        "name": "Write Table Descriptions",
        "func": "// Make sure payload is an array and not empty\ntry {\n    if (msg.payload.length === 0) {\n        //Array is empty\n        node.warn('The table is empty')\n        return;\n    }\n} catch (error) {\n    node.error('Unexpected msg.payload value', msg)\n    return;\n}\n\n// Assign variables\n// SET\nmsg.filename = 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Database/' + msg.bufferID + '.csv'\n\nlet headers = Object.keys(msg.payload[0]) // The assumption is that every entry will have the same structure and order to the object\nlet text = ''\n\n// Assign headers to text\nfor (let i = 0; i < headers.length; i++) {\n    text += headers[i] + ', '\n}\n\n// Assign values\nfor (const item of msg.payload) {\n    for (const key in item) {\n        text += item[key] + ', '\n    }\n    text += '\\n'\n}\nmsg.payload = text\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3940,
        "wires": [
            [
                "5d1c7450c0a9a77c",
                "d434d6fff77a1cfb"
            ]
        ]
    },
    {
        "id": "5d1c7450c0a9a77c",
        "type": "file",
        "z": "30b839ab81bb1134",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1880,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "d434d6fff77a1cfb",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 494",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 4000,
        "wires": []
    },
    {
        "id": "d86a4cefd06e3d78",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "7cf223fe452c25b2",
        "name": "",
        "query": "USE [ATEKA_DB]; -- Replace with your actual database name\n\n-- Replace 'YourTableName' with the actual name of your table\nDECLARE @tableName NVARCHAR(128) = 'AtekaTestResults';\n\nSELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = @tableName;",
        "outField": "payload",
        "x": 300,
        "y": 4120,
        "wires": [
            [
                "d905dd68d950bc1c"
            ]
        ]
    },
    {
        "id": "586ade26502b354d",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4120,
        "wires": [
            [
                "d86a4cefd06e3d78"
            ]
        ]
    },
    {
        "id": "d905dd68d950bc1c",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 495",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 4120,
        "wires": []
    },
    {
        "id": "75e8d0b4af4fd836",
        "type": "MSSQL",
        "z": "30b839ab81bb1134",
        "mssqlCN": "7cf223fe452c25b2",
        "name": "",
        "query": "USE [ATEKA_DB]; -- Replace with your actual database name\n\n-- Replace 'YourTableName' with the actual name of your table\nDECLARE @tableName NVARCHAR(128) = 'AtekaStepResults1';\n\nSELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = @tableName;",
        "outField": "payload",
        "x": 300,
        "y": 4180,
        "wires": [
            [
                "75627468885bcbda"
            ]
        ]
    },
    {
        "id": "4caba662701b7c99",
        "type": "inject",
        "z": "30b839ab81bb1134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4180,
        "wires": [
            [
                "75e8d0b4af4fd836"
            ]
        ]
    },
    {
        "id": "75627468885bcbda",
        "type": "debug",
        "z": "30b839ab81bb1134",
        "name": "debug 496",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 4180,
        "wires": []
    },
    {
        "id": "5a41fe6fa121ed69",
        "type": "ui_template",
        "z": "bdf1045c1ff841f7",
        "group": "",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>\n.login{\n    padding: 18px;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 280,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "b3c842354b5f1494",
        "type": "comment",
        "z": "bdf1045c1ff841f7",
        "name": "Settings page",
        "info": "",
        "x": 90,
        "y": 1240,
        "wires": []
    },
    {
        "id": "01631fc6662cb783",
        "type": "ui_text",
        "z": "bdf1045c1ff841f7",
        "group": "9ba12de27dc123ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "status",
        "x": 430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "cf3de6ddeb09bcaa",
        "type": "ui_form",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "label": "",
        "group": "9ba12de27dc123ba",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat Password",
                "value": "password2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password1": "",
            "password2": ""
        },
        "payload": "",
        "submit": "REGISTER",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "31803c8e255b54ad",
                "a83013da9fcef3b5"
            ]
        ]
    },
    {
        "id": "31803c8e255b54ad",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a83013da9fcef3b5",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Checks",
        "func": "if (flow.get(\"usernames\").includes(msg.payload.username)) {\n    let status = {\n        payload: \"Username already exists\"\n    }\n    return [, status];\n} else if (msg.payload.password1 == msg.payload.password2) {\n    msg = {\n        lineFlag: 'registerFormInput',\n        data : {\n            username: msg.payload.username,\n            password: msg.payload.password1\n        }\n    };\n    let status = {payload: \"\"};\n    return [msg, status];\n} else {\n    let status = {\n        payload: \"The passwords do not match\"\n    }\n    return [,status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1420,
        "wires": [
            [
                "d2274947333b3799",
                "f45beebf04185b1b"
            ],
            [
                "01631fc6662cb783",
                "308f89dc1aadadff"
            ]
        ]
    },
    {
        "id": "d2274947333b3799",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1bb8dda8c0a694ee",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "Set Par",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "482d26429451f93d",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1400,
        "wires": [
            [
                "96fa2931530e88be"
            ]
        ]
    },
    {
        "id": "5d09d946ffb6bf9d",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "B CSV data (NE)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bc58f11783132a59",
        "type": "switch",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "4ee89395ced07717"
            ],
            [
                "11659188af2cffb1"
            ]
        ]
    },
    {
        "id": "d5b3fb261cab2a63",
        "type": "fs-file-lister",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 860,
        "y": 1420,
        "wires": [
            [
                "bc58f11783132a59",
                "493ef425576019d1"
            ]
        ]
    },
    {
        "id": "37d0ead948e6cd65",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1440,
        "wires": [
            [
                "96fa2931530e88be"
            ]
        ]
    },
    {
        "id": "b8cfcb2782f92b36",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "B CSV data (E)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1500,
        "wires": []
    },
    {
        "id": "4ee89395ced07717",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1400,
        "wires": [
            [
                "482d26429451f93d",
                "5d09d946ffb6bf9d"
            ]
        ]
    },
    {
        "id": "11659188af2cffb1",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1440,
        "wires": [
            [
                "37d0ead948e6cd65",
                "b8cfcb2782f92b36"
            ]
        ]
    },
    {
        "id": "493ef425576019d1",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1500,
        "wires": []
    },
    {
        "id": "3e24d569093311cc",
        "type": "file",
        "z": "bdf1045c1ff841f7",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1790,
        "y": 1420,
        "wires": [
            [
                "c871261cbf2f92ad",
                "8acd6daf9ec1e0b6"
            ]
        ]
    },
    {
        "id": "97372858b1731c7e",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Par (write for csv)",
        "func": "//msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1420,
        "wires": [
            [
                "3e24d569093311cc",
                "dcf1a61d16972394"
            ]
        ]
    },
    {
        "id": "dcf1a61d16972394",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "File write data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c871261cbf2f92ad",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "Final Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cec8cee588c68e45",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Config FL Set Par",
        "func": "\n//move\nmsg.data.ID = flow.get('passwords').length + 1\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\n\n//Set the parameters needed for the write CSV function\nmsg.columns = \"ID, username, password\";\nmsg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "1bb8dda8c0a694ee",
                "d5b3fb261cab2a63"
            ]
        ]
    },
    {
        "id": "308f89dc1aadadff",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1520,
        "wires": []
    },
    {
        "id": "44a466b95a0a95db",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "view user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 2720,
        "wires": [
            [
                "a557f308a0f897e5"
            ]
        ]
    },
    {
        "id": "a557f308a0f897e5",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Read flow variables",
        "func": "msg.payload = {\n    usernames: flow.get(\"usernames\"),\n    passwords: flow.get(\"passwords\")\n}\n\n//Del: testing\nlet username = [];\nusername = flow.get(\"usernames\");\nmsg.check = {\n    check: username.indexOf(\"gio\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2720,
        "wires": [
            [
                "a27f94f338106e03"
            ]
        ]
    },
    {
        "id": "a27f94f338106e03",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 2680,
        "wires": []
    },
    {
        "id": "c0b2486d19a8b976",
        "type": "comment",
        "z": "bdf1045c1ff841f7",
        "name": "Registration Form",
        "info": "Writes to csv",
        "x": 130,
        "y": 1320,
        "wires": []
    },
    {
        "id": "98bc97b583376f6c",
        "type": "ui_form",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "label": "",
        "group": "9e76e570168f2dca",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "New Password",
                "value": "newPassword1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat New Password",
                "value": "newPassword2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "newPassword1": "",
            "newPassword2": ""
        },
        "payload": "",
        "submit": "UPDATE",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "7137d67845c73471",
                "b999256acddea7a2"
            ]
        ]
    },
    {
        "id": "7137d67845c73471",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Checks",
        "func": "let usernames = flow.get(\"usernames\"),\n    passwords = flow.get(\"passwords\"),\n    index = usernames.indexOf(msg.payload.username);\n\nif (!usernames.includes(msg.payload.username)) { //Already checked with the declaration of index\n    let status = {\n        payload: \"Username does not exist\"\n    }\n    return [, status];\n} else if (msg.payload.newPassword1 == msg.payload.newPassword2) { //checks that the new passwords are the same\n        passwords[index] = msg.payload.newPassword1;\n        msg.operation = \"update\"\n        msg.newData = {\n            username: msg.payload.username,\n            password: msg.payload.newPassword1\n        }\n        msg.lineFlag = \"updateFormInput\";\n        return [msg, ];\n} else {\n    let status = { // When Password1 doesn't match Password2\n        payload: \"Passwords do not match\"\n    };\n    return [, status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1760,
        "wires": [
            [
                "321d25714f1a70cb",
                "99cc8372a43f259f"
            ],
            [
                "a2c2308b0c66bce2"
            ]
        ]
    },
    {
        "id": "a2c2308b0c66bce2",
        "type": "ui_text",
        "z": "bdf1045c1ff841f7",
        "group": "9e76e570168f2dca",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 1820,
        "wires": []
    },
    {
        "id": "95892b40a7a858ac",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 270,
        "y": 1480,
        "wires": [
            [
                "01631fc6662cb783"
            ]
        ]
    },
    {
        "id": "11e9663921c2ed78",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 330,
        "y": 1820,
        "wires": [
            [
                "a2c2308b0c66bce2"
            ]
        ]
    },
    {
        "id": "321d25714f1a70cb",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2565d271c1755cbe",
        "type": "comment",
        "z": "bdf1045c1ff841f7",
        "name": "Update Password Form",
        "info": "",
        "x": 160,
        "y": 1660,
        "wires": []
    },
    {
        "id": "128f14c053734af0",
        "type": "ui_table",
        "z": "bdf1045c1ff841f7",
        "group": "9a5680e46e5f9771",
        "name": "",
        "order": 1,
        "width": 10,
        "height": 6,
        "columns": [
            {
                "field": "ID",
                "title": "ID",
                "width": "10%",
                "align": "center",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "username",
                "title": "Username",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "password",
                "title": "",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 980,
        "y": 1000,
        "wires": []
    },
    {
        "id": "643534a2ce573416",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "d364ae973c79f391"
            ]
        ]
    },
    {
        "id": "d364ae973c79f391",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Config Read File",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1000,
        "wires": [
            [
                "1c8bac71e5dea342"
            ]
        ]
    },
    {
        "id": "1c8bac71e5dea342",
        "type": "file in",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "28bf0cac40c00e10"
            ]
        ]
    },
    {
        "id": "28bf0cac40c00e10",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 1000,
        "wires": [
            [
                "5db87b6f646d89a8",
                "dd713f2937ac9a80"
            ]
        ]
    },
    {
        "id": "5db87b6f646d89a8",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 241",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 960,
        "wires": []
    },
    {
        "id": "b999256acddea7a2",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1700,
        "wires": []
    },
    {
        "id": "77b3ec42bc8517f6",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "Load user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2480,
        "wires": [
            [
                "bf5c40df4defcfab"
            ]
        ]
    },
    {
        "id": "bf5c40df4defcfab",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Par (read file)",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nmsg.columns = \"ID, username, password\";\nmsg.payload = {\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2480,
        "wires": [
            [
                "5040b473c2bead32"
            ]
        ]
    },
    {
        "id": "de9293903cc78f3a",
        "type": "file in",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 2540,
        "wires": [
            [
                "ad1273dae78b21a4",
                "ade592701d9d4f66"
            ]
        ]
    },
    {
        "id": "ad1273dae78b21a4",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1010,
        "y": 2540,
        "wires": [
            [
                "460076ab1f7256f6",
                "de8e602791cd4e5f"
            ]
        ]
    },
    {
        "id": "460076ab1f7256f6",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 2500,
        "wires": []
    },
    {
        "id": "ade592701d9d4f66",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2500,
        "wires": []
    },
    {
        "id": "de8e602791cd4e5f",
        "type": "join",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1150,
        "y": 2540,
        "wires": [
            [
                "67ed8555366ded5c",
                "8b3832625408cf8d"
            ]
        ]
    },
    {
        "id": "67ed8555366ded5c",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2500,
        "wires": []
    },
    {
        "id": "8b3832625408cf8d",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Flow",
        "func": "let data = msg.payload,\n    usernames = [],\n    passwords = [];\nfor (let i = 0; i < data.length; i++) {\n    //Set\n    usernames.push(data[i].username);\n    passwords.push(data[i].password);\n}\nflow.set(\"usernames\", usernames);\nflow.set(\"passwords\", passwords);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2540,
        "wires": [
            [
                "f73c46d6635e2957",
                "04579462e3837c45"
            ]
        ]
    },
    {
        "id": "f73c46d6635e2957",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2580,
        "wires": []
    },
    {
        "id": "1ee38a4ef00f4408",
        "type": "comment",
        "z": "bdf1045c1ff841f7",
        "name": "Load Login Credentials",
        "info": "CSV Line:\n• Column headers are hard coded in Set Flow\n",
        "x": 140,
        "y": 2400,
        "wires": []
    },
    {
        "id": "6860d2f6d82a6365",
        "type": "ui_button",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "group": "9a5680e46e5f9771",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "REFRESH",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "indent",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 140,
        "y": 1080,
        "wires": [
            [
                "d364ae973c79f391"
            ]
        ]
    },
    {
        "id": "dd713f2937ac9a80",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Refresher",
        "func": "node.send({payload: []});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "128f14c053734af0"
            ]
        ]
    },
    {
        "id": "5040b473c2bead32",
        "type": "fs-file-lister",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 560,
        "y": 2480,
        "wires": [
            [
                "ce242418fac48d6a"
            ]
        ]
    },
    {
        "id": "ce242418fac48d6a",
        "type": "switch",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 2480,
        "wires": [
            [
                "24c93e6c1afcbf1f",
                "a646a0180ed84d5d"
            ],
            [
                "de9293903cc78f3a",
                "7024c7119f7b3eb1"
            ]
        ]
    },
    {
        "id": "f45beebf04185b1b",
        "type": "link out",
        "z": "bdf1045c1ff841f7",
        "name": "Registration form out",
        "mode": "link",
        "links": [
            "07c0da685bc77a1b"
        ],
        "x": 435,
        "y": 1400,
        "wires": []
    },
    {
        "id": "07c0da685bc77a1b",
        "type": "link in",
        "z": "bdf1045c1ff841f7",
        "name": "Load Credentials in",
        "links": [
            "f45beebf04185b1b",
            "d45d7747b7b68e28",
            "4dde9cf8be1b0f8a"
        ],
        "x": 215,
        "y": 2540,
        "wires": [
            [
                "bf5c40df4defcfab"
            ]
        ]
    },
    {
        "id": "77cda1f9677f16e4",
        "type": "link out",
        "z": "bdf1045c1ff841f7",
        "name": "Load Credentials out",
        "mode": "link",
        "links": [
            "4e395e6bc23dcea7"
        ],
        "x": 1575,
        "y": 2460,
        "wires": []
    },
    {
        "id": "4e395e6bc23dcea7",
        "type": "link in",
        "z": "bdf1045c1ff841f7",
        "name": "Registration Form in",
        "links": [
            "77cda1f9677f16e4"
        ],
        "x": 525,
        "y": 1480,
        "wires": [
            [
                "cec8cee588c68e45"
            ]
        ]
    },
    {
        "id": "d44af37fb920e11a",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Check",
        "func": "if (msg.lineFlag == 'registerFormInput') {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2460,
        "wires": [
            [
                "77cda1f9677f16e4",
                "cc78ba42067378a2"
            ]
        ]
    },
    {
        "id": "5f4d75ecc6e1e7d7",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 243",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2380,
        "wires": []
    },
    {
        "id": "a646a0180ed84d5d",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 244",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2400,
        "wires": []
    },
    {
        "id": "7024c7119f7b3eb1",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2620,
        "wires": []
    },
    {
        "id": "cc78ba42067378a2",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2400,
        "wires": []
    },
    {
        "id": "2e2ccbc2c13ab6e2",
        "type": "file in",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1060,
        "y": 1820,
        "wires": [
            [
                "0dd4409823d5a3ba",
                "e873cb06a0f4cbe5"
            ]
        ]
    },
    {
        "id": "0dd4409823d5a3ba",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1190,
        "y": 1820,
        "wires": [
            [
                "d6190914fb714331",
                "60c2efed95aa77fb"
            ]
        ]
    },
    {
        "id": "d6190914fb714331",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 393",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e873cb06a0f4cbe5",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 394",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1780,
        "wires": []
    },
    {
        "id": "60c2efed95aa77fb",
        "type": "join",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1330,
        "y": 1820,
        "wires": [
            [
                "8da3eea8ed8b695e",
                "782142a9fe6acb10"
            ]
        ]
    },
    {
        "id": "8da3eea8ed8b695e",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 395",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1780,
        "wires": []
    },
    {
        "id": "782142a9fe6acb10",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Flow",
        "func": "let data = msg.payload,\n    usernames = [],\n    passwords = [];\nfor (let i = 0; i < data.length; i++) {\n    //Set\n    usernames.push(data[i].username);\n    passwords.push(data[i].password);\n}\nflow.set(\"usernames\", usernames);\nflow.set(\"passwords\", passwords);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1820,
        "wires": [
            [
                "f2a1b6f83c60b183",
                "ae3a9424c337e9e1"
            ]
        ]
    },
    {
        "id": "f2a1b6f83c60b183",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 396",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1780,
        "wires": []
    },
    {
        "id": "50d1625bae8b56fc",
        "type": "inject",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"username\":\"Paul\",\"newPassword1\":\"1971\",\"newPassword2\":\"1971\"}",
        "payloadType": "json",
        "x": 140,
        "y": 1840,
        "wires": [
            [
                "7137d67845c73471"
            ]
        ]
    },
    {
        "id": "99cc8372a43f259f",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Par (read file)",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nmsg.columns = \"ID, username, password\";\nmsg.payload = {\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1760,
        "wires": [
            [
                "7ea51d459c7fd1c3",
                "29a2c890ebf4a524"
            ]
        ]
    },
    {
        "id": "7ea51d459c7fd1c3",
        "type": "fs-file-lister",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 740,
        "y": 1760,
        "wires": [
            [
                "8aa8e2dae8b38a1d"
            ]
        ]
    },
    {
        "id": "8aa8e2dae8b38a1d",
        "type": "switch",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1760,
        "wires": [
            [],
            [
                "2e2ccbc2c13ab6e2"
            ]
        ]
    },
    {
        "id": "ae3a9424c337e9e1",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Write",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename')\nif (msg.operation == 'update') {\n    msg.payload.forEach(function(element) {\n        if (element.username == msg.newData.username) {\n            element.username = msg.newData.username,\n            element.password = msg.newData.password\n        }\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1820,
        "wires": [
            [
                "06f877e9838a5cb9"
            ]
        ]
    },
    {
        "id": "ad71f5b7cd3bd8a3",
        "type": "file",
        "z": "bdf1045c1ff841f7",
        "name": "Write credentials",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1950,
        "y": 1820,
        "wires": [
            [
                "8392ef47cd01b663",
                "4dde9cf8be1b0f8a"
            ]
        ]
    },
    {
        "id": "8392ef47cd01b663",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 397",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1760,
        "wires": []
    },
    {
        "id": "06f877e9838a5cb9",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1790,
        "y": 1820,
        "wires": [
            [
                "ad71f5b7cd3bd8a3"
            ]
        ]
    },
    {
        "id": "29a2c890ebf4a524",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 398",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b067938d1b5996e8",
        "type": "comment",
        "z": "bdf1045c1ff841f7",
        "name": "Delete",
        "info": "",
        "x": 110,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2fd89050afaf80cc",
        "type": "ui_form",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "label": "",
        "group": "a232cc5d4e2fbc31",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": ""
        },
        "payload": "",
        "submit": "DELETE",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 150,
        "y": 2100,
        "wires": [
            [
                "a6c0140f749bd77e",
                "b373f5e4c7992579"
            ]
        ]
    },
    {
        "id": "643904b83b389377",
        "type": "file in",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1460,
        "y": 2120,
        "wires": [
            [
                "2d0dcdd6d936ebc4",
                "19585fb06ebf40cc"
            ]
        ]
    },
    {
        "id": "2d0dcdd6d936ebc4",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1590,
        "y": 2120,
        "wires": [
            [
                "a4e1031b135129db",
                "7c15a4ab1c71ced3"
            ]
        ]
    },
    {
        "id": "a4e1031b135129db",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 399",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 2080,
        "wires": []
    },
    {
        "id": "19585fb06ebf40cc",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 400",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 2080,
        "wires": []
    },
    {
        "id": "7c15a4ab1c71ced3",
        "type": "join",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1730,
        "y": 2120,
        "wires": [
            [
                "55e9d366a183688a",
                "1f76eafa14a272e0"
            ]
        ]
    },
    {
        "id": "55e9d366a183688a",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 401",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 2080,
        "wires": []
    },
    {
        "id": "1f76eafa14a272e0",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Flow",
        "func": "let data = msg.payload,\n    usernames = [],\n    passwords = [];\nfor (let i = 0; i < data.length; i++) {\n    //Set\n    usernames.push(data[i].username);\n    passwords.push(data[i].password);\n}\nflow.set(\"usernames\", usernames);\nflow.set(\"passwords\", passwords);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2120,
        "wires": [
            [
                "8b2c5fea35a1cfe7",
                "d2a45ac7e93e9119"
            ]
        ]
    },
    {
        "id": "8b2c5fea35a1cfe7",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 402",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 2080,
        "wires": []
    },
    {
        "id": "d913336364507e07",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Par (read file)",
        "func": "if (msg.payload == 'OK') {\n    msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\n    msg.columns = \"ID, username, password\";\n    msg.payload = {\n        start: global.get('userCredentialsLocation'),\n        pattern: global.get('userCredentialsFilename')\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2060,
        "wires": [
            [
                "89f77588f6ffbc88",
                "f578240b93a23fbc"
            ]
        ]
    },
    {
        "id": "89f77588f6ffbc88",
        "type": "fs-file-lister",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 1140,
        "y": 2060,
        "wires": [
            [
                "5f33376b777be9f8"
            ]
        ]
    },
    {
        "id": "5f33376b777be9f8",
        "type": "switch",
        "z": "bdf1045c1ff841f7",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 2060,
        "wires": [
            [],
            [
                "643904b83b389377"
            ]
        ]
    },
    {
        "id": "d2a45ac7e93e9119",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Set Write",
        "func": "//config write for csv\nmsg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename')\nlet updatedCredentials = []\nif (msg.operation == 'delete') {\n    msg.payload = msg.payload.filter((user) => user.username != msg.newData.username);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2120,
        "wires": [
            [
                "5b089b0b7734f05e"
            ]
        ]
    },
    {
        "id": "ed7b01527ca21db5",
        "type": "file",
        "z": "bdf1045c1ff841f7",
        "name": "Write credentials",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2350,
        "y": 2120,
        "wires": [
            [
                "9af88781121c9e77",
                "d45d7747b7b68e28"
            ]
        ]
    },
    {
        "id": "5b089b0b7734f05e",
        "type": "csv",
        "z": "bdf1045c1ff841f7",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2190,
        "y": 2120,
        "wires": [
            [
                "ed7b01527ca21db5"
            ]
        ]
    },
    {
        "id": "f578240b93a23fbc",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 403",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "a6c0140f749bd77e",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Checks",
        "func": "let usernames = flow.get(\"usernames\"),\n    index = usernames.indexOf(msg.payload.username);\n\nif (!usernames.includes(msg.payload.username)) { //Already checked with the declaration of index\n    let status = {\n        payload: \"Username does not exist\"\n    }\n    return [, status];\n} else { //checks that the new passwords are the same\n        msg.operation = \"delete\"\n        msg.newData = {\n            username: msg.payload.username,\n            index: index\n        }\n        msg.lineFlag = \"deleteFormInput\";\n        return [msg,{payload: \"\"} ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2100,
        "wires": [
            [
                "28f1f937cadda2b8",
                "f4d2009c826d7a0c"
            ],
            [
                "ddfc7b8285f0e35a",
                "4f252f210d2c8a15"
            ]
        ]
    },
    {
        "id": "28f1f937cadda2b8",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 405",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 2000,
        "wires": []
    },
    {
        "id": "ddfc7b8285f0e35a",
        "type": "ui_text",
        "z": "bdf1045c1ff841f7",
        "group": "a232cc5d4e2fbc31",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "status",
        "x": 470,
        "y": 2140,
        "wires": []
    },
    {
        "id": "4f252f210d2c8a15",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 406",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 2220,
        "wires": []
    },
    {
        "id": "7a26542ee42dbf93",
        "type": "ui_toast",
        "z": "bdf1045c1ff841f7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "CANCEL",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 710,
        "y": 2060,
        "wires": [
            [
                "c85dcd4c0a77dd34",
                "d913336364507e07"
            ]
        ]
    },
    {
        "id": "f4d2009c826d7a0c",
        "type": "function",
        "z": "bdf1045c1ff841f7",
        "name": "Config notification",
        "func": "msg.payload = \"Are you sure you want to delete user: \" + msg.payload.username\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2060,
        "wires": [
            [
                "7a26542ee42dbf93"
            ]
        ]
    },
    {
        "id": "b373f5e4c7992579",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 2000,
        "wires": []
    },
    {
        "id": "c85dcd4c0a77dd34",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 408",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1980,
        "wires": []
    },
    {
        "id": "9af88781121c9e77",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 409",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 2040,
        "wires": []
    },
    {
        "id": "d45d7747b7b68e28",
        "type": "link out",
        "z": "bdf1045c1ff841f7",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "07c0da685bc77a1b",
            "9329947525d030d2"
        ],
        "x": 2515,
        "y": 2120,
        "wires": []
    },
    {
        "id": "4dde9cf8be1b0f8a",
        "type": "link out",
        "z": "bdf1045c1ff841f7",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "07c0da685bc77a1b",
            "9329947525d030d2"
        ],
        "x": 2135,
        "y": 1840,
        "wires": []
    },
    {
        "id": "9329947525d030d2",
        "type": "link in",
        "z": "bdf1045c1ff841f7",
        "name": "Refresh in",
        "links": [
            "4dde9cf8be1b0f8a",
            "d45d7747b7b68e28",
            "8acd6daf9ec1e0b6"
        ],
        "x": 155,
        "y": 900,
        "wires": [
            [
                "d364ae973c79f391",
                "8d5c9138be0bb62d"
            ]
        ]
    },
    {
        "id": "8d5c9138be0bb62d",
        "type": "debug",
        "z": "bdf1045c1ff841f7",
        "name": "debug 410",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 840,
        "wires": []
    },
    {
        "id": "8acd6daf9ec1e0b6",
        "type": "link out",
        "z": "bdf1045c1ff841f7",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "9329947525d030d2"
        ],
        "x": 1915,
        "y": 1480,
        "wires": []
    },
    {
        "id": "190d80f05e0b442c",
        "type": "inject",
        "z": "f54c3884e1dad647",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "634012b9c7d53d3f"
            ]
        ]
    },
    {
        "id": "634012b9c7d53d3f",
        "type": "function",
        "z": "f54c3884e1dad647",
        "name": "function 48",
        "func": "flow.set('HMIcsvLocation', global.get('HMIcsvLocation'))\nflow.set('HMIrecipeName', global.get('HMIrecipeName'))\nflow.set('dashboardCredentialsLocation', global.get('dashboardCredentialsLocation'))\n/*\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7748974709f0343e",
        "type": "inject",
        "z": "f54c3884e1dad647",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1380,
        "y": 40,
        "wires": [
            [
                "5abc40a120f41367"
            ]
        ]
    },
    {
        "id": "5abc40a120f41367",
        "type": "function",
        "z": "f54c3884e1dad647",
        "name": "function 47",
        "func": "global.set('HMIcsvLocation', flow.get('HMIcsvLocation'))\nglobal.set('HMIrecipeName', flow.get('HMIrecipeName'))\nglobal.set('dashboardCredentialsLocation', flow.get('dashboardCredentialsLocation'))\n/*\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\nglobal.set('', flow.get(''))\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 40,
        "wires": [
            []
        ]
    }
]