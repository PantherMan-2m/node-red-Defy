[
    {
        "id": "6c2dfeb262f54a31",
        "type": "tab",
        "label": "Recipes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "31496c5ec25fc448",
        "type": "tab",
        "label": "Recipe extras",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90f171682dfc3f42",
        "type": "tab",
        "label": "Dashboard  Login things",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c00c7edc48758726",
        "type": "tab",
        "label": "Testing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3bab716a8a493dbf",
        "type": "subflow",
        "name": "HumidUI (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "37193b5976b8907d"
                    },
                    {
                        "id": "8343c4742146fe3f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "2197f9b20e245122",
        "type": "subflow",
        "name": "TempUI (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 249,
                "wires": [
                    {
                        "id": "b8f1f2881f690446"
                    },
                    {
                        "id": "b7cc2d5e27f8b491"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "c7f701c7168b803a",
        "type": "subflow",
        "name": "HumidUI (2) (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "decd3404fa48ec62"
                    },
                    {
                        "id": "190d4f9e06f71b90"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "61787a96e3740b32",
        "type": "subflow",
        "name": "TempUI (2) (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 249,
                "wires": [
                    {
                        "id": "a0e5a87e15d32bb8"
                    },
                    {
                        "id": "8f05bbe874f46dfc"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "ec74dd5cee732abd",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "d2727ddfa00b147b"
                    },
                    {
                        "id": "33537d783e3681db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 140,
                "wires": [
                    {
                        "id": "d2727ddfa00b147b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 480,
                "y": 200,
                "wires": [
                    {
                        "id": "1ae41b3f6186f9fd",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "664234c9f7128797",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "52fb7c8c7dcbe77e",
            "5f858caa962e998c",
            "bf6864ec2d7a5b95",
            "33c974f546e17556",
            "2d41696a18e88a01",
            "35e0776ee3d875af",
            "f44b2641331a775c",
            "bc1527f0658c3745",
            "674bdf8dd88a2f92",
            "07e2b42143d640d9",
            "083c7d8a391fde5e",
            "2be4d373775ce795",
            "79f57fb83796d203",
            "5295bb96ba9d5449",
            "2f58cbe080870585",
            "7ceec3956a7dd616",
            "302dc2211d42de0e",
            "f1d50dd15d94069a",
            "623845cff6af01b9",
            "175c729c01f2cfbd",
            "9f962157dbb6d25e",
            "345bb44f70f03eb7",
            "413d54f4b5d93ff2",
            "116e4541601aeeab",
            "584ae33d92cddd1e",
            "a2edcd5fcd18c313",
            "a0de533effc5e97a",
            "25752892c649c6ef",
            "5a1aa2cf708531e2",
            "a0e48396595f0b35",
            "fcb4484315826ecd",
            "7193f4f49117ee08",
            "c77e73b050df7609",
            "df7bed9d57e1e061",
            "666e0a81ae995c72",
            "2bbb7773229710e0",
            "cb14a2cccdac1bc3",
            "797b5c9a9c6ad7b8",
            "da75d8cd36b0d376",
            "4b28ff99955b02d3",
            "5276a44f13b2ac4a",
            "14d5ef8a8368fcf9",
            "4bf3fc9956a31dd3",
            "0e2055f1de766c7f",
            "ceb27c5af4f2ec19",
            "22a8c8bc6b6eb29e",
            "2e8743f7b80084b4"
        ],
        "x": 54,
        "y": 2539,
        "w": 2852,
        "h": 467
    },
    {
        "id": "dae082823c9d1d01",
        "type": "group",
        "z": "c00c7edc48758726",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c891a63d83380320",
            "9c33923ae87f26b0",
            "c7a93f48424e91c8",
            "5827a37590da09cb",
            "263d72c49c8806ed",
            "9ec52cf046598a9a",
            "088efd7a54561a7c",
            "b71de4744c0474cc",
            "19d8d9e7b119b01e",
            "11b11b037d3e51ed",
            "997df50f70c549a9",
            "3a33f18d1fd31730",
            "38d6434be758d0a7",
            "e83f27a0af8dab0f",
            "0247aee91f6bd7f5",
            "f6448b5a5e0363a9"
        ],
        "x": 24,
        "y": 19
    },
    {
        "id": "0b9482d917fa354c",
        "type": "group",
        "z": "31496c5ec25fc448",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4952dd022abb75ad",
            "0a8ed61e867f56ed",
            "f5ad7a146a77eea2",
            "9059f5fd97c87d09",
            "a63ee866d1d3340b",
            "4eceb11fa41fb864",
            "ed9e10d9c22c547c",
            "12e8cfd55bd6f932",
            "df6da89a12f26db4",
            "4ea21dda80af99ec",
            "a41742725ab5987b",
            "fbe9023f2366e5bb",
            "2afb31f338f918e7",
            "38374f02c85e3efa",
            "c0eed8ccb5e34a3c",
            "b49c91e11fc35baa",
            "cb8d00cf3af12820",
            "a94da27ee4dd7d33",
            "e0e063d64010d657",
            "464136f77820a240",
            "036712fa2b497dae",
            "34b0b3a03033e594",
            "35ef6d9691bad31b",
            "ce1b26d50834a0ff"
        ],
        "x": 34,
        "y": 39,
        "w": 1032,
        "h": 462
    },
    {
        "id": "2fd3eb0fbfec960e",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4877bfd005f45419",
            "ec0a5242c10cd615",
            "fea68f0b27b3b0b6",
            "ae1be5dc38f60c0b",
            "3a63fa4f796bd032",
            "06167b8a190b1ed6",
            "76426b623e4f601c",
            "b9156f78ebf3843b",
            "cb690a9660cf7c8a",
            "c8ca4022d0d77e22",
            "34c7ab41bb4b3dd7",
            "64d6fcd6ed4fe465",
            "2cc3c524ed5f4e18",
            "9ff3e803ce53cc13",
            "0f6a62d428984bc7",
            "393a717ce46b9361",
            "364a72862b9511e5",
            "c8aea7f920176540",
            "686eb83bad60e464",
            "60f28e5f05f78a6d",
            "20a3eb8c1e03d0e2",
            "0150faf44d6b43a0",
            "849918d9f4b0d272"
        ],
        "x": 3514,
        "y": 3919,
        "w": 1252,
        "h": 362
    },
    {
        "id": "ac5ddaede4537b72",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b281e8db5682cef0",
            "72055df34f3ff6d0",
            "35cd53f851e1a767",
            "6674d2d95cae619d",
            "714536eb9bff0bd0",
            "626e278e4cf58f5b",
            "7c1dcedbb4597942",
            "935d68cf5f9462a7",
            "542df5ca2e58aa34",
            "da79b47bea4f8cd0",
            "25997782b99a6130",
            "993a9b001a357c8c",
            "7cf0eb5e4d7af7a5",
            "96b36f22a6198df9",
            "da2edc16fc7322a7",
            "717877cb82065dc3",
            "d5a6b4aa8c3d3543",
            "ddfd29912990aabc",
            "5ec057420e7b5bc0"
        ],
        "x": 3094,
        "y": 3059,
        "w": 1652,
        "h": 222
    },
    {
        "id": "43df61af7b7b9663",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37e5e1cf05f04932",
            "d749b9f44a2a2ba1",
            "1de9dfdf901990fa",
            "756ee76f9ccadbd8",
            "4f48d873ac6baeca",
            "7c1e899a2651d759",
            "b6bd57aa234737be",
            "a405fda7c0517634",
            "1edb47acfa9dbac7",
            "cb07a673fdfc2653",
            "8dc188d1df343704",
            "859e77fbb03e40f0",
            "337b76a428a81ab5"
        ],
        "x": 3514,
        "y": 3679,
        "w": 892,
        "h": 222
    },
    {
        "id": "acca45aca7d162a9",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d7861c4242485729",
            "f3242e7aa08bbe15",
            "71740d665d2b24ce",
            "21a6805e17ec8f57",
            "99276769c25c9fee",
            "2b4327fa36f4764a",
            "8c4d5f66a4a69ab8"
        ],
        "x": 3514,
        "y": 3499,
        "w": 792,
        "h": 162
    },
    {
        "id": "bdb8c3cb821603ff",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ad9a723bcdb4d50b",
            "5ba436835e73730b",
            "077f30a3ad8d59c5",
            "259618f3c3f1c763",
            "0689c3d5b8c63a48",
            "f51a4752f116f9ab",
            "10a6e1396d0d3594",
            "cc244f0312530514",
            "668ae53183045f48",
            "9d6cf8016eb059a7",
            "e020644240df67b0",
            "604175417bdb4031",
            "c40750fadc409ba3",
            "50ada39cbcb7b7dc",
            "d1b617b1b2243281",
            "0ce3360d1d743743",
            "6ee53091dbb0e592",
            "2a17fac4bc6e1221",
            "6af32e127a95b37c",
            "41f626f1327d3ed7",
            "b87516e6f243fef8",
            "f401164f4df6243c",
            "8b62446cfd723994"
        ],
        "x": 2954,
        "y": 2659,
        "w": 1402,
        "h": 322
    },
    {
        "id": "8f1040046006e799",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3dab220221184841",
            "c9b3c81e660b8022",
            "f4ea55515c41729c",
            "23281f6c705311eb",
            "8de91a6651268b8a",
            "a9c4c3a2c9488c0e",
            "848a99fa27c2e22f",
            "ce067e37168e1d33",
            "ddf28fd3e1968054",
            "a8817387335deec3",
            "113479bbc86295a4",
            "486fec372f572af9",
            "a513364e1951fda6",
            "b84b6732efebeca7",
            "6e399498c012289c",
            "5e41e8f1e690587f"
        ],
        "x": 54,
        "y": 2219,
        "w": 972,
        "h": 302
    },
    {
        "id": "10237157f7ec9d83",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "57b8c369402f86ee",
            "43ce6fa4c644f3f3",
            "0f712ca3bb59a557",
            "b4b222f939895c2c",
            "4571c934cd47a965",
            "d6300eb99d1c25a1",
            "98e14c7df7492fd7",
            "5e66d4669da59098",
            "c7a80db6e1441f4f"
        ],
        "x": 1054,
        "y": 2239,
        "w": 672,
        "h": 282
    },
    {
        "id": "f8a4ead61d3610ae",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37d487ac91b0fdce",
            "e4883f4f01d94855",
            "3d7f076cfd4e4c32",
            "d7c06429fe49a7d8",
            "9cf37f99d9c46dd7",
            "c20be865f12bee03",
            "a65d5a57aa1aa5e4"
        ],
        "x": 1744,
        "y": 2259,
        "w": 862,
        "h": 262
    },
    {
        "id": "578d44d18df9e87c",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c8c71e527a7dcceb",
            "ac2e0223ada93d3b",
            "4a3942a5d1cee888",
            "7b0410e1a51fa4cf",
            "ef386ef09874169f",
            "5491c556639992d7",
            "38ff2dcc2e41b6fa",
            "69c370a5e4e9a882",
            "d2cab525d55aed4c",
            "6c98d771a755222f",
            "dc1518dfe85bb897",
            "4a831eb513b40b2a",
            "ec50e4bd721ed7c0",
            "a46910031a3f1d1c",
            "44dbecae4687566e",
            "67bfbb724ce329bc",
            "215838f219a62175",
            "1ea3b76c92b8cd98"
        ],
        "x": 2954,
        "y": 2299,
        "w": 1292,
        "h": 342
    },
    {
        "id": "807ab1f8485a35d8",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4447ccc91c15c26d",
            "dc9c85c407d1c0ab",
            "afb8f594f1e07231",
            "2ffd48c752714782",
            "dacc99015ddc50b4",
            "ce9e314b2ee5db14",
            "f3faffe6a0f822d1",
            "3b96d386eb8e1a7a",
            "792e18f0a5c5bef2"
        ],
        "x": 3514,
        "y": 3319,
        "w": 1152,
        "h": 162
    },
    {
        "id": "e6bcc5d10479e867",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc71860e04ee28f1",
            "c1090410677ed7cf",
            "39bdfdf6150306a8",
            "aa7b8f253ea918f7",
            "8bfd37949c01c861"
        ],
        "x": 4274,
        "y": 2479,
        "w": 692,
        "h": 142
    },
    {
        "id": "9cf9292825accc79",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "73e98307bfe33bc0",
            "ca4e8d0a05d1833c",
            "e92d85f0a4cc45e0",
            "051a2227bc7c22da",
            "6faf52c7c703e7f7",
            "7915ad8bc9b494c7",
            "f4cc0d4fdc7960da"
        ],
        "x": 14,
        "y": 19,
        "w": 532,
        "h": 242
    },
    {
        "id": "539804e1d61a4508",
        "type": "group",
        "z": "c00c7edc48758726",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c312db7a02c1f4dd",
            "99da7dfd84cbd186",
            "6c8c4aeace8044d9",
            "e387b5cf3a56528a",
            "552a9e388d7eda29",
            "0cd883411cc554c7",
            "602c2fb9189b3c62",
            "9eb2b47107b96ed8",
            "2996681554f2e749",
            "167f353c05c28461",
            "5e8844296c95858c",
            "de343ff69f1f4da3",
            "cd1baf7d357f6329",
            "b8f8914c9d5d69ae",
            "a46d180a4664a236",
            "b90d7f7951814165"
        ],
        "x": 34,
        "y": 2419
    },
    {
        "id": "6e97773fd049cb5b",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f8f22ece88ec980d",
            "fa9015a8110bfeda",
            "9fc4b59f185c006e",
            "47be9509daa1c04b",
            "039d4dbe4e2b78e1",
            "fc805a8187a29356",
            "fa831abc7da41e90",
            "a6a1f7a83c9a8a9a",
            "4bb4261eb33f56d6",
            "c07227c42b3fd36d",
            "72e02e9f9b6ba534",
            "86db4bedc72c93e1",
            "8cb57e408fc465c5",
            "aebf85de92113483",
            "517b54151287feac",
            "b0395f2d2b283ff5",
            "8f7cb562d41b8b5d",
            "264ef17a2f0a1d0a",
            "2fb8b9d1af7859d8",
            "df1fd1941c5b395f",
            "6074901c2154d650",
            "18a6019dbf51f4b8",
            "b868f68bd9f8c96a",
            "b0d452d7a86250cc",
            "6a9e30f65e495bca",
            "7e8e9285ac4d4af7",
            "ea2d055881e36cfe",
            "dc4d189a7a019648",
            "ef896cd52b629bbd",
            "b9fe3a978a99d255",
            "9eb6147d495f9105",
            "306199d1b0477757",
            "fb7182813481b720",
            "79439506b1a6acc3",
            "06f629eaaab136d7",
            "53bc6d05453164e1",
            "648b704962cd7cb4",
            "0788349311d3e9bd",
            "399295b176020939",
            "64540ab6ef54df04",
            "685f7c6252fbf069",
            "fe3347238adb2776",
            "23bcac963ec3db9e",
            "d75a92667a98eb57",
            "c48701d31a705a25",
            "9af343f3d1944ad8",
            "8ba01020f0859762",
            "643cd93a1a646fcf",
            "9dccbe810699e434",
            "7dac7ad1da48a1f9",
            "9e06961882e23a35",
            "4c4b6a2e98592723",
            "65be6ad7c1bea905",
            "2826b8fce3f78243",
            "368d37e7008cea73",
            "e60e9cb6f7c09950",
            "c868f96cbdde6b5a",
            "677d85a17326c45a",
            "f3749122349010b8",
            "fe33b174df8546ad",
            "d235074ffad9a339",
            "40226ce37f97e01d",
            "c08febe6a2ea67d1",
            "071e0510fb46c738",
            "a5f50c3adfd68f30",
            "a8e5c3f63ac47823",
            "46a420304f511f09",
            "9198bb0cdc6fe3d6",
            "9323c14a8cd433da",
            "a71b06b6aa2a7ca7",
            "5661c235efdcfa2c",
            "bedb18ee343c6347",
            "620b5fb0977fafbe",
            "53629911f5459ce1",
            "2a096eb5b729ad7a",
            "6a8b42eb09f61512",
            "edad1ed751f9f35a",
            "f4819242d6b630f6",
            "35bd6a039503688e",
            "e65f384ee41cf598",
            "03d1c3ba697c94e4",
            "899982ab2aee5dab",
            "b19f1d350c2fabd7",
            "a5d2df37afae85ec",
            "73d41cef94786e51",
            "d74b12cee713ed7e",
            "86f7147f3a0eae1d",
            "bf90850384938521",
            "2e9e80c68d3c4b58",
            "8a84e81f560c21e0",
            "b4af2d25ef2d0ac9",
            "34b7442112b489aa",
            "49f6e7937c095566"
        ],
        "x": 24,
        "y": 1779,
        "w": 2592,
        "h": 422
    },
    {
        "id": "e54de4b4f52cafbd",
        "type": "group",
        "z": "c00c7edc48758726",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "38c5b77acb14dc9a",
            "cf9c4a7080dfbd5e",
            "95595f4fbfdee98f",
            "9161d0a7fda2def9",
            "948d8df774b8c958",
            "874bdaad96171add",
            "677bd563ce9ca164",
            "b631b5fbf3c2b52b",
            "8f10c3d9a5533e50",
            "3f06d61a64506ac6",
            "7b9ab9a85bf8b121",
            "2c4473ebc154fc97",
            "6a60a7604f75eba9",
            "8459fcb3ab783bf4",
            "a7c171c540aa6b41",
            "1366b07d65e1958a",
            "ea3db8512464c32e"
        ],
        "x": 1814,
        "y": 19
    },
    {
        "id": "30b771718c579dd1",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 1440,
        "y": 1420,
        "wires": [
            [
                "8dfa706e5138ec4d"
            ]
        ]
    },
    {
        "id": "9f962157dbb6d25e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 1560,
        "y": 2980,
        "wires": [
            [
                "25752892c649c6ef"
            ]
        ]
    },
    {
        "id": "25752892c649c6ef",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 1860,
        "y": 2980,
        "wires": [
            [
                "fcb4484315826ecd"
            ]
        ]
    },
    {
        "id": "413d54f4b5d93ff2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 1800,
        "y": 2720,
        "wires": [
            [
                "5a1aa2cf708531e2"
            ]
        ]
    },
    {
        "id": "7193f4f49117ee08",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 2200,
        "y": 2720,
        "wires": [
            [
                "2bbb7773229710e0"
            ]
        ]
    },
    {
        "id": "da75d8cd36b0d376",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 2500,
        "y": 2920,
        "wires": [
            [
                "14d5ef8a8368fcf9"
            ]
        ]
    },
    {
        "id": "5276a44f13b2ac4a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 2520,
        "y": 2780,
        "wires": [
            [
                "14d5ef8a8368fcf9"
            ]
        ]
    },
    {
        "id": "79f57fb83796d203",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 1200,
        "y": 2920,
        "wires": [
            [
                "2f58cbe080870585"
            ]
        ]
    },
    {
        "id": "4b4e2f01c9257cc0",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2960,
        "y": 1320,
        "wires": [
            [
                "31e3351497920e04"
            ]
        ]
    },
    {
        "id": "6734f2d9539c62ce",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 840,
        "y": 2000,
        "wires": [
            [
                "7ce425fd6f0879fc"
            ]
        ]
    },
    {
        "id": "7ce425fd6f0879fc",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 1400,
        "y": 2000,
        "wires": [
            [
                "20eb7ca2f9e89045",
                "acb1cef1e87b991e"
            ]
        ]
    },
    {
        "id": "e70117d17e776031",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2180,
        "y": 3240,
        "wires": [
            [
                "66599bbdc0cbe8eb"
            ]
        ]
    },
    {
        "id": "66599bbdc0cbe8eb",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2440,
        "y": 3240,
        "wires": [
            [
                "d56be15d3b11433f"
            ]
        ]
    },
    {
        "id": "8b62446cfd723994",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "x": 3360,
        "y": 2760,
        "wires": [
            [
                "0ce3360d1d743743"
            ]
        ]
    },
    {
        "id": "113479bbc86295a4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 340,
        "y": 2400,
        "wires": [
            [
                "486fec372f572af9"
            ]
        ]
    },
    {
        "id": "486fec372f572af9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 520,
        "y": 2400,
        "wires": [
            [
                "23281f6c705311eb"
            ]
        ]
    },
    {
        "id": "a513364e1951fda6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 360,
        "y": 2340,
        "wires": [
            [
                "ce067e37168e1d33"
            ]
        ]
    },
    {
        "id": "50e8e2093892c2b9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2960,
        "y": 1400,
        "wires": [
            [
                "30f8b47daa429470"
            ]
        ]
    },
    {
        "id": "5c7756d64364c634",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2960,
        "y": 1480,
        "wires": [
            [
                "fa64b89314d98475"
            ]
        ]
    },
    {
        "id": "7af7b48edc11bf0d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2960,
        "y": 1560,
        "wires": [
            [
                "dad481905a20fdea"
            ]
        ]
    },
    {
        "id": "fc805a8187a29356",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 630,
        "y": 1880,
        "wires": [
            [
                "4bb4261eb33f56d6",
                "c07227c42b3fd36d"
            ]
        ]
    },
    {
        "id": "fa831abc7da41e90",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 630,
        "y": 1920,
        "wires": [
            [
                "72e02e9f9b6ba534",
                "86db4bedc72c93e1",
                "8cb57e408fc465c5",
                "aebf85de92113483"
            ]
        ]
    },
    {
        "id": "4bb4261eb33f56d6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1610,
        "y": 1880,
        "wires": [
            [
                "517b54151287feac"
            ]
        ]
    },
    {
        "id": "8f7cb562d41b8b5d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 1920,
        "wires": [
            [
                "06f629eaaab136d7",
                "53bc6d05453164e1"
            ]
        ]
    },
    {
        "id": "df1fd1941c5b395f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 1980,
        "wires": [
            [
                "0788349311d3e9bd",
                "399295b176020939"
            ]
        ]
    },
    {
        "id": "18a6019dbf51f4b8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 2040,
        "wires": [
            [
                "685f7c6252fbf069",
                "fe3347238adb2776"
            ]
        ]
    },
    {
        "id": "b0d452d7a86250cc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 2100,
        "wires": [
            [
                "d75a92667a98eb57",
                "c48701d31a705a25"
            ]
        ]
    },
    {
        "id": "06f629eaaab136d7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 1920,
        "wires": [
            [
                "9323c14a8cd433da",
                "9dccbe810699e434"
            ]
        ]
    },
    {
        "id": "0788349311d3e9bd",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 1980,
        "wires": [
            [
                "bedb18ee343c6347",
                "65be6ad7c1bea905"
            ]
        ]
    },
    {
        "id": "685f7c6252fbf069",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 2040,
        "wires": [
            [
                "2a096eb5b729ad7a",
                "e60e9cb6f7c09950"
            ]
        ]
    },
    {
        "id": "d75a92667a98eb57",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 2100,
        "wires": [
            [
                "f4819242d6b630f6",
                "f3749122349010b8"
            ]
        ]
    },
    {
        "id": "643cd93a1a646fcf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 1960,
        "wires": [
            [
                "7e8e9285ac4d4af7"
            ]
        ]
    },
    {
        "id": "9dccbe810699e434",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1550,
        "y": 1920,
        "wires": [
            [
                "7e8e9285ac4d4af7"
            ]
        ]
    },
    {
        "id": "4c4b6a2e98592723",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 2020,
        "wires": [
            [
                "ea2d055881e36cfe"
            ]
        ]
    },
    {
        "id": "65be6ad7c1bea905",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1550,
        "y": 1980,
        "wires": [
            [
                "ea2d055881e36cfe"
            ]
        ]
    },
    {
        "id": "368d37e7008cea73",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 2080,
        "wires": [
            [
                "dc4d189a7a019648"
            ]
        ]
    },
    {
        "id": "e60e9cb6f7c09950",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1550,
        "y": 2040,
        "wires": [
            [
                "dc4d189a7a019648"
            ]
        ]
    },
    {
        "id": "677d85a17326c45a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1290,
        "y": 2140,
        "wires": [
            [
                "ef896cd52b629bbd"
            ]
        ]
    },
    {
        "id": "f3749122349010b8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1550,
        "y": 2100,
        "wires": [
            [
                "ef896cd52b629bbd"
            ]
        ]
    },
    {
        "id": "c08febe6a2ea67d1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 2090,
        "y": 1960,
        "wires": [
            [
                "a5d2df37afae85ec"
            ]
        ]
    },
    {
        "id": "9198bb0cdc6fe3d6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 1960,
        "wires": [
            [
                "643cd93a1a646fcf"
            ]
        ]
    },
    {
        "id": "5661c235efdcfa2c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 2020,
        "wires": [
            [
                "4c4b6a2e98592723"
            ]
        ]
    },
    {
        "id": "53629911f5459ce1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 2080,
        "wires": [
            [
                "368d37e7008cea73"
            ]
        ]
    },
    {
        "id": "edad1ed751f9f35a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "x": 1030,
        "y": 2140,
        "wires": [
            [
                "677d85a17326c45a"
            ]
        ]
    },
    {
        "id": "0fa57ade6c906b98",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2960,
        "y": 1640,
        "wires": [
            [
                "6dd7449228ea05ec"
            ]
        ]
    },
    {
        "id": "9c7996d4ba3f5e25",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3440,
        "wires": [
            [
                "68732acf328c67f3"
            ]
        ]
    },
    {
        "id": "77615e47d8f75811",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3400,
        "wires": [
            [
                "6f1005a602a07add",
                "e1fa7fd0ac89bbf4",
                "23684264e21a2ce8"
            ]
        ]
    },
    {
        "id": "2ae5d6e42d3b0716",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3440,
        "wires": [
            [
                "9c7996d4ba3f5e25"
            ]
        ]
    },
    {
        "id": "68732acf328c67f3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3440,
        "wires": [
            [
                "f677382f329687e1",
                "765279b5ea382782"
            ]
        ]
    },
    {
        "id": "df48d4723331dea8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3400,
        "wires": [
            [
                "3bc6d73031a37c78",
                "77615e47d8f75811"
            ]
        ]
    },
    {
        "id": "e1fa7fd0ac89bbf4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3400,
        "wires": [
            [
                "88550d1f0120f442",
                "68514ad352204d08"
            ]
        ]
    },
    {
        "id": "b42caa5c33f93cc9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3440,
        "wires": [
            [
                "2ae5d6e42d3b0716"
            ]
        ]
    },
    {
        "id": "68514ad352204d08",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3400,
        "wires": [
            [
                "68732acf328c67f3"
            ]
        ]
    },
    {
        "id": "e8e322ea071e8f38",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3400,
        "wires": [
            [
                "ec754243006abbd0",
                "df48d4723331dea8"
            ]
        ]
    },
    {
        "id": "07acba2d374ef320",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3440,
        "wires": [
            [
                "b42caa5c33f93cc9"
            ]
        ]
    },
    {
        "id": "2cd30b8115e93a33",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3400,
        "wires": [
            [
                "e8e322ea071e8f38",
                "297ea0ab9d5abf55"
            ]
        ]
    },
    {
        "id": "01c09518311fd758",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3440,
        "wires": [
            [
                "07acba2d374ef320"
            ]
        ]
    },
    {
        "id": "72d6f5cc5dd00dd5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3520,
        "wires": [
            [
                "86ea00ea5425bbfe"
            ]
        ]
    },
    {
        "id": "e70af25c91140f83",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3600,
        "wires": [
            [
                "1bda9836522fb1d0"
            ]
        ]
    },
    {
        "id": "97a8fd6e11911595",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3680,
        "wires": [
            [
                "9e0a6351566681e0"
            ]
        ]
    },
    {
        "id": "133cb8ab2ec7f504",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3760,
        "wires": [
            [
                "e08ef402ed7f5427"
            ]
        ]
    },
    {
        "id": "aeb85e03db18a3fd",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3840,
        "wires": [
            [
                "539936a80222ae52"
            ]
        ]
    },
    {
        "id": "3610d8b0ea5bfea9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 3920,
        "wires": [
            [
                "b50ac676ec012d75"
            ]
        ]
    },
    {
        "id": "352763695066694c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4000,
        "wires": [
            [
                "37a011b31c406eb4"
            ]
        ]
    },
    {
        "id": "cb4a54f26026712e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4080,
        "wires": [
            [
                "3720eeb3e3452a11"
            ]
        ]
    },
    {
        "id": "e30bc11e88188932",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4160,
        "wires": [
            [
                "1d7401b14e0bc95d"
            ]
        ]
    },
    {
        "id": "867d5a12e1a3f87e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4980,
        "wires": [
            [
                "2ccd2f92716679f7"
            ]
        ]
    },
    {
        "id": "5ece38961f189808",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4260,
        "wires": [
            [
                "98a97cc6104838ef"
            ]
        ]
    },
    {
        "id": "4e36f1585181830e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4340,
        "wires": [
            [
                "2ce8a6374abb9919"
            ]
        ]
    },
    {
        "id": "759489bd1233ba62",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4420,
        "wires": [
            [
                "c2b863fdf34ad4a5"
            ]
        ]
    },
    {
        "id": "81ec1b3d0a6520cf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4500,
        "wires": [
            [
                "156de4ccc7bed134"
            ]
        ]
    },
    {
        "id": "2b54e889a5265de0",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4580,
        "wires": [
            [
                "24bbc8e4206864c0"
            ]
        ]
    },
    {
        "id": "50b4d194672bb389",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4660,
        "wires": [
            [
                "154cf6e3a01b4df1"
            ]
        ]
    },
    {
        "id": "8a47b8d5fc05794e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4740,
        "wires": [
            [
                "2ee87b7820fdc936"
            ]
        ]
    },
    {
        "id": "9629d942ab071493",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4820,
        "wires": [
            [
                "ecef329470d31c86"
            ]
        ]
    },
    {
        "id": "6b6419373506ac71",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1990,
        "y": 4900,
        "wires": [
            [
                "465fea572d3cefb4"
            ]
        ]
    },
    {
        "id": "bfcd526bd10c3c0a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3520,
        "wires": [
            [
                "72d6f5cc5dd00dd5"
            ]
        ]
    },
    {
        "id": "ab7f08ef2891ec8d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3480,
        "wires": [
            [
                "72d6f5cc5dd00dd5"
            ]
        ]
    },
    {
        "id": "0d5c4644ba59aa96",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3600,
        "wires": [
            [
                "e70af25c91140f83"
            ]
        ]
    },
    {
        "id": "c46a76a54f9e8dcc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3560,
        "wires": [
            [
                "e70af25c91140f83"
            ]
        ]
    },
    {
        "id": "05590b9c4df8087b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3680,
        "wires": [
            [
                "97a8fd6e11911595"
            ]
        ]
    },
    {
        "id": "cb23c02554c82b2b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3640,
        "wires": [
            [
                "97a8fd6e11911595"
            ]
        ]
    },
    {
        "id": "fe0c0bb086b61b9a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3760,
        "wires": [
            [
                "133cb8ab2ec7f504"
            ]
        ]
    },
    {
        "id": "37d58d2416b4dfa8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3720,
        "wires": [
            [
                "133cb8ab2ec7f504"
            ]
        ]
    },
    {
        "id": "3954313e61866e90",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3840,
        "wires": [
            [
                "aeb85e03db18a3fd"
            ]
        ]
    },
    {
        "id": "3554c902c90b7faf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3800,
        "wires": [
            [
                "aeb85e03db18a3fd"
            ]
        ]
    },
    {
        "id": "8395bd2c32e139de",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 3920,
        "wires": [
            [
                "3610d8b0ea5bfea9"
            ]
        ]
    },
    {
        "id": "b024a74612320a1b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3880,
        "wires": [
            [
                "3610d8b0ea5bfea9"
            ]
        ]
    },
    {
        "id": "c5517210264641f2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4000,
        "wires": [
            [
                "352763695066694c"
            ]
        ]
    },
    {
        "id": "0aa909c80a46feaf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 3960,
        "wires": [
            [
                "352763695066694c"
            ]
        ]
    },
    {
        "id": "21fe2044e777b6a5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4080,
        "wires": [
            [
                "cb4a54f26026712e"
            ]
        ]
    },
    {
        "id": "6f96a09c06d5ba09",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4040,
        "wires": [
            [
                "cb4a54f26026712e"
            ]
        ]
    },
    {
        "id": "ae5f5d7aaf72b0ee",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4160,
        "wires": [
            [
                "e30bc11e88188932"
            ]
        ]
    },
    {
        "id": "f687911d259ce460",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4120,
        "wires": [
            [
                "e30bc11e88188932"
            ]
        ]
    },
    {
        "id": "3c7386a9b7c00130",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4980,
        "wires": [
            [
                "867d5a12e1a3f87e"
            ]
        ]
    },
    {
        "id": "c6b7c26ffe32500e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4940,
        "wires": [
            [
                "867d5a12e1a3f87e"
            ]
        ]
    },
    {
        "id": "f758354a33778d09",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4220,
        "wires": [
            [
                "5ece38961f189808"
            ]
        ]
    },
    {
        "id": "12d4113254a9f866",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4260,
        "wires": [
            [
                "5ece38961f189808"
            ]
        ]
    },
    {
        "id": "72936e3d01e6f3d5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4300,
        "wires": [
            [
                "4e36f1585181830e"
            ]
        ]
    },
    {
        "id": "e4de75feda6faa1f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4340,
        "wires": [
            [
                "4e36f1585181830e"
            ]
        ]
    },
    {
        "id": "44a3391edd21a498",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4380,
        "wires": [
            [
                "759489bd1233ba62"
            ]
        ]
    },
    {
        "id": "e533cae113e5d01a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4420,
        "wires": [
            [
                "759489bd1233ba62"
            ]
        ]
    },
    {
        "id": "6de764ed16a6f90b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4460,
        "wires": [
            [
                "81ec1b3d0a6520cf"
            ]
        ]
    },
    {
        "id": "e92021330ae86492",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4500,
        "wires": [
            [
                "81ec1b3d0a6520cf"
            ]
        ]
    },
    {
        "id": "2ebfb05da754ac40",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4540,
        "wires": [
            [
                "2b54e889a5265de0"
            ]
        ]
    },
    {
        "id": "1ca328572d4848cf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4580,
        "wires": [
            [
                "2b54e889a5265de0"
            ]
        ]
    },
    {
        "id": "dc6c5826a6ffcd0e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4620,
        "wires": [
            [
                "50b4d194672bb389"
            ]
        ]
    },
    {
        "id": "caa5654acbed1f5a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4660,
        "wires": [
            [
                "50b4d194672bb389"
            ]
        ]
    },
    {
        "id": "e26a8a391e0d9df9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4700,
        "wires": [
            [
                "8a47b8d5fc05794e"
            ]
        ]
    },
    {
        "id": "4d2c0af856682af3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4740,
        "wires": [
            [
                "8a47b8d5fc05794e"
            ]
        ]
    },
    {
        "id": "24211b3e76faec15",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4780,
        "wires": [
            [
                "9629d942ab071493"
            ]
        ]
    },
    {
        "id": "b5b2df01b2e46b7d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4820,
        "wires": [
            [
                "9629d942ab071493"
            ]
        ]
    },
    {
        "id": "394b71f9d0de680f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 4860,
        "wires": [
            [
                "6b6419373506ac71"
            ]
        ]
    },
    {
        "id": "cb0acfa71b39426b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1750,
        "y": 4900,
        "wires": [
            [
                "6b6419373506ac71"
            ]
        ]
    },
    {
        "id": "ef4ff23f307da767",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3520,
        "wires": [
            [
                "bfcd526bd10c3c0a"
            ]
        ]
    },
    {
        "id": "d0017216a3ee4eb5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3480,
        "wires": [
            [
                "d21a1dd37cf1ca43",
                "ab7f08ef2891ec8d"
            ]
        ]
    },
    {
        "id": "cb228e03f86eeea3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3600,
        "wires": [
            [
                "0d5c4644ba59aa96"
            ]
        ]
    },
    {
        "id": "8dc273cdc996f648",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3560,
        "wires": [
            [
                "5f523914fc5a8b43",
                "c46a76a54f9e8dcc"
            ]
        ]
    },
    {
        "id": "d39f4b087fc68096",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3680,
        "wires": [
            [
                "05590b9c4df8087b"
            ]
        ]
    },
    {
        "id": "de8b8929dcf2b829",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3640,
        "wires": [
            [
                "56e24c769aae2ea1",
                "cb23c02554c82b2b"
            ]
        ]
    },
    {
        "id": "375757f94e2f1602",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3760,
        "wires": [
            [
                "fe0c0bb086b61b9a"
            ]
        ]
    },
    {
        "id": "8020a40336198a19",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3720,
        "wires": [
            [
                "d716a2401c33b9df",
                "37d58d2416b4dfa8"
            ]
        ]
    },
    {
        "id": "f52db66766f57b94",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3840,
        "wires": [
            [
                "3954313e61866e90"
            ]
        ]
    },
    {
        "id": "34d2bd494350254f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3800,
        "wires": [
            [
                "8daa95cc5dc8fdf9",
                "3554c902c90b7faf"
            ]
        ]
    },
    {
        "id": "dd4758100700b1ac",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3920,
        "wires": [
            [
                "8395bd2c32e139de"
            ]
        ]
    },
    {
        "id": "4ffe72cebfb311a5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3880,
        "wires": [
            [
                "fb84374f8e7262b8",
                "b024a74612320a1b"
            ]
        ]
    },
    {
        "id": "48fe888fcdf1329f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4000,
        "wires": [
            [
                "c5517210264641f2"
            ]
        ]
    },
    {
        "id": "4137691829c98ae5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 3960,
        "wires": [
            [
                "37f77fbf56d5671c",
                "0aa909c80a46feaf"
            ]
        ]
    },
    {
        "id": "a9a3042fcae09fba",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4080,
        "wires": [
            [
                "21fe2044e777b6a5"
            ]
        ]
    },
    {
        "id": "75fb2bc18e1b7fa1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4040,
        "wires": [
            [
                "ba0a12a7a8ee5594",
                "6f96a09c06d5ba09"
            ]
        ]
    },
    {
        "id": "884d87089cc24130",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4160,
        "wires": [
            [
                "ae5f5d7aaf72b0ee"
            ]
        ]
    },
    {
        "id": "79ff40f414774d9b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4120,
        "wires": [
            [
                "ba796631157cdffb",
                "f687911d259ce460"
            ]
        ]
    },
    {
        "id": "77991745f0fd630b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4980,
        "wires": [
            [
                "3c7386a9b7c00130"
            ]
        ]
    },
    {
        "id": "5576643fcd9b0b7b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4940,
        "wires": [
            [
                "8fb51d43cf0f2de1",
                "c6b7c26ffe32500e"
            ]
        ]
    },
    {
        "id": "db324cd2c9b0d41c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4220,
        "wires": [
            [
                "04e823e7991ad1f0",
                "f758354a33778d09"
            ]
        ]
    },
    {
        "id": "891a5905f2f9df38",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4260,
        "wires": [
            [
                "12d4113254a9f866"
            ]
        ]
    },
    {
        "id": "582afae777b4bde6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4300,
        "wires": [
            [
                "0d30e08a3c71a69c",
                "72936e3d01e6f3d5"
            ]
        ]
    },
    {
        "id": "13c63a7d873423f4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4340,
        "wires": [
            [
                "e4de75feda6faa1f"
            ]
        ]
    },
    {
        "id": "9acc0f0464d5a2df",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4380,
        "wires": [
            [
                "d63d5d15a43dce21",
                "44a3391edd21a498"
            ]
        ]
    },
    {
        "id": "29e31006fc913154",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4420,
        "wires": [
            [
                "e533cae113e5d01a"
            ]
        ]
    },
    {
        "id": "6666c71493fdc232",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4460,
        "wires": [
            [
                "66eedf0330f1e2b4",
                "6de764ed16a6f90b"
            ]
        ]
    },
    {
        "id": "b0c7e64dadfe65a3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4500,
        "wires": [
            [
                "e92021330ae86492"
            ]
        ]
    },
    {
        "id": "b2620bbeceacc0d1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4540,
        "wires": [
            [
                "7374d330d1a660fe",
                "2ebfb05da754ac40"
            ]
        ]
    },
    {
        "id": "69bc625d5a18fce1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4580,
        "wires": [
            [
                "1ca328572d4848cf"
            ]
        ]
    },
    {
        "id": "d48196dfee942b77",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4620,
        "wires": [
            [
                "4aa094193be14ea4",
                "dc6c5826a6ffcd0e"
            ]
        ]
    },
    {
        "id": "20159ff589259894",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4660,
        "wires": [
            [
                "caa5654acbed1f5a"
            ]
        ]
    },
    {
        "id": "ddc10ec39f544076",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4700,
        "wires": [
            [
                "3bce5408476df26f",
                "e26a8a391e0d9df9"
            ]
        ]
    },
    {
        "id": "9ac814eebf03dae8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4740,
        "wires": [
            [
                "4d2c0af856682af3"
            ]
        ]
    },
    {
        "id": "931b44eaf1b3b96a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4780,
        "wires": [
            [
                "4af53bd5567e013d",
                "24211b3e76faec15"
            ]
        ]
    },
    {
        "id": "7e3b57e1150913dc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4820,
        "wires": [
            [
                "b5b2df01b2e46b7d"
            ]
        ]
    },
    {
        "id": "9d508eb9b396552e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1740,
        "y": 4860,
        "wires": [
            [
                "680792bb14df321d",
                "394b71f9d0de680f"
            ]
        ]
    },
    {
        "id": "bef683eb8e1a8554",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4900,
        "wires": [
            [
                "cb0acfa71b39426b"
            ]
        ]
    },
    {
        "id": "2b368866553fbfc2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3480,
        "wires": [
            [
                "583b336ad2dbd523",
                "dfe46e7ac11b8fed"
            ]
        ]
    },
    {
        "id": "2fb366c82b2a896f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3560,
        "wires": [
            [
                "814b115fdfed7d44",
                "2f99e450661f1084"
            ]
        ]
    },
    {
        "id": "49a07563c97c6aaf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3640,
        "wires": [
            [
                "6ab59498710f4781",
                "c8dacf3ae305192f"
            ]
        ]
    },
    {
        "id": "453f077457420bfc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3720,
        "wires": [
            [
                "39e1b0f54e2b30b8",
                "74eb5893a9cc883c"
            ]
        ]
    },
    {
        "id": "8ea0771e99cc208a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3800,
        "wires": [
            [
                "1842a125a9e2664f",
                "506ce393ff85931d"
            ]
        ]
    },
    {
        "id": "064f0c66b28a5244",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3880,
        "wires": [
            [
                "78401c289c205ddf",
                "3b71e89a564fc11d"
            ]
        ]
    },
    {
        "id": "abbb689dc80e17a9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3960,
        "wires": [
            [
                "26bb34008cf7a336",
                "e173c928c9f5f103"
            ]
        ]
    },
    {
        "id": "1e91e15671951300",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4040,
        "wires": [
            [
                "905bb1ad1c0f01b3",
                "abcf63f845d01d49"
            ]
        ]
    },
    {
        "id": "76e22e5711df7591",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4120,
        "wires": [
            [
                "254bbeceed531b68",
                "a06611720f5fc36f"
            ]
        ]
    },
    {
        "id": "1067a1cffe149972",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4220,
        "wires": [
            [
                "50d1c89c5c9855c2",
                "d8d637616b0e90db"
            ]
        ]
    },
    {
        "id": "c46c88fa04860913",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4300,
        "wires": [
            [
                "6872219b9da2eff3",
                "ddb0199b0edcdaa8"
            ]
        ]
    },
    {
        "id": "30d21eabfa6cd4a3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4380,
        "wires": [
            [
                "cb2c8ac2abb878fd",
                "cb3df3c12aa65082"
            ]
        ]
    },
    {
        "id": "65bc6d116c496fd1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4460,
        "wires": [
            [
                "476b692015e45ae2",
                "f48af7f3f8130943"
            ]
        ]
    },
    {
        "id": "4972ab53374d3131",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4540,
        "wires": [
            [
                "fa5e41233e270282",
                "ad64bfd9d658988b"
            ]
        ]
    },
    {
        "id": "b93467acd0a1cf48",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4620,
        "wires": [
            [
                "cf693d8ded7bc44a",
                "dfc83746a5dbb86b"
            ]
        ]
    },
    {
        "id": "90028efffada3907",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4700,
        "wires": [
            [
                "508b86f30dbc41c9",
                "fa33d6c7e7ac9586"
            ]
        ]
    },
    {
        "id": "4788e2063195b4c4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4780,
        "wires": [
            [
                "dcfbb75920228bba",
                "e266ddcc73262225"
            ]
        ]
    },
    {
        "id": "44b57d7ad504d56e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4860,
        "wires": [
            [
                "02bdddd403f5b119",
                "c071d4f292ba4e1a"
            ]
        ]
    },
    {
        "id": "d2a85dda75d74e2b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4940,
        "wires": [
            [
                "60854f74e8fd93c8",
                "2b39474fa498318e"
            ]
        ]
    },
    {
        "id": "a43c92765f091e28",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3520,
        "wires": [
            [
                "ef4ff23f307da767"
            ]
        ]
    },
    {
        "id": "5ad54b2a7ed15358",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3480,
        "wires": [
            [
                "26eb4bd42c0d1e97",
                "d0017216a3ee4eb5"
            ]
        ]
    },
    {
        "id": "54797a9f5f9c372d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3600,
        "wires": [
            [
                "cb228e03f86eeea3"
            ]
        ]
    },
    {
        "id": "0c3cfa373cdf1820",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3560,
        "wires": [
            [
                "237e1ed707b83d28",
                "8dc273cdc996f648"
            ]
        ]
    },
    {
        "id": "90fea8d830386591",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3680,
        "wires": [
            [
                "d39f4b087fc68096"
            ]
        ]
    },
    {
        "id": "0754dcab0d41e6ac",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3640,
        "wires": [
            [
                "e74b66c224a5fd20",
                "de8b8929dcf2b829"
            ]
        ]
    },
    {
        "id": "5641eee939d5bc8b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3760,
        "wires": [
            [
                "375757f94e2f1602"
            ]
        ]
    },
    {
        "id": "f37f0f4eebb5f361",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3720,
        "wires": [
            [
                "71bd2bcc4faaa3be",
                "8020a40336198a19"
            ]
        ]
    },
    {
        "id": "c262490e5b0497a4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3840,
        "wires": [
            [
                "f52db66766f57b94"
            ]
        ]
    },
    {
        "id": "3f7feb23b023afd0",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3800,
        "wires": [
            [
                "21d08d073d49cbaf",
                "34d2bd494350254f"
            ]
        ]
    },
    {
        "id": "9d73ae0012c16104",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3920,
        "wires": [
            [
                "dd4758100700b1ac"
            ]
        ]
    },
    {
        "id": "1c26f4d2aefbc1f6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3880,
        "wires": [
            [
                "4f24ce8df77af52a",
                "4ffe72cebfb311a5"
            ]
        ]
    },
    {
        "id": "673cbabf808f1b35",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4000,
        "wires": [
            [
                "48fe888fcdf1329f"
            ]
        ]
    },
    {
        "id": "ac8d9fab92e19880",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 3960,
        "wires": [
            [
                "0a6e261f3cef505e",
                "4137691829c98ae5"
            ]
        ]
    },
    {
        "id": "b27afb8948e6f680",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4080,
        "wires": [
            [
                "a9a3042fcae09fba"
            ]
        ]
    },
    {
        "id": "08dc925a1fdf40a4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4040,
        "wires": [
            [
                "d821396f497573e9",
                "75fb2bc18e1b7fa1"
            ]
        ]
    },
    {
        "id": "5315eb48754db3cc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4160,
        "wires": [
            [
                "884d87089cc24130"
            ]
        ]
    },
    {
        "id": "127aea32935e3d18",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4120,
        "wires": [
            [
                "db394129948e146a",
                "79ff40f414774d9b"
            ]
        ]
    },
    {
        "id": "c0de0f63d7dd74e9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4980,
        "wires": [
            [
                "77991745f0fd630b"
            ]
        ]
    },
    {
        "id": "83af80fac264d1d2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4940,
        "wires": [
            [
                "af50a02d7e7d9bd3",
                "5576643fcd9b0b7b"
            ]
        ]
    },
    {
        "id": "f32217a4962de62a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4220,
        "wires": [
            [
                "bea17800f02ffd37",
                "db324cd2c9b0d41c"
            ]
        ]
    },
    {
        "id": "20399c5ac562b160",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4260,
        "wires": [
            [
                "891a5905f2f9df38"
            ]
        ]
    },
    {
        "id": "e7b397764c7aad8d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4300,
        "wires": [
            [
                "3b384e6f8b43f469",
                "582afae777b4bde6"
            ]
        ]
    },
    {
        "id": "52543548dff5e20c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4340,
        "wires": [
            [
                "13c63a7d873423f4"
            ]
        ]
    },
    {
        "id": "0ce0d1ef96ec4af7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4380,
        "wires": [
            [
                "04478a945e83156d",
                "9acc0f0464d5a2df"
            ]
        ]
    },
    {
        "id": "c8a83a850d99d41c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4420,
        "wires": [
            [
                "29e31006fc913154"
            ]
        ]
    },
    {
        "id": "61936e7928fffda6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4460,
        "wires": [
            [
                "89200de5fa5565e6",
                "6666c71493fdc232"
            ]
        ]
    },
    {
        "id": "1edb21adc59a3766",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4500,
        "wires": [
            [
                "b0c7e64dadfe65a3"
            ]
        ]
    },
    {
        "id": "050ef5ffe7efb193",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4540,
        "wires": [
            [
                "c716c644ac7aa14b",
                "b2620bbeceacc0d1"
            ]
        ]
    },
    {
        "id": "9395149f4bb00111",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4580,
        "wires": [
            [
                "69bc625d5a18fce1"
            ]
        ]
    },
    {
        "id": "51e2fccbaa1e9fc3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4620,
        "wires": [
            [
                "503bd9187bc91bc4",
                "d48196dfee942b77"
            ]
        ]
    },
    {
        "id": "a3b3788d36729837",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4660,
        "wires": [
            [
                "20159ff589259894"
            ]
        ]
    },
    {
        "id": "8e5a2e76d3f4ef5d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4700,
        "wires": [
            [
                "5c0aa5e2088f7b71",
                "ddc10ec39f544076"
            ]
        ]
    },
    {
        "id": "baa513a71f193d7f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4740,
        "wires": [
            [
                "9ac814eebf03dae8"
            ]
        ]
    },
    {
        "id": "c25ac4bb97b31928",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4780,
        "wires": [
            [
                "dfbf739050de915d",
                "931b44eaf1b3b96a"
            ]
        ]
    },
    {
        "id": "af421235081fae99",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4820,
        "wires": [
            [
                "7e3b57e1150913dc"
            ]
        ]
    },
    {
        "id": "5d2fc8b68cd20aa2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1520,
        "y": 4860,
        "wires": [
            [
                "a762c4408b7a19e1",
                "9d508eb9b396552e"
            ]
        ]
    },
    {
        "id": "04fee0e4532ee05a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4900,
        "wires": [
            [
                "bef683eb8e1a8554"
            ]
        ]
    },
    {
        "id": "583b336ad2dbd523",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3480,
        "wires": [
            [
                "63b28c2fee9da5d0",
                "712dab8852386478"
            ]
        ]
    },
    {
        "id": "814b115fdfed7d44",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3560,
        "wires": [
            [
                "422ff28aaeaf165e",
                "882223bfa8b1d0b1"
            ]
        ]
    },
    {
        "id": "6ab59498710f4781",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3640,
        "wires": [
            [
                "b671b331e4aa0af4",
                "09c41c168d3eb3f4"
            ]
        ]
    },
    {
        "id": "39e1b0f54e2b30b8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3720,
        "wires": [
            [
                "51ba32848bb1ca6c",
                "8edd505bb009e812"
            ]
        ]
    },
    {
        "id": "1842a125a9e2664f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3800,
        "wires": [
            [
                "8c09cf9edf3b2c5a",
                "c002c3425b13b3fb"
            ]
        ]
    },
    {
        "id": "78401c289c205ddf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3880,
        "wires": [
            [
                "64b1e32fbe75fa37",
                "04c8a96cd504d3f4"
            ]
        ]
    },
    {
        "id": "26bb34008cf7a336",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 3960,
        "wires": [
            [
                "ba5af58ce8fd00e1",
                "a7b02a06ab571fcf"
            ]
        ]
    },
    {
        "id": "905bb1ad1c0f01b3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4040,
        "wires": [
            [
                "a5f8a8a6e99de3eb",
                "db0ed21e32299808"
            ]
        ]
    },
    {
        "id": "254bbeceed531b68",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4120,
        "wires": [
            [
                "1495ce7010001f91",
                "4fb6ccf6302b5f64"
            ]
        ]
    },
    {
        "id": "50d1c89c5c9855c2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4220,
        "wires": [
            [
                "de27117211cfa5e9",
                "d5cd49ebd843af25"
            ]
        ]
    },
    {
        "id": "6872219b9da2eff3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4300,
        "wires": [
            [
                "e7b5967037fc06ce",
                "5087248a292433f3"
            ]
        ]
    },
    {
        "id": "cb2c8ac2abb878fd",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4380,
        "wires": [
            [
                "66b9776d66230f9f",
                "83176ec8b053731a"
            ]
        ]
    },
    {
        "id": "476b692015e45ae2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4460,
        "wires": [
            [
                "a6ba38e20d7b9896",
                "0b49d37d6744f64a"
            ]
        ]
    },
    {
        "id": "fa5e41233e270282",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4540,
        "wires": [
            [
                "de30db7e7ea39dd9",
                "d2f8307cc8839ffd"
            ]
        ]
    },
    {
        "id": "cf693d8ded7bc44a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4620,
        "wires": [
            [
                "24b2ba8878db5b2e",
                "773e14788d93da3d"
            ]
        ]
    },
    {
        "id": "508b86f30dbc41c9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4700,
        "wires": [
            [
                "b6e60bcd27494dce",
                "ef215b93390db638"
            ]
        ]
    },
    {
        "id": "dcfbb75920228bba",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4780,
        "wires": [
            [
                "8cc242b8dc2681b8",
                "640c97b5ee1e7a46"
            ]
        ]
    },
    {
        "id": "02bdddd403f5b119",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4860,
        "wires": [
            [
                "9a4341c7a93cd60f",
                "cfad1e39a43f5db5"
            ]
        ]
    },
    {
        "id": "60854f74e8fd93c8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1000,
        "y": 4940,
        "wires": [
            [
                "8136d1191d6076d4",
                "ad54cf73ad527ab6"
            ]
        ]
    },
    {
        "id": "0e807def6bba805b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3520,
        "wires": [
            [
                "a43c92765f091e28"
            ]
        ]
    },
    {
        "id": "712dab8852386478",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3480,
        "wires": [
            [
                "7d6b94450f124f9a",
                "5ad54b2a7ed15358"
            ]
        ]
    },
    {
        "id": "7f8dc21566ce2f99",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3600,
        "wires": [
            [
                "54797a9f5f9c372d"
            ]
        ]
    },
    {
        "id": "882223bfa8b1d0b1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3560,
        "wires": [
            [
                "3cc3958eabf64ac6",
                "0c3cfa373cdf1820"
            ]
        ]
    },
    {
        "id": "5e157dc86e9ac6c4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3680,
        "wires": [
            [
                "90fea8d830386591"
            ]
        ]
    },
    {
        "id": "09c41c168d3eb3f4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3640,
        "wires": [
            [
                "3a550648b569bb29",
                "0754dcab0d41e6ac"
            ]
        ]
    },
    {
        "id": "e7d5e2844ed867bc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3760,
        "wires": [
            [
                "5641eee939d5bc8b"
            ]
        ]
    },
    {
        "id": "8edd505bb009e812",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3720,
        "wires": [
            [
                "20d4cddc65042659",
                "f37f0f4eebb5f361"
            ]
        ]
    },
    {
        "id": "4b0a7f629b40b92b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3840,
        "wires": [
            [
                "c262490e5b0497a4"
            ]
        ]
    },
    {
        "id": "c002c3425b13b3fb",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3800,
        "wires": [
            [
                "ce1d1e8bd71a9587",
                "3f7feb23b023afd0"
            ]
        ]
    },
    {
        "id": "9ab1736a0228ce43",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 3920,
        "wires": [
            [
                "9d73ae0012c16104"
            ]
        ]
    },
    {
        "id": "04c8a96cd504d3f4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3880,
        "wires": [
            [
                "473ea76fe38f224f",
                "1c26f4d2aefbc1f6"
            ]
        ]
    },
    {
        "id": "c0118340b05c0bb2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4000,
        "wires": [
            [
                "673cbabf808f1b35"
            ]
        ]
    },
    {
        "id": "a7b02a06ab571fcf",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 3960,
        "wires": [
            [
                "e417e3a6f989b9bd",
                "ac8d9fab92e19880"
            ]
        ]
    },
    {
        "id": "e433a030ab57307f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4080,
        "wires": [
            [
                "b27afb8948e6f680"
            ]
        ]
    },
    {
        "id": "db0ed21e32299808",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4040,
        "wires": [
            [
                "b367899e4eb36ab9",
                "08dc925a1fdf40a4"
            ]
        ]
    },
    {
        "id": "caad7d818247c99d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4160,
        "wires": [
            [
                "5315eb48754db3cc"
            ]
        ]
    },
    {
        "id": "4fb6ccf6302b5f64",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4120,
        "wires": [
            [
                "b08dda66c111e46f",
                "127aea32935e3d18"
            ]
        ]
    },
    {
        "id": "8933fa41c0d873ad",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4980,
        "wires": [
            [
                "c0de0f63d7dd74e9"
            ]
        ]
    },
    {
        "id": "ad54cf73ad527ab6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4940,
        "wires": [
            [
                "e0bd84f2873404a5",
                "83af80fac264d1d2"
            ]
        ]
    },
    {
        "id": "d5cd49ebd843af25",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4220,
        "wires": [
            [
                "9a42bccb5274321d",
                "f32217a4962de62a"
            ]
        ]
    },
    {
        "id": "04de294d215a376d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4260,
        "wires": [
            [
                "20399c5ac562b160"
            ]
        ]
    },
    {
        "id": "5087248a292433f3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4300,
        "wires": [
            [
                "1446b4287a081b8f",
                "e7b397764c7aad8d"
            ]
        ]
    },
    {
        "id": "839174725fb3481f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4340,
        "wires": [
            [
                "52543548dff5e20c"
            ]
        ]
    },
    {
        "id": "83176ec8b053731a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4380,
        "wires": [
            [
                "d6f5a79d6c76fd96",
                "0ce0d1ef96ec4af7"
            ]
        ]
    },
    {
        "id": "dae23a4e62aafd6a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4420,
        "wires": [
            [
                "c8a83a850d99d41c"
            ]
        ]
    },
    {
        "id": "0b49d37d6744f64a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4460,
        "wires": [
            [
                "efc4c9bf0c95d883",
                "61936e7928fffda6"
            ]
        ]
    },
    {
        "id": "864268dd14c59aa4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4500,
        "wires": [
            [
                "1edb21adc59a3766"
            ]
        ]
    },
    {
        "id": "d2f8307cc8839ffd",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4540,
        "wires": [
            [
                "2134aee9dfe65935",
                "050ef5ffe7efb193"
            ]
        ]
    },
    {
        "id": "f9c7ebb37231966c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4580,
        "wires": [
            [
                "9395149f4bb00111"
            ]
        ]
    },
    {
        "id": "773e14788d93da3d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4620,
        "wires": [
            [
                "ac1413f5b45bda66",
                "51e2fccbaa1e9fc3"
            ]
        ]
    },
    {
        "id": "46cdaacc9648ece5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4660,
        "wires": [
            [
                "a3b3788d36729837"
            ]
        ]
    },
    {
        "id": "ef215b93390db638",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4700,
        "wires": [
            [
                "9b0dc40c965e6b1c",
                "8e5a2e76d3f4ef5d"
            ]
        ]
    },
    {
        "id": "03316f06346597c8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4740,
        "wires": [
            [
                "baa513a71f193d7f"
            ]
        ]
    },
    {
        "id": "640c97b5ee1e7a46",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4780,
        "wires": [
            [
                "ea1a416ae30b3b54",
                "c25ac4bb97b31928"
            ]
        ]
    },
    {
        "id": "290b352cc929a7b1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4820,
        "wires": [
            [
                "af421235081fae99"
            ]
        ]
    },
    {
        "id": "cfad1e39a43f5db5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1260,
        "y": 4860,
        "wires": [
            [
                "de0474c623ccacb3",
                "5d2fc8b68cd20aa2"
            ]
        ]
    },
    {
        "id": "dc70c78176d21bad",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1010,
        "y": 4900,
        "wires": [
            [
                "04fee0e4532ee05a"
            ]
        ]
    },
    {
        "id": "0d59d33f010d3a30",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3520,
        "wires": [
            [
                "0e807def6bba805b"
            ]
        ]
    },
    {
        "id": "f3156657e4c9ddcc",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3600,
        "wires": [
            [
                "7f8dc21566ce2f99"
            ]
        ]
    },
    {
        "id": "f1695b4de3d85eef",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3680,
        "wires": [
            [
                "5e157dc86e9ac6c4"
            ]
        ]
    },
    {
        "id": "42ca36a7cc2538cb",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3760,
        "wires": [
            [
                "e7d5e2844ed867bc"
            ]
        ]
    },
    {
        "id": "1982ec68587d445b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3840,
        "wires": [
            [
                "4b0a7f629b40b92b"
            ]
        ]
    },
    {
        "id": "d3804ff033d855b1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 3920,
        "wires": [
            [
                "9ab1736a0228ce43"
            ]
        ]
    },
    {
        "id": "8bdac195aef949d6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4000,
        "wires": [
            [
                "c0118340b05c0bb2"
            ]
        ]
    },
    {
        "id": "077c531ab6fbe77a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4080,
        "wires": [
            [
                "e433a030ab57307f"
            ]
        ]
    },
    {
        "id": "3a141e74c3c6d123",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4160,
        "wires": [
            [
                "caad7d818247c99d"
            ]
        ]
    },
    {
        "id": "cc4a4c77746f63b8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4260,
        "wires": [
            [
                "04de294d215a376d"
            ]
        ]
    },
    {
        "id": "56a348c9efaa3738",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4340,
        "wires": [
            [
                "839174725fb3481f"
            ]
        ]
    },
    {
        "id": "d0aa355d4bc4c311",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4420,
        "wires": [
            [
                "dae23a4e62aafd6a"
            ]
        ]
    },
    {
        "id": "75b19dc895a29811",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4500,
        "wires": [
            [
                "864268dd14c59aa4"
            ]
        ]
    },
    {
        "id": "4e8d2c95f15ed2fe",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4580,
        "wires": [
            [
                "f9c7ebb37231966c"
            ]
        ]
    },
    {
        "id": "f83dae12357a9c3e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4660,
        "wires": [
            [
                "46cdaacc9648ece5"
            ]
        ]
    },
    {
        "id": "68474e1558414e1a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4740,
        "wires": [
            [
                "03316f06346597c8"
            ]
        ]
    },
    {
        "id": "7875e396abe4056d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4820,
        "wires": [
            [
                "290b352cc929a7b1"
            ]
        ]
    },
    {
        "id": "e2ee9b9da9a2b4d9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4900,
        "wires": [
            [
                "dc70c78176d21bad"
            ]
        ]
    },
    {
        "id": "dbe70caf44d262ff",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 800,
        "y": 4980,
        "wires": [
            [
                "8933fa41c0d873ad"
            ]
        ]
    },
    {
        "id": "f71a405f80158e1f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 2040,
        "y": 3360,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ]
    },
    {
        "id": "fe7c70c3ce699303",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 3230,
        "y": 1820,
        "wires": [
            [
                "e99a5f4974e41824",
                "f83e8b87b89f68b3"
            ]
        ]
    },
    {
        "id": "7e7d5d11fac70f1c",
        "type": "junction",
        "z": "31496c5ec25fc448",
        "x": 840,
        "y": 2360,
        "wires": [
            [
                "35a5747e957985c7"
            ]
        ]
    },
    {
        "id": "aca8e25181d21be7",
        "type": "modbus-client",
        "name": "WorkshopPLC",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "54dde46e.53267c",
        "type": "modbus-client",
        "name": "local",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.101.244",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "b7548bf37471dcfe",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#3981b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3987b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#3987b8",
                    "value": "#3987b8",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#363636",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#6caad1",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#f7effb",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f8bf0aa358206776",
        "type": "ui_tab",
        "name": "Modbus",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f743a2bb7d3e825e",
        "type": "ui_group",
        "name": "Control",
        "tab": "f8bf0aa358206776",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e6fc6bb3d2df4abd",
        "type": "ui_group",
        "name": "Display",
        "tab": "f8bf0aa358206776",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a649fab2.daf3d8",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "75e4e587.f4c0ac",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "75e4e587.f4c0ac",
        "type": "ui_tab",
        "name": "Files",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad6dcc65156dd01c",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "50a66416164a879c",
        "type": "ui_tab",
        "name": "Test",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1b8e2c970a49e110",
        "type": "ui_group",
        "d": true,
        "name": "Control",
        "tab": "50a66416164a879c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8bb4869336244573",
        "type": "ui_group",
        "d": true,
        "name": "Display",
        "tab": "50a66416164a879c",
        "order": 2,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7b22ef26c4fd9ba",
        "type": "ui_tab",
        "name": "Workshop PLC",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3d695ddc4ae8ac52",
        "type": "ui_group",
        "name": "Control",
        "tab": "e7b22ef26c4fd9ba",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f328fb03c98744c",
        "type": "ui_group",
        "name": "Graph",
        "tab": "e7b22ef26c4fd9ba",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "923b03fe8d0c014b",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "1b8e2c970a49e110",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "5188a4cc66916299",
        "type": "ui_group",
        "z": "3bab716a8a493dbf",
        "name": "Humidity",
        "tab": "e078c6b.429dd38",
        "order": 3,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1b078c3d9f60dd3",
        "type": "ui_group",
        "z": "2197f9b20e245122",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78467dade0c57cfb",
        "type": "ui_group",
        "z": "2197f9b20e245122",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e078c6b.429dd38",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "fingerprint",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "210b3638edc51bb5",
        "type": "ui_group",
        "name": "Table",
        "tab": "e078c6b.429dd38",
        "order": 4,
        "disp": true,
        "width": "19",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c1e6de0d4d0c97f8",
        "type": "ui_group",
        "name": "Heading",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": false,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "MSSQL",
        "server": "GIOVANNI\\SQLEXPRESS",
        "encyption": false,
        "database": "NodeRed"
    },
    {
        "id": "712b53e5.990dfc",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "usetls": false,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8eaf36042374305d",
        "type": "ui_tab",
        "name": "Recipes",
        "icon": "accessible",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0465010f96f3dad5",
        "type": "ui_group",
        "name": "Test Name",
        "tab": "8eaf36042374305d",
        "order": 1,
        "disp": true,
        "width": 31,
        "collapse": false,
        "className": ""
    },
    {
        "id": "53037fcbd25f4f9d",
        "type": "ui_group",
        "name": "Parameter Names 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5fcb0776.c461c8",
        "type": "ui_group",
        "name": "Control",
        "tab": "7dfaf7ff.8d5ae",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "fc657953.1b728",
        "type": "ui_group",
        "name": "admin1",
        "tab": "7dfaf7ff.8d5ae",
        "order": 3,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "7f74a584.dea814",
        "type": "ui_group",
        "name": "admin2",
        "tab": "7dfaf7ff.8d5ae",
        "order": 4,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "f033628c.9c7ce",
        "type": "ui_group",
        "name": "Change Tabs",
        "tab": "7dfaf7ff.8d5ae",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7dfaf7ff.8d5ae",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f24d9462b2c2f4ce",
        "type": "ui_group",
        "name": "Parameter Values 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "218e00eac196634f",
        "type": "ui_group",
        "name": "Basic Tests",
        "tab": "8eaf36042374305d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "422e58defd5a9006",
        "type": "ui_group",
        "name": "Parameter Names 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 8,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d53c3b4207d65609",
        "type": "ui_group",
        "name": "Parameter Values 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 9,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad102eceaed0af1f",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Names 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e2096695d7852db",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Values 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 13,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad3c4128defb0956",
        "type": "ui_group",
        "name": "Parameter Instructions 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 6,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d0276f15a55c5b4",
        "type": "ui_group",
        "name": "Parameter Instructions 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 10,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0106dea0f6c9ae8",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Instructions 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 14,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "37cb5eb849cdba88",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ba12de27dc123ba",
        "type": "ui_group",
        "name": "Registration",
        "tab": "37cb5eb849cdba88",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e76e570168f2dca",
        "type": "ui_group",
        "name": "Update Password",
        "tab": "37cb5eb849cdba88",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a5680e46e5f9771",
        "type": "ui_group",
        "name": "User database",
        "tab": "37cb5eb849cdba88",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f808231901c3caf8",
        "type": "ui_tab",
        "d": true,
        "name": "Home",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "93c16b2960c7118e",
        "type": "ui_group",
        "z": "c7f701c7168b803a",
        "name": "Humidity",
        "tab": "e078c6b.429dd38",
        "order": 3,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12f4f83a3e9bbadc",
        "type": "ui_group",
        "z": "61787a96e3740b32",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "63bd7a9185936c92",
        "type": "ui_group",
        "z": "61787a96e3740b32",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "778aba04212433f7",
        "type": "ui_group",
        "name": "Stop On Fail 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 7,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b4b99bf40ea5d2e",
        "type": "ui_group",
        "name": "Stop On Fail 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 11,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "05bf051581f2da76",
        "type": "ftp",
        "host": "192.168.101.251",
        "port": "21",
        "secureOptions": "",
        "user": "user",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "7415190bef9e3adb",
        "type": "ftp",
        "host": "10.27.6.208",
        "port": "",
        "secureOptions": "",
        "user": "ateka1",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "da9fe7a69397cf03",
        "type": "modbus-client",
        "name": "Ateka2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.203",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "51ce6aa1.620754",
        "type": "ui_group",
        "name": "ui_control",
        "tab": "3b08fac0.8f06b6",
        "order": 1,
        "disp": true,
        "width": "22",
        "collapse": false
    },
    {
        "id": "3b08fac0.8f06b6",
        "type": "ui_tab",
        "d": true,
        "name": "Home",
        "icon": "track_changes",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "571a38b1.5e3638",
        "type": "ui_group",
        "name": "Richer Table",
        "tab": "29ec6908.552b36",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "29ec6908.552b36",
        "type": "ui_tab",
        "d": true,
        "name": "Home",
        "icon": "track_changes",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "60f89ca62975bc48",
        "type": "ui_tab",
        "name": "Tab 13",
        "icon": "dashboard",
        "order": 12
    },
    {
        "id": "494580998616b55b",
        "type": "ui_group",
        "name": "Login",
        "tab": "8eaf36042374305d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "18ea443589aff38f",
        "type": "ui_group",
        "name": "Login",
        "tab": "37cb5eb849cdba88",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0eb4edf7837f066",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "9a5680e46e5f9771",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "120c3420c4877555",
        "type": "ui_tab",
        "name": "Tab 13",
        "icon": "dashboard",
        "order": 13
    },
    {
        "id": "dc214e13ebddcd17",
        "type": "ui_tab",
        "name": "Tab 14",
        "icon": "dashboard",
        "order": 14
    },
    {
        "id": "d343b6541bd84142",
        "type": "ui_group",
        "name": "Insufficient Rights",
        "tab": "37cb5eb849cdba88",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ebeab3422d31a778",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.0.66",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 0,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d530b669d6056648",
        "type": "modbus-client",
        "name": "Dynamic (Panel Testers)",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.203",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ec998e1eb45fe4eb",
        "type": "modbus-client",
        "name": "Ateka1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.202",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5d0e1198b746388a",
        "type": "modbus-client",
        "name": "Ateka3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.204",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4f042df482363103",
        "type": "modbus-client",
        "name": "Ateka4",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.27.6.205",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9282641e31033d2f",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "778aba04212433f7",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "f917955ce228f584",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "68e107804e2c1e77",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "53037fcbd25f4f9d",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "ec91cb47c488d0b5",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "4cab5ce81ee83bc1",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "731c78a7a60cc2c4",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "6b3e2a245577b3e3",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 10,
        "width": "2",
        "height": "1"
    },
    {
        "id": "5203beda5481abe3",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "ad3c4128defb0956",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "76c2640278b42123",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "025232cb7678ccc5",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 14,
        "width": "4",
        "height": "1"
    },
    {
        "id": "37193b5976b8907d",
        "type": "ui_gauge",
        "z": "3bab716a8a493dbf",
        "name": "Humid Gauge",
        "group": "5188a4cc66916299",
        "order": 1,
        "width": 9,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": "60",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "92",
        "className": "",
        "x": 440,
        "y": 260,
        "wires": []
    },
    {
        "id": "8343c4742146fe3f",
        "type": "ui_chart",
        "z": "3bab716a8a493dbf",
        "name": "Humidity Chart",
        "group": "5188a4cc66916299",
        "order": 2,
        "width": 10,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b8f1f2881f690446",
        "type": "ui_gauge",
        "z": "2197f9b20e245122",
        "name": "TempGauge",
        "group": "78467dade0c57cfb",
        "order": 1,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "C",
        "format": "{{value | number:1}}",
        "min": "40",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "56",
        "className": "",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "b7cc2d5e27f8b491",
        "type": "ui_chart",
        "z": "2197f9b20e245122",
        "name": "Temp Chart",
        "group": "78467dade0c57cfb",
        "order": 2,
        "width": 11,
        "height": 4,
        "label": "Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "chart",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "decd3404fa48ec62",
        "type": "ui_gauge",
        "z": "c7f701c7168b803a",
        "name": "Humid Gauge",
        "group": "93c16b2960c7118e",
        "order": 1,
        "width": 9,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": "60",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "92",
        "className": "",
        "x": 440,
        "y": 260,
        "wires": []
    },
    {
        "id": "190d4f9e06f71b90",
        "type": "ui_chart",
        "z": "c7f701c7168b803a",
        "name": "Humidity Chart",
        "group": "93c16b2960c7118e",
        "order": 2,
        "width": 10,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a0e5a87e15d32bb8",
        "type": "ui_gauge",
        "z": "61787a96e3740b32",
        "name": "TempGauge",
        "group": "63bd7a9185936c92",
        "order": 1,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "C",
        "format": "{{value | number:1}}",
        "min": "40",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "56",
        "className": "",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "8f05bbe874f46dfc",
        "type": "ui_chart",
        "z": "61787a96e3740b32",
        "name": "Temp Chart",
        "group": "63bd7a9185936c92",
        "order": 2,
        "width": 11,
        "height": 4,
        "label": "Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "chart",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d2727ddfa00b147b",
        "type": "function",
        "z": "ec74dd5cee732abd",
        "name": "Test",
        "func": "msg.payload = 'Checking things'\nmsg.info = 'Extra info';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "33537d783e3681db",
        "type": "function",
        "z": "ec74dd5cee732abd",
        "name": "Test",
        "func": "msg.payload = 'Checking more things'\nmsg.info = 'Even more extra info';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "1ae41b3f6186f9fd"
            ]
        ]
    },
    {
        "id": "1ae41b3f6186f9fd",
        "type": "delay",
        "z": "ec74dd5cee732abd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bab0609bea1707c5",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Par01",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par02",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par03",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par05",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par06",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par07",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par08",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par09",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par15",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par17",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par18",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par19",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par20",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 20,
        "x": 190,
        "y": 4060,
        "wires": [
            [
                "0fe92fb3fd7e197d"
            ],
            [
                "1bd2b20c4f16ff70"
            ],
            [
                "b9182b988e3bae30"
            ],
            [
                "52a49eb7c9602eee"
            ],
            [
                "a41c8551aae893fb"
            ],
            [
                "d4eb7c4119fd72d2"
            ],
            [
                "058e802695751c9a"
            ],
            [
                "49795f709c828c99"
            ],
            [
                "b80542d63469f2c6"
            ],
            [
                "38b6d67c867c539c"
            ],
            [
                "d16c761985a57a84"
            ],
            [
                "a37c187c76cbbf79"
            ],
            [
                "5db83138e42c29c8"
            ],
            [
                "968cea58cfded069"
            ],
            [
                "51527e279977768a"
            ],
            [
                "f94a1141b8bfed36"
            ],
            [
                "b6fb0b784e7fc29b"
            ],
            [
                "5c701d2c0eda0332"
            ],
            [
                "8abcfc19b1414e84"
            ],
            [
                "e63c9494c350d701"
            ]
        ]
    },
    {
        "id": "b2be7fdf0830b5ac",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Clear",
        "func": "msg.payload = {\n    \"name\": \"\",\n    \"value\": null,\n    \"upperTol\": null,\n    \"lowerTol\": null,\n    \"instructions\": \"\",\n    \"ifTestFailStop\": false\n};\nmsg.complete = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 3360,
        "wires": [
            [
                "0fe92fb3fd7e197d",
                "1bd2b20c4f16ff70",
                "b9182b988e3bae30",
                "52a49eb7c9602eee",
                "a41c8551aae893fb",
                "d4eb7c4119fd72d2",
                "058e802695751c9a",
                "49795f709c828c99",
                "b80542d63469f2c6",
                "38b6d67c867c539c",
                "d16c761985a57a84",
                "a37c187c76cbbf79",
                "5db83138e42c29c8",
                "968cea58cfded069",
                "51527e279977768a",
                "f94a1141b8bfed36",
                "b6fb0b784e7fc29b",
                "5c701d2c0eda0332",
                "8abcfc19b1414e84",
                "e63c9494c350d701",
                "bb9f75da651b4614",
                "f71a405f80158e1f"
            ]
        ]
    },
    {
        "id": "d266b35bbc25032f",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Parameter join out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 2715,
        "y": 3440,
        "wires": []
    },
    {
        "id": "37a523ac432e0d6b",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Trigger in",
        "links": [
            "b19f1d350c2fabd7",
            "c20be865f12bee03"
        ],
        "x": 2295,
        "y": 3760,
        "wires": [
            [
                "0bd567f1fc88482e",
                "8c047014126f4c26"
            ]
        ]
    },
    {
        "id": "760861ebeac0ea7a",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Clear Parameters in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 155,
        "y": 3400,
        "wires": [
            [
                "b2be7fdf0830b5ac",
                "bbb3f06114065c8c"
            ]
        ]
    },
    {
        "id": "82a83f4a48030b23",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Paramater data in",
        "links": [
            "44dbecae4687566e"
        ],
        "x": 95,
        "y": 4100,
        "wires": [
            [
                "bab0609bea1707c5",
                "06fbf0db7aa5673a"
            ]
        ]
    },
    {
        "id": "0e2055f1de766c7f",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write to HMI CSV",
        "info": "",
        "x": 160,
        "y": 2580,
        "wires": []
    },
    {
        "id": "54429a976120698f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined) {\n    msg.payload = context.get('buffer');\n    return msg;\n}\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Add the incoming message payload and topic to the buffer\nbuffer[msg.topic] = msg.payload;\n\n// Set the buffer array back to context\ncontext.set('buffer', buffer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3340,
        "y": 320,
        "wires": [
            []
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "bc1527f0658c3745",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 900,
        "y": 2740,
        "wires": [
            [
                "674bdf8dd88a2f92",
                "07e2b42143d640d9"
            ]
        ],
        "info": "Looking for the HMI Recipe CSV"
    },
    {
        "id": "2d41696a18e88a01",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Config FL Set Par",
        "func": "msg.data = msg.payload; // Data that will be written to the csv\n\n\n//Set: filename for HMI csv\nmsg.data.shortFilename = flow.get('HMIrecipeName') // Note: Might want to dynamically set this\nmsg.data.fileLocation = flow.get('HMIcsvLocation'); // Not the whole path + filename\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: msg.data.fileLocation,\n    pattern: msg.data.shortFilename \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2740,
        "wires": [
            [
                "bc1527f0658c3745",
                "2e8743f7b80084b4"
            ]
        ]
    },
    {
        "id": "674bdf8dd88a2f92",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 119",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2700,
        "wires": []
    },
    {
        "id": "07e2b42143d640d9",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 2740,
        "wires": [
            [
                "083c7d8a391fde5e",
                "2be4d373775ce795"
            ],
            [
                "79f57fb83796d203"
            ]
        ]
    },
    {
        "id": "2f58cbe080870585",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Config Read file",
        "func": "//Also used for config write\nmsg.payload = {};\n// Set\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; \n// Settings things up for the bypass\nmsg.payload.text = msg.data.text;\nmsg.payload.filename = msg.filename;\nmsg.payload.recipeIdentity = msg.recipeIdentity;\nmsg.topic = \"bypass\";\ndelete msg.filename\n\n\nreturn [{filename: msg.payload.filename}, msg];\n\n//would be used with the line by line file read\nflow.set(\"newFilename\", msg.filename.substr(0, msg.filename.lastIndexOf(\".\")) + \"NEW\" + msg.filename.substr(msg.filename.lastIndexOf(\".\"), msg.filename.length));\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2920,
        "wires": [
            [
                "f1d50dd15d94069a",
                "623845cff6af01b9"
            ],
            [
                "175c729c01f2cfbd",
                "9f962157dbb6d25e"
            ]
        ]
    },
    {
        "id": "f1d50dd15d94069a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 2880,
        "wires": []
    },
    {
        "id": "623845cff6af01b9",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1620,
        "y": 2920,
        "wires": [
            [
                "a2edcd5fcd18c313",
                "a0de533effc5e97a"
            ]
        ]
    },
    {
        "id": "175c729c01f2cfbd",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Bypass Recipe File Exists",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2960,
        "wires": []
    },
    {
        "id": "a2edcd5fcd18c313",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 122",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 2880,
        "wires": []
    },
    {
        "id": "a0de533effc5e97a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set topic",
        "func": "msg.topic = \"fileData\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2920,
        "wires": [
            [
                "fcb4484315826ecd"
            ]
        ]
    },
    {
        "id": "fcb4484315826ecd",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1940,
        "y": 2920,
        "wires": [
            [
                "df7bed9d57e1e061",
                "666e0a81ae995c72"
            ]
        ]
    },
    {
        "id": "df7bed9d57e1e061",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 123",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 2880,
        "wires": []
    },
    {
        "id": "666e0a81ae995c72",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "buffer (csv parts reading)",
        "func": "// reading the file as a whole batch\n\n//New Whoop whoop fix fix\nlet uniqueKey = \"\",\n    searchStr1 = \"\\r\\n\\r\\n\",\n    startIndex = 100;\n\n//del testing code\nlet i = 0, j = 0, uniqueKeyList = [];\n\nif (msg.payload.fileData.indexOf(searchStr1, startIndex) !== -1) { //Checks to see what line breakers are used\n//del\n//node.warn(\"if(1) reached on i: \" + i++);\n\n    while (startIndex !== -1) {\n        startIndex = msg.payload.fileData.indexOf(searchStr1, startIndex);\n        //node.warn('start index before: ' + startIndex);\n        if (startIndex !== -1) {\n            uniqueKey = msg.payload.fileData.substr(startIndex + 4, 50);\n            uniqueKey = uniqueKey.split(',')[0];\n            //del 1\n            //node.warn(\"Found Unique Key: \" + uniqueKey);\n            if (uniqueKey.includes(msg.payload.bypass.recipeIdentity)) {\n                //node.warn(\"Seems like we got: \" + uniqueKey + \"\\nAt an index of: \" + startIndex);\n                break;\n            }\n            startIndex += searchStr1.length;\n            //node.warn('start index after: ' + startIndex);\n        }\n    }\n    startIndex += 4;\n} else {\n    //del\n    //node.warn(\"if(2) reached on i: \" + i++);\n\n    uniqueKey = \"\";\n    let searchStr2 = \"\\n\\n\";\n    startIndex = 0;\n\n    //del\n    //node.warn(\"At  statement 2\");\n    while (startIndex !== -1) {\n        startIndex = msg.payload.fileData.indexOf(searchStr2, startIndex);\n        //node.warn(\"We got here with startindex: \" + startIndex);\n        if (startIndex !== -1) {\n            uniqueKey = msg.payload.fileData.substr(startIndex + 2, 50);\n            uniqueKey = uniqueKey.split(',')[0];\n            if (uniqueKey.includes(msg.payload.bypass.recipeIdentity)) {\n                //node.warn(\"Seems like we got: \" + uniqueKey + \"\\nAt an index of: \" + startIndex);\n                break;\n            }\n            startIndex += searchStr1.length;\n        }\n    }\n    startIndex += 2;\n}\nstartIndex = (startIndex < 10) ? -1 : startIndex;\n//node.warn('Final startIndex: ' + startIndex);\n////\n\n\n//My checks, just leaving it here for now. I seemed to have come back to it quite a bit.\nmsg.look = {\n    startIndex: startIndex,\n    search: msg.payload.bypass.recipeIdentity,\n    check: msg.payload.fileData.indexOf(msg.payload.bypass.recipeIdentity),\n    uniqueKey: uniqueKey\n}\n////\n\nif (startIndex != -1) {\n    let end1 = \"\\r\\n\\r\\n\", // Finds the double new line (end of section)\n        end2 = \"\\n\\n\",\n        endIndex = -1;\n    if (msg.payload.fileData.indexOf(end1, startIndex) == -1) {\n        if (msg.payload.fileData.indexOf(end2, startIndex) == -1) {\n            node.warn('Cannot find end of index insert into HMI Recipe csv');\n        } else {\n            endIndex = msg.payload.fileData.indexOf(end2, startIndex);\n        }\n    } else {\n        endIndex = msg.payload.fileData.indexOf(end1, startIndex) + 2;\n    }\n        \n        //foundSection = msg.payload.fileData.slice(startIndex, endIndex);\n    msg.filename = msg.payload.bypass.filename;\n\n    msg.check = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        firstPart: msg.payload.fileData.slice(0, startIndex),\n        insert: msg.payload.bypass.text,\n        lastPart: msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length)\n\n    };\n\n\n    //Delete and insert\n    msg.payload = msg.payload.fileData.slice(0, startIndex) + msg.payload.bypass.text + msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length);\n} else {\n    msg.payload = msg.payload.fileData + msg.payload.bypass.text;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2920,
        "wires": [
            [
                "797b5c9a9c6ad7b8",
                "da75d8cd36b0d376"
            ]
        ]
    },
    {
        "id": "797b5c9a9c6ad7b8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write Recipe File Exist",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 2860,
        "wires": []
    },
    {
        "id": "14d5ef8a8368fcf9",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2640,
        "y": 2920,
        "wires": [
            [
                "4bf3fc9956a31dd3"
            ]
        ]
    },
    {
        "id": "4bf3fc9956a31dd3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 125",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 2880,
        "wires": []
    },
    {
        "id": "5f858caa962e998c",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 2740,
        "wires": [
            [
                "52fb7c8c7dcbe77e"
            ]
        ]
    },
    {
        "id": "52fb7c8c7dcbe77e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set write -> HMI CSV",
        "func": "msg.payload = flow.get(\"writeData\");\n\n//Set\nlet data = msg.payload,\n    parKeys,\n    basKey;\n\nif (msg.payload.parameterData != undefined) {\n    parKeys = Object.keys(msg.payload.parameterData) || [];\n} else {\n    parKeys = []\n}\nif (msg.payload.basic != undefined) {\n    basKey = Object.keys(msg.payload.basic) || [];\n} else {\n    basKey = []\n}\n    \nlet names = [],\n    values = [],\n    instructions = [],\n    output = [],\n    parameterCount = 20, // Set\n    basicCount = basKey.length,\n    totalCount = 35, //basicCount + parameterCount;\n    count = 1;\n//Active: This can probably be moved elsewhere\n/*\ntemp = {};\nfor (let i = 1; i < 3; i += 2) {\n    temp[basKey[i--]] = \n}\n*/\n//\nmsg.recipeIdentity = data.File_Code;\n// First part is mostly hard coded parameters\noutput.push([data.File_Code, 5, totalCount, , , ,],\n            [8, 20, 0, 0, , ,],\n            [5, 2, 4, 2, , ,],\n            [5, 2, 4, 2, , ,],\n            [0, 1, 0, 0, , ,],\n            [8, 25, 0, 0, , ,]);\n\n//First line of data is special\noutput.push([count++, data.File_Name, 0, 0, + data.Powered_Inspection, ,]);\n\n//del\nlet basicHeaders = [\"Ground Bond\", \"ACW Test\", \"Insulation Resistance\", \"Earth Leakage\"],\n    j = 0,\n    i = 0;\n\nfor(i = 0; i < basicCount; i++) {\n    //node.warn('start i: ' + i);\n    output.push([count++, basicHeaders[j++], data.basic[basKey[i]].lowerVal, data.basic[basKey[i]].upperVal, 0, ,]);\n    //node.warn('end i: ' + i);\n}\n\n//node.warn('final i: ' + i);\n//output.push([count++, basicHeaders[j++], data.basic[basKey[--i]], 0, 0, ,]) // used for initial\n\n//Incomplete: Assumption 1 that the length of incoming Parameter data is < \nfor (let i = 0; i < parKeys.length; i++) {/*\n    names.push(data.parameterData[parKeys[i]].name);\n    values.push(data.parameterData[parKeys[i]].value);\n    instructions.push(data.parameterData[parKeys[i]].instructions);*/\n    output.push([count++, data.parameterData[parKeys[i]].name.substring(0, 40), data.parameterData[parKeys[i]].lowerVal, data.parameterData[parKeys[i]].upperVal, + data.parameterData[parKeys[i]].ifTestFailStop, data.parameterData[parKeys[i]].instructions.substring(0, 50)]);\n}/*\nfor (let i = basicCount + parKeys.length; i < totalCount - 1; i++) {// adds the zeros in using Assumption 1\n    output.push([count++, , 0, 0, 0,\"\"]);\n}*/\nwhile (count <= totalCount) {\n    output.push([count++, , 0, 0, 0, \"\"]);\n}\nlet text = \"\";\n//del\nnode.send([, {output: output}]);\n//\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    text += output[i].toString() + \"\\r\\n\";\n}\n\ntext += '\\r\\n';\n\nmsg.payload = {\n//    output: output,\n    text: text\n}\n\nmsg.check = {\n    basKey: basKey,\n    parKeys: parKeys\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2740,
        "wires": [
            [
                "33c974f546e17556",
                "2d41696a18e88a01"
            ],
            [
                "35e0776ee3d875af"
            ]
        ]
    },
    {
        "id": "33c974f546e17556",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Testing recipe",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2700,
        "wires": []
    },
    {
        "id": "083c7d8a391fde5e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 126",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 2700,
        "wires": []
    },
    {
        "id": "bf6864ec2d7a5b95",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write to HMI CSV",
        "links": [
            "34c7ab41bb4b3dd7"
        ],
        "x": 285,
        "y": 2660,
        "wires": [
            [
                "f44b2641331a775c",
                "52fb7c8c7dcbe77e"
            ]
        ]
    },
    {
        "id": "f44b2641331a775c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 112",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 2700,
        "wires": []
    },
    {
        "id": "73e98307bfe33bc0",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "Start-Up",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "ca4e8d0a05d1833c"
            ]
        ]
    },
    {
        "id": "ca4e8d0a05d1833c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "Start up Flow Variables",
        "func": "\n\nflow.set('recipeJSONlocation', \"C:/Users/User/Documents/Coding/Node Red/Recipes/\"); // Note that this ends with a /\nflow.set('HMIcsvLocation', \"C:/Users/User/Documents/Coding/Node Red/Recipes/\");\nflow.set('HMIrecipeName', 'NewEnRcp.csv');\nglobal.set('userCredentialsLocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/CSVs/');\nglobal.set('userCredentialsFilename', 'userCredentials.csv');\nflow.set('dashboardCredentialsLocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/CSVs/'); // CSV file with login data for Dashboard usage\nflow.set('dashboardCredentialsName', 'dashboardCredentials.csv');\n\nif (flow.get('testResultID') == undefined) {\n    flow.set('testResultID', 236);\n}\nflow.set('stepResultsCSVlocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/CSVs/')\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2be4d373775ce795",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Create First section of HMI csv",
        "func": "\n\nmsg.payload = { // Used for File Lister node\n    start: global.get('userCredentialsLocation'),\n    //Set: name of file with user names and passwords\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2740,
        "wires": [
            [
                "5295bb96ba9d5449",
                "ceb27c5af4f2ec19"
            ]
        ]
    },
    {
        "id": "5295bb96ba9d5449",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 1540,
        "y": 2740,
        "wires": [
            [
                "7ceec3956a7dd616",
                "302dc2211d42de0e"
            ]
        ],
        "info": "Looking for the Operator credentials csv"
    },
    {
        "id": "7ceec3956a7dd616",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 127",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 2700,
        "wires": []
    },
    {
        "id": "302dc2211d42de0e",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 2740,
        "wires": [
            [
                "345bb44f70f03eb7",
                "413d54f4b5d93ff2"
            ],
            [
                "116e4541601aeeab",
                "584ae33d92cddd1e"
            ]
        ]
    },
    {
        "id": "345bb44f70f03eb7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Credential File Not Exist",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 2680,
        "wires": []
    },
    {
        "id": "116e4541601aeeab",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Credential File Exists",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 2820,
        "wires": []
    },
    {
        "id": "a0e48396595f0b35",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2020,
        "y": 2780,
        "wires": [
            [
                "c77e73b050df7609"
            ]
        ]
    },
    {
        "id": "c77e73b050df7609",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2170,
        "y": 2780,
        "wires": [
            [
                "cb14a2cccdac1bc3",
                "2bbb7773229710e0"
            ]
        ]
    },
    {
        "id": "584ae33d92cddd1e",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set Filename",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1850,
        "y": 2780,
        "wires": [
            [
                "a0e48396595f0b35"
            ]
        ]
    },
    {
        "id": "cb14a2cccdac1bc3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "CSV output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 2740,
        "wires": []
    },
    {
        "id": "2bbb7773229710e0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set write -> HMI CSV",
        "func": "\nmsg.data.usernames = [];\nmsg.data.passwords = [];\n\nlet count = 1;\nlet output = [];\n\noutput.push(\n    ['ENRCP-4.0', , , , , , ],\n    ['Operator', 3, 30, , , , ],\n    [8, 20, 0, 0, , , ],\n    [8, 20, 0, 0, , , ],\n    [2, 1, 0, 0, , ,]);\n\n// Set: set the number of possible credential entries\nlet operatorCount = 30;\n\n//Set: The credential character limit\nlet credCharLimit = 40;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    msg.data.usernames.push(isNaN(msg.payload[i].username) ? msg.payload[i].username.substring(0, credCharLimit) : msg.payload[i].username.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be username\n    msg.data.passwords.push(msg.payload[i].password.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be password\n}\n\nif (msg.data.usernames.length < operatorCount) { // Checks to make sure list of operators isn't longer than allowed count\nlet i = count; // Count is set to 1\n    for (i ; i <= msg.data.usernames.length; i++, count++) { // count and i start at 1 here for the ID / count column\n        output.push([count, msg.data.usernames[i-1], msg.data.passwords[i-1], 0, , , ]) // pushes in user row count, username and user ID\n    }\n\n    for (i; i <= operatorCount; i++, count++) {\n        output.push([count,'','', 0, , , ]);\n    }\n} else {\n    // Error handling for having more operators than will be loaded onto the PLCs\n    // Else the first 20 entries will be loaded in\n    for (let i = count; i <= operatorCount; i++, count++) {\n        output.push([count, msg.data.usernames[i - 1], msg.data.passwords[i - 1]]) // pushes in user row count, username and user ID\n    }\n}\n\n\nlet text = \"\";\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    text += output[i].toString() + \"\\r\\n\";\n}\ntext += '\\r\\n';\n\n//Setting up config for write file node\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; // This should be defined in 'Config FL Set Par' node\nmsg.payload = text + msg.data.text;\n\nmsg.check = {\n    output: output,\n    text: text\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 2780,
        "wires": [
            [
                "4b28ff99955b02d3",
                "5276a44f13b2ac4a"
            ]
        ]
    },
    {
        "id": "4b28ff99955b02d3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write Recipe Initial Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 2740,
        "wires": []
    },
    {
        "id": "5a1aa2cf708531e2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set Payload",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2720,
        "wires": [
            [
                "7193f4f49117ee08"
            ]
        ]
    },
    {
        "id": "35e0776ee3d875af",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 128",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 2820,
        "wires": []
    },
    {
        "id": "c9d917bc3167530b",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "name": "Comment Notes",
        "info": "Make sure values and names are filled in with pop up",
        "x": 1360,
        "y": 3620,
        "wires": []
    },
    {
        "id": "0bd567f1fc88482e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 147",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 3760,
        "wires": []
    },
    {
        "id": "31e3351497920e04",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA1';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1360,
        "wires": [
            [
                "7f42b6e9796289d9",
                "fe0b8542e56ca74e"
            ],
            [
                "fe7c70c3ce699303"
            ]
        ]
    },
    {
        "id": "e82a8c85b2d2b208",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 2830,
        "y": 1360,
        "wires": [
            [
                "31e3351497920e04",
                "af1dba479e7a54af",
                "30f8b47daa429470",
                "fa64b89314d98475",
                "dad481905a20fdea",
                "6dd7449228ea05ec"
            ]
        ]
    },
    {
        "id": "7f42b6e9796289d9",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 1360,
        "wires": [
            [
                "067deaf06730b153",
                "604939cd16e20c85"
            ]
        ]
    },
    {
        "id": "fe0b8542e56ca74e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3250,
        "y": 1240,
        "wires": []
    },
    {
        "id": "604939cd16e20c85",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 175",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3430,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e99a5f4974e41824",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "PLC Test indicator out",
        "mode": "link",
        "links": [
            "a65d38dff46ce146"
        ],
        "x": 3295,
        "y": 1820,
        "wires": []
    },
    {
        "id": "af1dba479e7a54af",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 177",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1280,
        "wires": []
    },
    {
        "id": "067deaf06730b153",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3360,
        "y": 1360,
        "wires": [
            [
                "4b4e2f01c9257cc0"
            ],
            []
        ]
    },
    {
        "id": "c2c9735da2d44354",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 174",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3490,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e92d85f0a4cc45e0",
        "type": "ui_template",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "group": "0465010f96f3dad5",
        "name": "CSS",
        "order": 17,
        "width": 0,
        "height": 0,
        "format": "<style>\n  body {\n    background: -webkit-linear-gradient(\n    55deg,\n    #282C33 0%,\n    #3e4147 50%,\n    #282C33 100%\n    ) !important;\n  }\n  #Dashboard_Recipes{\n    //background-image: url(\"C:\\Users\\User\\Pictures\\Image1.jpg\");\n    //background-color: blue;\n    border-style: none;\n\n  }\n  /*Header background colour*/\n  md-content[ng-if=\"main.loaded\"] md-toolbar {\n    background-color: #2C506B !important;\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Header Text*/\n  h1 {\n    color: #faebd7 !important;\n    font-weight: 500 !important;\n  }\n\n  /*Background colour*/\n  md-content[ng-if=\"main.loaded\"] section {\n    //background-color: #282C33;\n  }\n  /*Group name colour*/\n  p[class=\"nr-dashboard-cardtitle\"] {\n    //color: #706F6F !important;\n    color: #faebd7 !important;\n  }\n\n  /*Buttons */\n  /*Default*/\n  button {\n    background-color: #3981B8 !important;\n    border-radius: 8px !important;\n    box-shadow: 2px 2px 3px rgba(44, 80, 107, 1) !important;\n    border-radius: 6px !important;\n  }\n  button:hover {\n    background-color: rgba(57, 129, 184, 0.7) !important;\n    border-radius: 6px !important;\n  }\n  .logout {\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n  }\n  .save button:hover, button.nr-dashboard-form-button[type=\"submit\"]:hover {\n  background-color: rgba(26, 199, 40, 1) !important;\n  border-radius: 6px !important;\n\n  color: black !important;\n  }\n  .clear button:hover, button.nr-dashboard-form-button[type=\"button\"]:hover{\n  background-color: #e31e35 !important;\n  color black !important;\n  }\n  /*Default switch icons (when switched on)*/\n  /*Switch bar*/\n  md-switch.md-checked .md-bar { \n    background-color: #13851c!important;\n  }\n  /*switch ball*/\n  md-switch.md-checked .md-thumb {\n    background-color: #1ac728 !important;\n  }\n  /*Menu button*/\n  button[aria-label=\"menu button\"] {\n    background: transparent !important;\n    box-shadow: none !important;\n  }\n  /*Refresh button on Settings tab*/\n  md-card[node-class=\"indent\"] {\n    margin-left: 16px !important;\n  }\n\n  /*Side Nav*/\n  button.md-no-style.md-button {\n    background-color: transparent !important;\n    border-radius: 0px !important;\n  }\n  .nr-menu-item-active div button { \n    border-right: 4px solid #3981B8 !important;\n  }\n  body.nr-dashboard-theme md-sidenav div.md-list-item-inner { /*Side nav Text*/\n    color: #95B0D5 !important;\n  }\n  md-sidenav {\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Input fields*/\n  md-input-container.md-default-theme .md-input, md-input-container .md-input, .md-select-value {\n    border-color: #EfA705 !important;\n  }\n\n  /*All Panels*/\n  ui-card-panel {\n    border-radius: 6px;\n    box-shadow: 0px 0px 3px #2C506B;\n    border-style: none !important;\n    background-color: rgba(51,51,51,255) !important;\n  }\n  #Recipes_Test_Name {\n    display: grid !important;\n    place-items: center !important;\n  }\n  /*Status message*/\n  [node-id=d6300eb99d1c25a1] [class=\"value\"] {\n    color: #e31e35 !important;\n  }\n  .save button  {\n    border: none;\n    border-radius: 8px;\n    text-align: center;\n    width: 50% ;\n    transition-duration: 0.4s;\n    background-color: #ddffdd;\n    color: white;         \n  }\n\n  /*Table rows*/\n  .tabulator-headers > div {\n    background-color: #f5ca69 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-odd {\n    background-color: #b0cde3 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-even {\n    background-color: #f9dc9b !important;\n  }\n  .chart {\n    //background-color: green;\n  }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "051a2227bc7c22da"
            ]
        ]
    },
    {
        "id": "051a2227bc7c22da",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 220,
        "wires": []
    },
    {
        "id": "ceb27c5af4f2ec19",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 248",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 2620,
        "wires": []
    },
    {
        "id": "22a8c8bc6b6eb29e",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Active",
        "info": "Change the filename back to normal\n",
        "x": 2620,
        "y": 2880,
        "wires": []
    },
    {
        "id": "2e8743f7b80084b4",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 270",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2640,
        "wires": []
    },
    {
        "id": "6faf52c7c703e7f7",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "Page Styles Block",
        "info": "",
        "x": 170,
        "y": 180,
        "wires": []
    },
    {
        "id": "4bd08e17390a6e11",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Initialise PLC checking in",
        "links": [
            "ad724f31606be360"
        ],
        "x": 2595,
        "y": 1500,
        "wires": [
            [
                "1882869c0537e468"
            ]
        ]
    },
    {
        "id": "8b9fd71f247fb190",
        "type": "modbus-write",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3190,
        "y": 1960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "82ccf2bea16bdfdb",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "link in 1",
        "links": [],
        "x": 2775,
        "y": 2020,
        "wires": [
            [
                "717db19b1919d2a0"
            ]
        ]
    },
    {
        "id": "717db19b1919d2a0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set Payload",
        "func": "msg.paylaod = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 1960,
        "wires": [
            [
                "8b9fd71f247fb190"
            ]
        ]
    },
    {
        "id": "ee2b12fe49a320a6",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "delete",
        "topicType": "str",
        "x": 130,
        "y": 3140,
        "wires": [
            [
                "c6b6ead33ab7fcbd",
                "8f1e40768e5d634f"
            ]
        ]
    },
    {
        "id": "2fb51950723c283f",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Delete Recipe in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 205,
        "y": 3180,
        "wires": [
            [
                "89f11ae79f0dbf5f",
                "8f1e40768e5d634f"
            ]
        ]
    },
    {
        "id": "89f11ae79f0dbf5f",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 280",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 3180,
        "wires": []
    },
    {
        "id": "c6b6ead33ab7fcbd",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Delete Button out",
        "mode": "link",
        "links": [
            "3d7f076cfd4e4c32"
        ],
        "x": 255,
        "y": 3100,
        "wires": []
    },
    {
        "id": "582b67c51b73f965",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 3240,
        "wires": []
    },
    {
        "id": "8f1e40768e5d634f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//Hard coded: The buffer should have a single member with known key\nlet bufferKey = 'filename';\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Check for progress trigger\nif ((msg.topic == 'delete') && (buffer[bufferKey] != undefined)) {\n    msg.payload = {\n        filePath: flow.get('recipeJSONlocation') + buffer[bufferKey],\n        filename: buffer[bufferKey]\n    }\n    context.set('buffer', undefined);\n    msg.lineFlag = 'deleteRecipe';\n    let obj = JSON.parse(JSON.stringify(msg));\n    flow.set('AAA', obj);\n    return msg;\n} else \n\n// Add the incoming message payload and topic to the buffer\nif (bufferKey in msg) {\n    buffer[bufferKey] = msg.filename.split('\\\\').pop();\n    context.set('buffer', buffer);\n} else \n\n// Clear check\nif (msg.topic == 'clear') {\n    context.set('buffer', undefined)\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3140,
        "wires": [
            [
                "3b22aeefea9d7f3d"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "3b22aeefea9d7f3d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config FL",
        "func": "//del: used for testing\nmsg = JSON.parse(JSON.stringify(flow.get('AAA')));\nmsg.payload = {\n    start: flow.get('recipeJSONlocation'),\n    pattern: msg.payload.filename\n}\nmsg.filename = msg.payload.start + msg.payload.pattern;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3140,
        "wires": [
            [
                "74ac44fd89593798",
                "df0da5bebc40fd43"
            ]
        ]
    },
    {
        "id": "74ac44fd89593798",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "FL 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3100,
        "wires": []
    },
    {
        "id": "df0da5bebc40fd43",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 670,
        "y": 3140,
        "wires": [
            [
                "02e6e064d9e61081"
            ]
        ]
    },
    {
        "id": "02e6e064d9e61081",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 3140,
        "wires": [
            [
                "28b176bdcfa9722c"
            ],
            [
                "ad9921eead6df191"
            ]
        ]
    },
    {
        "id": "28b176bdcfa9722c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Does not exist",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 3100,
        "wires": []
    },
    {
        "id": "ad9921eead6df191",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1000,
        "y": 3140,
        "wires": [
            [
                "8e1de2b94b437deb"
            ]
        ]
    },
    {
        "id": "8e1de2b94b437deb",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 3140,
        "wires": [
            [
                "07e34ff94187852f"
            ]
        ]
    },
    {
        "id": "07e34ff94187852f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set RecipeIdentity",
        "func": "msg.recipeIdentity = msg.payload.File_Code;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 3140,
        "wires": [
            [
                "795a5fe4afbfac2b"
            ]
        ]
    },
    {
        "id": "795a5fe4afbfac2b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config FL Set Par",
        "func": "msg.data = msg.payload; // Data that will be written to the csv\n\n\n//Set: filename for HMI csv\nmsg.data.shortFilename = flow.get('HMIrecipeName') // Note: Might want to dynamically set this\nmsg.data.fileLocation = flow.get('HMIcsvLocation'); // Not the whole path + filename\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: msg.data.fileLocation,\n    pattern: msg.data.shortFilename \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 3140,
        "wires": [
            [
                "9ad732b56228fc50",
                "959c63b1785562ea"
            ]
        ]
    },
    {
        "id": "9ad732b56228fc50",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 1720,
        "y": 3140,
        "wires": [
            [
                "be01ab08145bcb76",
                "b56c50f047e91ecb"
            ]
        ],
        "info": "Looking for the HMI Recipe CSV"
    },
    {
        "id": "959c63b1785562ea",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "FL 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 3100,
        "wires": []
    },
    {
        "id": "be01ab08145bcb76",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 3100,
        "wires": []
    },
    {
        "id": "b56c50f047e91ecb",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 3140,
        "wires": [
            [
                "777b1598ca6c505c"
            ],
            [
                "b540c11e62029c79",
                "4ac64087c16c2f5f"
            ]
        ]
    },
    {
        "id": "777b1598ca6c505c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Still working",
        "func": "msg.payload = 'Recipe is not found';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 3120,
        "wires": [
            [
                "596a37a42128420d"
            ]
        ]
    },
    {
        "id": "b540c11e62029c79",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config Read file",
        "func": "//Also used for config write\nmsg.payload = {};\n// Set\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; \n// Settings things up for the bypass\n//msg.payload.text = msg.data.text;\nmsg.payload.filename = msg.filename;\nmsg.payload.recipeIdentity = msg.recipeIdentity;\nmsg.topic = \"bypass\";\ndelete msg.filename\n\n\nreturn [{filename: msg.payload.filename}, msg];\n\n//would be used with the line by line file read\nflow.set(\"newFilename\", msg.filename.substr(0, msg.filename.lastIndexOf(\".\")) + \"NEW\" + msg.filename.substr(msg.filename.lastIndexOf(\".\"), msg.filename.length));\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3180,
        "wires": [
            [
                "8ad031b9863e1438",
                "4268a958241ee1e5"
            ],
            [
                "ab9ae931640d5a9e",
                "e70117d17e776031"
            ]
        ]
    },
    {
        "id": "4ac64087c16c2f5f",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "File Listener",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 3220,
        "wires": []
    },
    {
        "id": "596a37a42128420d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Delete HMIcsv NE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 3100,
        "wires": []
    },
    {
        "id": "8ad031b9863e1438",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 265",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 3140,
        "wires": []
    },
    {
        "id": "4268a958241ee1e5",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2240,
        "y": 3180,
        "wires": [
            [
                "0911033c87e22ece",
                "bd8808d49ee0f0cc"
            ]
        ]
    },
    {
        "id": "ab9ae931640d5a9e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Bypass Recipe File Exists",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3220,
        "wires": []
    },
    {
        "id": "0911033c87e22ece",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Read CSV",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 3100,
        "wires": []
    },
    {
        "id": "bd8808d49ee0f0cc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set topic",
        "func": "msg.topic = \"fileData\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 3180,
        "wires": [
            [
                "d56be15d3b11433f"
            ]
        ]
    },
    {
        "id": "d56be15d3b11433f",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2530,
        "y": 3180,
        "wires": [
            [
                "0e63ddc7537bdea6",
                "cf7dfb7a11859238"
            ]
        ]
    },
    {
        "id": "0e63ddc7537bdea6",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Join",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 3220,
        "wires": []
    },
    {
        "id": "cf7dfb7a11859238",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "buffer (csv parts reading)",
        "func": "\nlet startIndex = msg.payload.fileData.indexOf(msg.payload.bypass.recipeIdentity); //Finds the unique key\nmsg.look = {\n    startIndex: startIndex,\n    search: msg.payload.bypass.recipeIdentity,\n}\nnode.warn('startIndex before ifs: ' + startIndex);\nif (startIndex != -1) { // Unique key exists:\n    let end1 = \"\\r\\n\\r\\n\", // Finds the double new line (end of section)\n        end2 = \"\\n\\n\",\n        endIndex = -1;\n    if (msg.payload.fileData.indexOf(end1, startIndex) == -1) { // Looks if end of file does not exist\n        if (msg.payload.fileData.indexOf(end2, startIndex) == -1) { // Really looks if end of file does not exist\n            node.warn('Cannot find end of index insert into HMI Recipe csv');\n        } else {\n            endIndex = msg.payload.fileData.indexOf(end2, startIndex);\n        }\n    } else {\n        endIndex = msg.payload.fileData.indexOf(end1, startIndex) + 2;\n    }\n        \n        //foundSection = msg.payload.fileData.slice(startIndex, endIndex);\n    //msg.filename = msg.payload.bypass.filename;\n    //del\n    msg.filename = 'C:/Users/User/Documents/Coding/Node Red/Recipes/deleteTesting.csv';\n    //msg.filename = flow.get('HMIcsvLocation') + flow.get('HMIrecipeName');\n    msg.check = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        firstPart: msg.payload.fileData.slice(0, startIndex),\n        insert: msg.payload.bypass.text,\n        lastPart: msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length)\n\n    };\n\n    //Delete and insert\n    msg.payload = msg.payload.fileData.slice(0, startIndex) + msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length);\n} else {\n    msg.payload = msg.payload.fileData;\n    //active: add a warning that the file was not changed\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 3180,
        "wires": [
            [
                "bcc865f8f044d1c3",
                "3d70dddd55c57b9a"
            ]
        ]
    },
    {
        "id": "bcc865f8f044d1c3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 3140,
        "wires": []
    },
    {
        "id": "3d70dddd55c57b9a",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2920,
        "y": 3180,
        "wires": [
            [
                "582b67c51b73f965"
            ]
        ]
    },
    {
        "id": "eab23033209c04a1",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "name": "Delete button",
        "info": "",
        "x": 150,
        "y": 3060,
        "wires": []
    },
    {
        "id": "4877bfd005f45419",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Final Buffer + Set Write",
        "info": "",
        "x": 3640,
        "y": 3980,
        "wires": []
    },
    {
        "id": "ec0a5242c10cd615",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "After Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 4100,
        "wires": []
    },
    {
        "id": "fea68f0b27b3b0b6",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "final join in",
        "links": [
            "03d1c3ba697c94e4",
            "71740d665d2b24ce",
            "a405fda7c0517634",
            "a9c4c3a2c9488c0e",
            "d266b35bbc25032f"
        ],
        "x": 3575,
        "y": 4140,
        "wires": [
            [
                "ae1be5dc38f60c0b",
                "ec0a5242c10cd615"
            ]
        ]
    },
    {
        "id": "ae1be5dc38f60c0b",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3730,
        "y": 4180,
        "wires": [
            [
                "3a63fa4f796bd032",
                "06167b8a190b1ed6",
                "76426b623e4f601c"
            ]
        ]
    },
    {
        "id": "3a63fa4f796bd032",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Final Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860,
        "y": 4120,
        "wires": []
    },
    {
        "id": "06167b8a190b1ed6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Write",
        "func": "if (msg.lineFlag == \"completedWithChecks\") {\n    //msg.filename = msg.payload.fileLocation; //used to write to local file\n    msg.filename = flow.get('recipeJSONlocation') + msg.payload.filename + ' (' + msg.payload.File_Code + ').json';\n    msg.payload = {\n        \"File_Code\": msg.payload.File_Code,\n        \"File_Name\": msg.payload.filename,\n        \"Powered_Inspection\": msg.payload.poweredInspection || false,\n        \"parameterData\": msg.payload.parameterData,\n        \"basic\": msg.payload.basic\n    }\n    //DELETE\n    flow.set(\"writeData\", msg.payload);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3900,
        "y": 4180,
        "wires": [
            [
                "cb690a9660cf7c8a",
                "34c7ab41bb4b3dd7",
                "b9156f78ebf3843b"
            ]
        ]
    },
    {
        "id": "76426b623e4f601c",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "",
        "property": "lineFlag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "save",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fileSelected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3910,
        "y": 4060,
        "wires": [
            [
                "64d6fcd6ed4fe465"
            ],
            [
                "2cc3c524ed5f4e18",
                "fe142404f5037996"
            ]
        ]
    },
    {
        "id": "b9156f78ebf3843b",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "write settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4110,
        "y": 4180,
        "wires": [
            [
                "9ff3e803ce53cc13"
            ]
        ]
    },
    {
        "id": "cb690a9660cf7c8a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4080,
        "y": 4100,
        "wires": []
    },
    {
        "id": "c8ca4022d0d77e22",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Check Entry",
        "func": "//Incomplete: Headers can be set somewhere else\nlet tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nmsg.data = msg.payload;\n//let values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nmsg.payload = \"select * from [NodeRed].[dbo].[Recipes] with (updlock,serializable) where File_Code = \" + msg.payload.File_Code;\n\n/*\n//if file exists\nmsg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n\n//if file doesn't exist\nmsg.payload = \"INSERT INTO \" + tableName + \" (\" +\n    headers.toString() + \") VALUES ( \" + values + \"') \" +\n    \"on duplicate File_Code update \" +\n    \"File_Code = \" + obj.File_Code + \" File_Name = \" + obj.File_Name + \" JSON_Data = \" + JSON.stringify(obj) ;\nmsg.check = {\n    obj : obj,\n    values : values\n} \n*/\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 4240,
        "wires": [
            [
                "0f6a62d428984bc7",
                "393a717ce46b9361"
            ]
        ]
    },
    {
        "id": "34c7ab41bb4b3dd7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set write out",
        "mode": "link",
        "links": [
            "11ec4762c9588644",
            "bf6864ec2d7a5b95",
            "de8e36bcb8f76462"
        ],
        "x": 4045,
        "y": 4140,
        "wires": []
    },
    {
        "id": "64d6fcd6ed4fe465",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Clear from Save",
        "func": "return {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 4000,
        "wires": [
            [
                "364a72862b9511e5",
                "c8aea7f920176540"
            ]
        ]
    },
    {
        "id": "2cc3c524ed5f4e18",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set fileSelected",
        "func": "if (msg.nodeID == \"node:d266b35bbc25032f\") {\n    return {\n        filename: msg.filename,\n        filenameShort: msg.filenameShort\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 4060,
        "wires": [
            [
                "686eb83bad60e464",
                "849918d9f4b0d272"
            ]
        ]
    },
    {
        "id": "9ff3e803ce53cc13",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "After Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4280,
        "y": 4140,
        "wires": []
    },
    {
        "id": "0f6a62d428984bc7",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 4260,
        "y": 4240,
        "wires": [
            [
                "60f28e5f05f78a6d"
            ]
        ]
    },
    {
        "id": "393a717ce46b9361",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4270,
        "y": 4200,
        "wires": []
    },
    {
        "id": "364a72862b9511e5",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Clear from Save out",
        "mode": "link",
        "links": [
            "3d7f076cfd4e4c32"
        ],
        "x": 4315,
        "y": 4000,
        "wires": []
    },
    {
        "id": "c8aea7f920176540",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Switch to clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4380,
        "y": 3960,
        "wires": []
    },
    {
        "id": "686eb83bad60e464",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "FileSelected out",
        "mode": "link",
        "links": [
            "a46910031a3f1d1c"
        ],
        "x": 4295,
        "y": 4060,
        "wires": []
    },
    {
        "id": "60f28e5f05f78a6d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Insert / Update MSSQL",
        "func": "let tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nlet obj = msg.data;\nlet values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nif (msg.payload.length == 0) { // checks if file exists\n    msg.payload = \"INSERT INTO \" + tableName + \" (\" +\n        headers.toString() + \") VALUES ( \" + values + \"') \";\n    msg.check = {\n        obj: obj,\n        values: values\n    } \n} else { // runs if entry does not exist\n    msg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4450,
        "y": 4240,
        "wires": [
            [
                "20a3eb8c1e03d0e2",
                "0150faf44d6b43a0"
            ]
        ]
    },
    {
        "id": "20a3eb8c1e03d0e2",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4660,
        "y": 4180,
        "wires": []
    },
    {
        "id": "0150faf44d6b43a0",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 4660,
        "y": 4240,
        "wires": [
            []
        ]
    },
    {
        "id": "849918d9f4b0d272",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 256",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4410,
        "y": 4020,
        "wires": []
    },
    {
        "id": "b281e8db5682cef0",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Select File",
        "info": "",
        "x": 3180,
        "y": 3100,
        "wires": []
    },
    {
        "id": "72055df34f3ff6d0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Blocker",
        "func": "if (msg.filename == undefined) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 3220,
        "wires": [
            [
                "6674d2d95cae619d"
            ]
        ]
    },
    {
        "id": "35cd53f851e1a767",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Search in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 3165,
        "y": 3240,
        "wires": [
            [
                "72055df34f3ff6d0"
            ]
        ]
    },
    {
        "id": "6674d2d95cae619d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "label": "Search ",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 8,
        "width": 7,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "Search",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3440,
        "y": 3220,
        "wires": [
            [
                "714536eb9bff0bd0"
            ]
        ]
    },
    {
        "id": "714536eb9bff0bd0",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "search",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3620,
        "y": 3220,
        "wires": [
            [
                "626e278e4cf58f5b",
                "ddfd29912990aabc"
            ]
        ]
    },
    {
        "id": "626e278e4cf58f5b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Search",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3800,
        "y": 3220,
        "wires": []
    },
    {
        "id": "7c1dcedbb4597942",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "start": "{{msg.filelocation}}",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 3980,
        "y": 3160,
        "wires": [
            [
                "da79b47bea4f8cd0"
            ]
        ]
    },
    {
        "id": "935d68cf5f9462a7",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 3590,
        "y": 3160,
        "wires": [
            [
                "ddfd29912990aabc"
            ]
        ]
    },
    {
        "id": "542df5ca2e58aa34",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3620,
        "y": 3100,
        "wires": [
            [
                "ddfd29912990aabc"
            ]
        ]
    },
    {
        "id": "da79b47bea4f8cd0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Set options",
        "func": "msg.fullOptions = {};\nmsg.options = [];\nlet obj = {},\n    search = msg.search;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    obj[msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')] = msg.payload[i].name;\n}\n\nfor (const [key, value] of Object.entries(obj)) { // Only want JSON files\n    if (key.includes('.json')) {\n\n    } else {\n        delete obj[key];\n    }\n}\n\nmsg.options = []\n\nif (search != undefined) {\n    for (const [key, value] of Object.entries(obj)) {\n        if (key.includes(search)) {\n            let temp = {};\n            temp[key] = value;\n            msg.options.push(temp);\n        }\n    }\n} else {\n    for (const [key, value] of Object.entries(obj)) {\n        let temp = {};\n        temp[key] = value;\n        msg.options.push(temp);\n    }\n}\n\nmsg.check = {\n    \"Obj\": obj\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4150,
        "y": 3160,
        "wires": [
            [
                "25997782b99a6130",
                "993a9b001a357c8c"
            ]
        ]
    },
    {
        "id": "25997782b99a6130",
        "type": "ui_dropdown",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "label": "Select file",
        "tooltip": "",
        "place": "Select option",
        "group": "0465010f96f3dad5",
        "order": 9,
        "width": 9,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 4320,
        "y": 3160,
        "wires": [
            [
                "96b36f22a6198df9",
                "da2edc16fc7322a7"
            ]
        ]
    },
    {
        "id": "993a9b001a357c8c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Options",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4280,
        "y": 3100,
        "wires": []
    },
    {
        "id": "7cf0eb5e4d7af7a5",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Select File in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 4185,
        "y": 3220,
        "wires": [
            [
                "25997782b99a6130"
            ]
        ]
    },
    {
        "id": "96b36f22a6198df9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4479,
        "y": 3100,
        "wires": []
    },
    {
        "id": "da2edc16fc7322a7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Set tags",
        "func": "msg.filename = msg.payload;\n//This part has become redundant, I use the existence of this member as a check somewhere in the code. Should get rewritten\nmsg.filenameShort = msg.payload.replace(/^.*(\\\\|\\/|\\:)/, '');\nmsg.filenameShort = msg.filenameShort.toString().substring(0, msg.filenameShort.lastIndexOf('.'));\nif (msg.filenameShort.indexOf('(') != -1) { //checks to see if there is a bracket in the filename, if there is, deletes it\n    //node.warn(\"Filename: \" + msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()); \n    msg.filenameShort = msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()\n}\n\nflow.set(\"filenameShort\");\nmsg.lineFlag = \"fileSelected\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4480,
        "y": 3160,
        "wires": [
            [
                "d5a6b4aa8c3d3543",
                "717877cb82065dc3"
            ]
        ]
    },
    {
        "id": "717877cb82065dc3",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "selected file out",
        "mode": "link",
        "links": [
            "3d7f076cfd4e4c32",
            "46a6c78d1dcd6ef0"
        ],
        "x": 4605,
        "y": 3160,
        "wires": []
    },
    {
        "id": "d5a6b4aa8c3d3543",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4640,
        "y": 3120,
        "wires": []
    },
    {
        "id": "ddfd29912990aabc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Config FL",
        "func": "msg.payload = { \n    \"start\": flow.get('recipeJSONlocation'),\n    \"pattern\":\"*.json\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 3160,
        "wires": [
            [
                "7c1dcedbb4597942"
            ]
        ]
    },
    {
        "id": "5ec057420e7b5bc0",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "active",
        "info": "",
        "x": 3820,
        "y": 3100,
        "wires": []
    },
    {
        "id": "37e5e1cf05f04932",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "",
        "label": "File Name",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "filename",
        "sendOnBlur": false,
        "className": "",
        "topicType": "str",
        "x": 3910,
        "y": 3820,
        "wires": [
            [
                "1de9dfdf901990fa",
                "859e77fbb03e40f0"
            ]
        ]
    },
    {
        "id": "d749b9f44a2a2ba1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Checking",
        "func": "if (msg.lineFlag == \"fileSelected\") {\n    msg.payload = msg.filenameShort;\n    return msg;\n} else if (msg.lineFlag == \"SQL\") {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.lineFlag == 'JSONdata') {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.topic == 'clear') {\n    msg.payload = \"\";\n} else {\n    return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 3820,
        "wires": [
            [
                "37e5e1cf05f04932",
                "4f48d873ac6baeca",
                "7c1e899a2651d759",
                "859e77fbb03e40f0"
            ]
        ]
    },
    {
        "id": "1de9dfdf901990fa",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Set Par Flow",
        "func": "msg.topic = \"filename\";\n\nif (msg.filenameShort != undefined) { //Checks if the filename has been loaded from a database\n    node.send({ \n        topic: \"filename\",\n        payload: msg.filenameShort\n        });\n    //node.send({ topic: \"fileLocation\", payload: msg.filename });\n    return null;\n} else { // Or any other message that gets received\n    node.send({ topic: \"filename\", payload: msg.payload })\n    //node.send({ topic: \"fileLocation\", payload: flow.get('recipeJSONlocation') + msg.payload + '.json' });\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 3820,
        "wires": [
            [
                "b6bd57aa234737be",
                "a405fda7c0517634"
            ]
        ]
    },
    {
        "id": "756ee76f9ccadbd8",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename in",
        "links": [
            "38ff2dcc2e41b6fa",
            "5491c556639992d7",
            "c20be865f12bee03"
        ],
        "x": 3585,
        "y": 3800,
        "wires": [
            [
                "d749b9f44a2a2ba1",
                "1edb47acfa9dbac7"
            ]
        ]
    },
    {
        "id": "4f48d873ac6baeca",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "fileSelected",
        "func": "if (msg.filenameShort != undefined) {\n    return msg;\n} else if (msg.lineFlag == \"SQL\" || msg.lineFlag == \"JSONdata\") {\n    return {\n        payload: msg.payload\n    };\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3910,
        "y": 3860,
        "wires": [
            [
                "1de9dfdf901990fa",
                "cb07a673fdfc2653"
            ]
        ]
    },
    {
        "id": "7c1e899a2651d759",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 3760,
        "wires": []
    },
    {
        "id": "b6bd57aa234737be",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4280,
        "y": 3820,
        "wires": []
    },
    {
        "id": "a405fda7c0517634",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 4205,
        "y": 3780,
        "wires": []
    },
    {
        "id": "1edb47acfa9dbac7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 3760,
        "wires": []
    },
    {
        "id": "cb07a673fdfc2653",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4140,
        "y": 3860,
        "wires": []
    },
    {
        "id": "8dc188d1df343704",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "File Name",
        "info": "",
        "x": 3600,
        "y": 3720,
        "wires": []
    },
    {
        "id": "859e77fbb03e40f0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Save check Filename",
        "func": "let check = flow.get(\"filenameCheck\");\nif (check == undefined) {\n    context.set(\"filenameCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"filenameCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"filenameCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4120,
        "y": 3740,
        "wires": [
            [
                "337b76a428a81ab5"
            ]
        ]
    },
    {
        "id": "337b76a428a81ab5",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 95",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4300,
        "y": 3740,
        "wires": []
    },
    {
        "id": "d7861c4242485729",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Set Label",
        "func": "// Uncomplete: ACTIVE Need to make check for if test mode hasn't been changed\nif (msg.topic == 'clear') {\n    msg.payload = false;\n    return msg\n} else if (msg.topic == \"poweredInspection\") {\n    //Don't really need to do much, I just don't want the next check catching \n    //When a message is returned\n} else if (msg.payload != undefined) {\n    msg.payload = msg.payload.Powered_Inspection;\n}\nmsg.topic = \"poweredInspection\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3900,
        "y": 3600,
        "wires": [
            [
                "f3242e7aa08bbe15",
                "2b4327fa36f4764a"
            ]
        ]
    },
    {
        "id": "f3242e7aa08bbe15",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "debug 129",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4070,
        "y": 3560,
        "wires": []
    },
    {
        "id": "71740d665d2b24ce",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 4265,
        "y": 3540,
        "wires": []
    },
    {
        "id": "21a6805e17ec8f57",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode in",
        "links": [
            "5491c556639992d7",
            "c20be865f12bee03"
        ],
        "x": 3715,
        "y": 3620,
        "wires": [
            [
                "d7861c4242485729",
                "8c4d5f66a4a69ab8"
            ]
        ]
    },
    {
        "id": "99276769c25c9fee",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode Switch",
        "info": "",
        "x": 3620,
        "y": 3540,
        "wires": []
    },
    {
        "id": "2b4327fa36f4764a",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "",
        "label": "Powered on inpsection",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "poweredInspection",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 4100,
        "y": 3600,
        "wires": [
            [
                "71740d665d2b24ce",
                "d7861c4242485729",
                "6b9af4a3d307cdca"
            ]
        ]
    },
    {
        "id": "8c4d5f66a4a69ab8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "debug 239",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3850,
        "y": 3560,
        "wires": []
    },
    {
        "id": "ad9a723bcdb4d50b",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Dashboard login",
        "info": "",
        "x": 3060,
        "y": 2700,
        "wires": []
    },
    {
        "id": "5ba436835e73730b",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Autoload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3060,
        "y": 2940,
        "wires": [
            [
                "077f30a3ad8d59c5"
            ]
        ]
    },
    {
        "id": "077f30a3ad8d59c5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Config FL",
        "func": "msg.payload = {\n    \"start\": flow.get('dashboardCredentialsLocation'),\n    \"pattern\": flow.get('dashboardCredentialsName')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3240,
        "y": 2940,
        "wires": [
            [
                "259618f3c3f1c763"
            ]
        ]
    },
    {
        "id": "259618f3c3f1c763",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 3400,
        "y": 2940,
        "wires": [
            [
                "0689c3d5b8c63a48"
            ]
        ]
    },
    {
        "id": "0689c3d5b8c63a48",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3550,
        "y": 2940,
        "wires": [
            [
                "f51a4752f116f9ab"
            ],
            [
                "cc244f0312530514"
            ]
        ]
    },
    {
        "id": "f51a4752f116f9ab",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Error",
        "func": "msg.payload = \"The Credential data cannot be found, please contact admin.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 2900,
        "wires": [
            [
                "10a6e1396d0d3594"
            ]
        ]
    },
    {
        "id": "10a6e1396d0d3594",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3850,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "cc244f0312530514",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Config Read File",
        "func": "msg.filename = flow.get('dashboardCredentialsLocation') + flow.get('dashboardCredentialsName');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2940,
        "wires": [
            [
                "668ae53183045f48"
            ]
        ]
    },
    {
        "id": "668ae53183045f48",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3920,
        "y": 2940,
        "wires": [
            [
                "9d6cf8016eb059a7"
            ]
        ]
    },
    {
        "id": "9d6cf8016eb059a7",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4070,
        "y": 2940,
        "wires": [
            [
                "e020644240df67b0"
            ]
        ]
    },
    {
        "id": "e020644240df67b0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Set Par from Data",
        "func": "/*\n    The headers for the columns of the dashboardCredentials\n    are hard coded.\n*/\nlet length = msg.payload.length,\n    usernames = [],\n    passwords = [],\n    userLevel = [],\n    credentialData = {};\nif (length <= 1) {\n    //The file is incorrectly set up\n    // Dev error handling\n} else {\n    for (let i = 0; i < length; i++) {\n        usernames.push(msg.payload[i].Username.toString());\n        passwords.push(msg.payload[i].Password.toString());\n        userLevel.push(msg.payload[i].Level);\n    }\n    //Set up the flows\n    credentialData = {\n        usernames: usernames,\n        passwords: passwords,\n        userLevel: userLevel\n    }\n    flow.set('credentialData', credentialData);\n    //checks\n    msg.check = {\n        credentialData: credentialData\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4240,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "604175417bdb4031",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "group": "18ea443589aff38f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "(Settings) Login Text",
        "label": "",
        "format": "To log in as a Guest press LOGIN while all fields are empty.",
        "layout": "row-left",
        "className": "",
        "x": 4180,
        "y": 2880,
        "wires": []
    },
    {
        "id": "c40750fadc409ba3",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "group": "494580998616b55b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Referral login msg (Recipe)",
        "label": "",
        "format": "Please sign in using the \"Settings\" tab.",
        "layout": "row-spread",
        "className": "",
        "x": 4200,
        "y": 2800,
        "wires": []
    },
    {
        "id": "50ada39cbcb7b7dc",
        "type": "ui_form",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "label": "Dashboard Login",
        "group": "18ea443589aff38f",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "Clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 3070,
        "y": 2800,
        "wires": [
            [
                "d1b617b1b2243281"
            ]
        ]
    },
    {
        "id": "d1b617b1b2243281",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Check credentials",
        "func": "let credentialData = flow.get('credentialData');\nlet usernameIndex = credentialData.usernames.indexOf(msg.payload.Username);\nif (msg.payload.Username == \"\" && msg.payload.Password == \"\") { //Case when the credentials are empty, logging in Guest\n    msg = {\n        userInfo: {\n            username: \"Guest\",\n            userLevel: 'Guest'\n        }\n    }\n    return [msg,];\n} else if (usernameIndex !== -1) { // Username exists\n    if (credentialData.passwords[usernameIndex] == msg.payload.Password ) { //Password matches\n        let userLevel = 'Error';\n        switch (credentialData.userLevel[usernameIndex]) {\n            case 1:\n                userLevel = 'Guest'\n                flow.set('userLevel', 'guest');\n                break;\n            case 2:\n                userLevel = 'Operator'\n                flow.set('userLevel', 'operator')\n                break;\n            case 3:\n                userLevel = 'Admin'\n                flow.set('userLevel', 'admin')\n                break;\n        }\n        msg = {\n            userInfo: {\n                username: credentialData.usernames[usernameIndex],\n                userLevel: userLevel,\n            }\n        }\n        return [msg, ];\n    } else{\n        msg.payload = 'Either the username or password are incorrect';\n        return [ ,msg];\n    }\n} else {\n    msg.payload = 'Either the username or password are incorrect';\n    return [ ,msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 2800,
        "wires": [
            [
                "0ce3360d1d743743"
            ],
            [
                "6ee53091dbb0e592"
            ]
        ]
    },
    {
        "id": "0ce3360d1d743743",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "ui control",
        "func": "let msg1 = {};\n\n//Show the normal page\nif ('userInfo' in msg) {\n    if (msg.userInfo.userLevel == 'Operator') {\n        msg.payload = {\n            \"group\": {\n                \"hide\": [\n                    \"Recipes_Parameter_Names_11_-_20\",\n                    \"Recipes_Parameter_Values_11_-_20\",\n                    \"Recipes_Parameter_Instructions_11_-_20\",\n                    \"Recipes_Stop_On_Fail_11_-_20\",\n                    \"Recipes_Parameter_Names_21_-_30\",\n                    \"Recipes_Parameter_Values_21_-_30\",\n                    \"Recipes_Parameter_Instructions_21_-_30\",\n                    \"Recipes_Login\",\n                    \"Settings_Login\"\n                ],\n                \"show\": [\n                    \"Recipes_Parameter_Names_1_-_10\",\n                    \"Recipes_Parameter_Values_1_-_10\",\n                    \"Recipes_Parameter_Instructions_1_-_10\",\n                    \"Recipes_Stop_On_Fail_1_-_10\",\n                    \"Recipes_Test_Name\",\n                    \"Recipes_Basic_Tests\",\n                    \"Settings_Insufficient_Rights\"\n                ]\n            }\n        };\n    } else if (msg.userInfo.userLevel == 'Admin') {\n        msg.payload = {\n            \"group\": {\n                \"hide\": [\n                    \"Recipes_Parameter_Names_11_-_20\",\n                    \"Recipes_Parameter_Values_11_-_20\",\n                    \"Recipes_Parameter_Instructions_11_-_20\",\n                    \"Recipes_Stop_On_Fail_11_-_20\",\n                    \"Recipes_Parameter_Names_21_-_30\",\n                    \"Recipes_Parameter_Values_21_-_30\",\n                    \"Recipes_Parameter_Instructions_21_-_30\",\n                    \"Recipes_Login\",\n                    \"Settings_Login\",\n                    \"Settings_Insufficient_Rights\"\n                ],\n                \"show\": [\n                    \"Recipes_Parameter_Names_1_-_10\",\n                    \"Recipes_Parameter_Values_1_-_10\",\n                    \"Recipes_Parameter_Instructions_1_-_10\",\n                    \"Recipes_Stop_On_Fail_1_-_10\",\n                    \"Recipes_Test_Name\",\n                    \"Recipes_Basic_Tests\",\n                    \"Settings_Registration\",\n                    \"Settings_Update_Password\",\n                    \"Settings_User_database\"\n                ]\n            }\n        };\n    }\n\n    //Used for login\n    msg1 = {\n        payload: msg.userInfo.username,\n        level: msg.userInfo.userLevel\n    }\n} else if (msg.topic == 'logout') {\n    node.warn('check msg.topic');\n    msg.payload = {\n        \"group\": {\n            \"hide\": [\n                \"Recipes_Parameter_Names_11_-_20\",\n                \"Recipes_Parameter_Values_11_-_20\",\n                \"Recipes_Parameter_Instructions_11_-_20\",\n                \"Recipes_Stop_On_Fail_11_-_20\",\n                \"Recipes_Parameter_Names_21_-_30\",\n                \"Recipes_Parameter_Values_21_-_30\",\n                \"Recipes_Parameter_Instructions_21_-_30\",\n                \"Recipes_Parameter_Names_1_-_10\",\n                \"Recipes_Parameter_Values_1_-_10\",\n                \"Recipes_Parameter_Instructions_1_-_10\",\n                \"Recipes_Stop_On_Fail_1_-_10\",\n                \"Recipes_Test_Name\",\n                \"Recipes_Basic_Tests\",\n                \"Settings_Registration\",\n                \"Settings_Update_Password\",\n                \"Settings_User_database\",\n                \"Settings_Insufficient_Rights\"\n            ],\n            \"show\": [\n                \"Recipes_Login\",\n                \"Settings_Login\"\n            ]\n        }\n    }\n}\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3480,
        "y": 2780,
        "wires": [
            [
                "2a17fac4bc6e1221"
            ],
            [
                "6af32e127a95b37c"
            ]
        ]
    },
    {
        "id": "6ee53091dbb0e592",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 3490,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "2a17fac4bc6e1221",
        "type": "ui_ui_control",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "events": "all",
        "x": 3640,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "6af32e127a95b37c",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "group": "0465010f96f3dad5",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "(Recipe) [main header]",
        "label": "{{msg.level}}",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 3680,
        "y": 2800,
        "wires": []
    },
    {
        "id": "41f626f1327d3ed7",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "LOGOUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear logout",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "logout",
        "topicType": "str",
        "x": 3040,
        "y": 2760,
        "wires": [
            [
                "8b62446cfd723994"
            ]
        ]
    },
    {
        "id": "b87516e6f243fef8",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "group": "d343b6541bd84142",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Insufficient rights (Settings)",
        "label": "",
        "format": "Insufficient rights to access.",
        "layout": "row-spread",
        "className": "",
        "x": 4200,
        "y": 2840,
        "wires": []
    },
    {
        "id": "f401164f4df6243c",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "bdb8c3cb821603ff",
        "name": "Read dashboardCredentials.csv",
        "info": "",
        "x": 3190,
        "y": 2880,
        "wires": []
    },
    {
        "id": "3dab220221184841",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "",
        "label": "File Code",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 420,
        "y": 2440,
        "wires": [
            [
                "23281f6c705311eb",
                "ce067e37168e1d33",
                "ddf28fd3e1968054"
            ]
        ]
    },
    {
        "id": "c9b3c81e660b8022",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.File_Code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 2440,
        "wires": [
            [
                "3dab220221184841",
                "113479bbc86295a4",
                "a8817387335deec3",
                "a513364e1951fda6"
            ]
        ]
    },
    {
        "id": "f4ea55515c41729c",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code Clear in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 275,
        "y": 2480,
        "wires": [
            [
                "3dab220221184841",
                "a513364e1951fda6",
                "b84b6732efebeca7"
            ]
        ]
    },
    {
        "id": "23281f6c705311eb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Set topic",
        "func": "msg.topic = \"File_Code\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2440,
        "wires": [
            [
                "a9c4c3a2c9488c0e",
                "5e41e8f1e690587f"
            ]
        ]
    },
    {
        "id": "8de91a6651268b8a",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code in",
        "links": [
            "5491c556639992d7"
        ],
        "x": 105,
        "y": 2480,
        "wires": [
            [
                "c9b3c81e660b8022"
            ]
        ]
    },
    {
        "id": "a9c4c3a2c9488c0e",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 680,
        "y": 2400,
        "wires": []
    },
    {
        "id": "848a99fa27c2e22f",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code",
        "info": "",
        "x": 140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "ce067e37168e1d33",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Save check File Code",
        "func": "let check = flow.get(\"fileCodeCheck\");\nif (check == undefined) {\n    context.set(\"fileCodeCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"fileCodeCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"fileCodeCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2340,
        "wires": [
            [
                "ddf28fd3e1968054"
            ]
        ]
    },
    {
        "id": "ddf28fd3e1968054",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Save check File Code",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 2340,
        "wires": []
    },
    {
        "id": "a8817387335deec3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "debug 96",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 2260,
        "wires": []
    },
    {
        "id": "b84b6732efebeca7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "debug 255",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2300,
        "wires": []
    },
    {
        "id": "57b8c369402f86ee",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1200,
        "y": 2480,
        "wires": [
            [
                "43ce6fa4c644f3f3"
            ]
        ]
    },
    {
        "id": "43ce6fa4c644f3f3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Trigger buffer",
        "func": "msg.complete = \"\";\nmsg.lineFlag = \"save\";\nlet send = []\n\n//Need to save the button push event into join nodes to know\n//if join dump occured from save. \nmsg.topic = \"save\";\nmsg.payload = \"saved from button\" // I'm certain a payload isn't necessary\n\n//if (flow.get(\"basicFormCheck\") && flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\nif (flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\n    send = [msg, { payload: \"Recipe is being saved\" }]\n} else {\n    let text = \"\";\n    //(flow.get(\"basicFormCheck\")) ? null : text += \"|| Basic form is not filled in \";\n    (flow.get(\"fileCodeCheck\")) ? null : text += \"|| File Code is not filled in \";\n    (flow.get(\"filenameCheck\")) ? null : text += \"|| File Name is not filled in \"\n    text += \"||\"\n    send = [, {payload: text}]\n}\n\nreturn send;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2400,
        "wires": [
            [
                "b4b222f939895c2c",
                "4571c934cd47a965"
            ],
            [
                "d6300eb99d1c25a1",
                "98e14c7df7492fd7",
                "4571c934cd47a965"
            ]
        ]
    },
    {
        "id": "0f712ca3bb59a557",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "save",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1190,
        "y": 2400,
        "wires": [
            [
                "43ce6fa4c644f3f3"
            ]
        ]
    },
    {
        "id": "b4b222f939895c2c",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Trigger out",
        "mode": "link",
        "links": [
            "6a9e30f65e495bca",
            "52f504cfc73cafc8",
            "871495341ec0155a",
            "ba6421b25b5c72d1"
        ],
        "x": 1505,
        "y": 2400,
        "wires": []
    },
    {
        "id": "4571c934cd47a965",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2340,
        "wires": []
    },
    {
        "id": "d6300eb99d1c25a1",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "group": "0465010f96f3dad5",
        "order": 15,
        "width": 17,
        "height": 1,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "statuss",
        "x": 1510,
        "y": 2460,
        "wires": []
    },
    {
        "id": "98e14c7df7492fd7",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "HMIalert",
        "topic": "",
        "name": "",
        "x": 1630,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "5e66d4669da59098",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Save",
        "info": "",
        "x": 1130,
        "y": 2280,
        "wires": []
    },
    {
        "id": "c7a80db6e1441f4f",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Status in",
        "links": [
            "c20be865f12bee03",
            "d3d9847c7a50a19d",
            "a5f50c3adfd68f30",
            "57975c0730ca79b1",
            "3241449b1e876a30",
            "da2c0c1abdcb6011",
            "86690c31f06da9e8",
            "09018b7e37fbd0c3"
        ],
        "x": 1385,
        "y": 2480,
        "wires": [
            [
                "d6300eb99d1c25a1"
            ]
        ]
    },
    {
        "id": "37d487ac91b0fdce",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Cancel / Clear",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Clear",
        "topicType": "str",
        "x": 2080,
        "y": 2420,
        "wires": [
            [
                "d7c06429fe49a7d8"
            ]
        ]
    },
    {
        "id": "e4883f4f01d94855",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1880,
        "y": 2420,
        "wires": [
            [
                "37d487ac91b0fdce"
            ]
        ]
    },
    {
        "id": "3d7f076cfd4e4c32",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear in",
        "links": [
            "717877cb82065dc3",
            "364a72862b9511e5",
            "c6b6ead33ab7fcbd"
        ],
        "x": 1935,
        "y": 2360,
        "wires": [
            [
                "37d487ac91b0fdce"
            ]
        ]
    },
    {
        "id": "d7c06429fe49a7d8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Set Clear line",
        "func": "if (msg.lineFlag == undefined) {\n    msg.lineFlag = \"clear\";\n}\n\nmsg.complete = \"\";\nmsg.topic = \"clear\"\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 2420,
        "wires": [
            [
                "9cf37f99d9c46dd7",
                "c20be865f12bee03"
            ]
        ]
    },
    {
        "id": "9cf37f99d9c46dd7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 2480,
        "wires": []
    },
    {
        "id": "c20be865f12bee03",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear out",
        "mode": "link",
        "links": [
            "37a523ac432e0d6b",
            "6380ab3c4bd62f4c",
            "756ee76f9ccadbd8",
            "760861ebeac0ea7a",
            "7cf0eb5e4d7af7a5",
            "35cd53f851e1a767",
            "f4ea55515c41729c",
            "c7a80db6e1441f4f",
            "fa9015a8110bfeda",
            "21a6805e17ec8f57",
            "2fb51950723c283f",
            "9ff766c71fea5ab8",
            "8af2f4ee99b16137",
            "c1b824be4a149e9b",
            "26aa749b2bab4f5c",
            "f20ae25ed86a8160"
        ],
        "x": 2425,
        "y": 2380,
        "wires": []
    },
    {
        "id": "a65d5a57aa1aa5e4",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Cancel / Clear",
        "info": "",
        "x": 1840,
        "y": 2300,
        "wires": []
    },
    {
        "id": "c8c71e527a7dcceb",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Input Read Data out",
        "info": "",
        "x": 3070,
        "y": 2340,
        "wires": []
    },
    {
        "id": "ac2e0223ada93d3b",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select JSON_Data from [NodeRed].[dbo].[Recipes] where File_Code = 14635",
        "payloadType": "str",
        "x": 3090,
        "y": 2480,
        "wires": [
            [
                "4a3942a5d1cee888"
            ]
        ]
    },
    {
        "id": "4a3942a5d1cee888",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 3220,
        "y": 2480,
        "wires": [
            [
                "7b0410e1a51fa4cf"
            ]
        ]
    },
    {
        "id": "7b0410e1a51fa4cf",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Set parsed json data",
        "func": "msg.payload = JSON.parse(msg.payload[0][\"JSON_Data\"]);\nmsg.lineFlag = \"SQL\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 2480,
        "wires": [
            [
                "ef386ef09874169f",
                "5491c556639992d7",
                "38ff2dcc2e41b6fa",
                "69c370a5e4e9a882"
            ]
        ]
    },
    {
        "id": "ef386ef09874169f",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.parameterData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3800,
        "y": 2540,
        "wires": [
            [
                "6c98d771a755222f"
            ]
        ]
    },
    {
        "id": "5491c556639992d7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Read file data out",
        "mode": "link",
        "links": [
            "039d4dbe4e2b78e1",
            "21a6805e17ec8f57",
            "756ee76f9ccadbd8",
            "8de91a6651268b8a",
            "baa6c2563f8b404d",
            "72108b579c4227a6",
            "1a7e6f5ac832d24e"
        ],
        "x": 3675,
        "y": 2480,
        "wires": []
    },
    {
        "id": "38ff2dcc2e41b6fa",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "MSSQL out",
        "mode": "link",
        "links": [
            "756ee76f9ccadbd8"
        ],
        "x": 3675,
        "y": 2440,
        "wires": []
    },
    {
        "id": "69c370a5e4e9a882",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "SQL Test",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3560,
        "y": 2400,
        "wires": []
    },
    {
        "id": "d2cab525d55aed4c",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3490,
        "y": 2540,
        "wires": [
            [
                "215838f219a62175",
                "1ea3b76c92b8cd98"
            ]
        ]
    },
    {
        "id": "6c98d771a755222f",
        "type": "split",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 3970,
        "y": 2540,
        "wires": [
            [
                "ec50e4bd721ed7c0"
            ]
        ]
    },
    {
        "id": "dc1518dfe85bb897",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Read settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3330,
        "y": 2540,
        "wires": [
            [
                "d2cab525d55aed4c"
            ]
        ]
    },
    {
        "id": "4a831eb513b40b2a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 47",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2460,
        "wires": []
    },
    {
        "id": "ec50e4bd721ed7c0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Data = Pay",
        "func": "msg.data = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 2540,
        "wires": [
            [
                "44dbecae4687566e"
            ]
        ]
    },
    {
        "id": "a46910031a3f1d1c",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Selected file in",
        "links": [
            "686eb83bad60e464"
        ],
        "x": 3175,
        "y": 2580,
        "wires": [
            [
                "dc1518dfe85bb897",
                "67bfbb724ce329bc"
            ]
        ]
    },
    {
        "id": "44dbecae4687566e",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Parameter data out",
        "mode": "link",
        "links": [
            "82a83f4a48030b23",
            "94bc6ca1429484de"
        ],
        "x": 4205,
        "y": 2500,
        "wires": []
    },
    {
        "id": "67bfbb724ce329bc",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3300,
        "y": 2600,
        "wires": []
    },
    {
        "id": "215838f219a62175",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Line Flag",
        "func": "msg.lineFlag = \"JSONdata\";\n\n//Set: I'm sleepy, this is so that the data that I know should be numbers gets converted to numbers\nlet keys = Object.keys(msg.payload.parameterData);\nfor (let i = 0; i < keys.length; i++) {\n    msg.payload.parameterData[keys[i]].value_H = parseFloat(msg.payload.parameterData[keys[i]].value_H);\n    msg.payload.parameterData[keys[i]].value_L = parseFloat(msg.payload.parameterData[keys[i]].value_L);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 2540,
        "wires": [
            [
                "4a831eb513b40b2a",
                "ef386ef09874169f",
                "5491c556639992d7"
            ]
        ]
    },
    {
        "id": "1ea3b76c92b8cd98",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 148",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 2600,
        "wires": []
    },
    {
        "id": "4447ccc91c15c26d",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Load to PLC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3650,
        "y": 3440,
        "wires": [
            [
                "dc9c85c407d1c0ab",
                "792e18f0a5c5bef2"
            ]
        ]
    },
    {
        "id": "dc9c85c407d1c0ab",
        "type": "ftp in",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 3830,
        "y": 3440,
        "wires": [
            [
                "afb8f594f1e07231",
                "2ffd48c752714782"
            ]
        ]
    },
    {
        "id": "afb8f594f1e07231",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "debug 190",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3990,
        "y": 3380,
        "wires": []
    },
    {
        "id": "2ffd48c752714782",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 3440,
        "wires": [
            [
                "dacc99015ddc50b4"
            ]
        ]
    },
    {
        "id": "dacc99015ddc50b4",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 4190,
        "y": 3440,
        "wires": [
            [
                "ce9e314b2ee5db14"
            ]
        ]
    },
    {
        "id": "ce9e314b2ee5db14",
        "type": "modbus-write",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4360,
        "y": 3440,
        "wires": [
            [],
            [
                "3b96d386eb8e1a7a"
            ]
        ]
    },
    {
        "id": "f3faffe6a0f822d1",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "Load To PLC",
        "info": "",
        "x": 3610,
        "y": 3360,
        "wires": []
    },
    {
        "id": "3b96d386eb8e1a7a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4550,
        "y": 3360,
        "wires": []
    },
    {
        "id": "cc71860e04ee28f1",
        "type": "ui_dropdown",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Parameter Count",
        "group": "0465010f96f3dad5",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "Parameters 1 - 10",
                "type": "str"
            },
            {
                "label": "",
                "value": "Parameters 11 - 20",
                "type": "str"
            },
            {
                "label": "",
                "value": "Parameters 21 - 30",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 4400,
        "y": 2580,
        "wires": [
            [
                "39bdfdf6150306a8"
            ]
        ]
    },
    {
        "id": "c1090410677ed7cf",
        "type": "ui_ui_control",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "events": "all",
        "x": 4880,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "39bdfdf6150306a8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "Set ui control",
        "func": " /*Realised that a switch isn't really needed if the tab \n    name is the same as the group name*/\n\nswitch (msg.payload) {\n    case \"Parameters 1 - 10\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\"]}}';\n        break;\n\n    case \"Parameters 11 - 20\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"]}}';\n        break;\n\n    case \"Parameters 21 - 30\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"],\"show\":[\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"]}}';\n        break;\n}\n\n/*\nlet groups = [\"Recipes_Stove 1\", \"Recipes_Stove 2\", \"Recipes_Stove 3\"];\n\nmsg.payload = \"Recipes_\" + msg.payload;\nlet index = groups.indexOf(msg.payload);\nlet pickedOption = groups.splice(index, 1);\nfor (let i = 0; i < groups.length; i++) {\n    groups[i] = '\"' + groups[i].toString().replace(/ /g, \"_\") + '\"';\n}\npickedOption = pickedOption.toString().replace(/ /g, \"_\");\nmsg.payload = '{\"group\":{\"hide\":[' + groups.toString() + '],\"show\":[\"' + pickedOption+'\"]}}';\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4570,
        "y": 2580,
        "wires": [
            [
                "aa7b8f253ea918f7"
            ]
        ]
    },
    {
        "id": "aa7b8f253ea918f7",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 4730,
        "y": 2580,
        "wires": [
            [
                "c1090410677ed7cf"
            ]
        ]
    },
    {
        "id": "8bfd37949c01c861",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "Dropdown Parameters",
        "info": "",
        "x": 4400,
        "y": 2520,
        "wires": []
    },
    {
        "id": "7915ad8bc9b494c7",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "Flow Variables",
        "info": "",
        "x": 160,
        "y": 100,
        "wires": []
    },
    {
        "id": "f4cc0d4fdc7960da",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "9cf9292825accc79",
        "name": "Flow General",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "4aa1750b24b81f9a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "confid Read",
        "func": "msg.filename = 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/sampleStepResults1.csv';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 120,
        "wires": [
            [
                "2a1e58aec39be6fd"
            ]
        ]
    },
    {
        "id": "4b2b22c5d0a6f485",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3170,
        "y": 120,
        "wires": [
            [
                "4aa1750b24b81f9a"
            ]
        ]
    },
    {
        "id": "2a1e58aec39be6fd",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3520,
        "y": 120,
        "wires": [
            [
                "09e27bcf278552bf"
            ]
        ]
    },
    {
        "id": "ecfca275bcbbfedc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "confid Read",
        "func": "msg.filename = 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/sampleStepResults2.csv';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3349.00008392334,
        "y": 181.00002098083496,
        "wires": [
            [
                "2a1e58aec39be6fd"
            ]
        ]
    },
    {
        "id": "09e27bcf278552bf",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3700,
        "y": 120,
        "wires": [
            [
                "9763d85265458477",
                "a6f71a0b8281dc24"
            ]
        ]
    },
    {
        "id": "b3dc63baf9eada1f",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3169.00008392334,
        "y": 181.00002098083496,
        "wires": [
            [
                "ecfca275bcbbfedc"
            ]
        ]
    },
    {
        "id": "9763d85265458477",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Select Data",
        "func": "let output = [],\n    temp = [],\n    headers = [\n        'Step_Number',\n        'Step_Start',\n        'Step_Stop',\n        'Measurement',\n        'Max_Allowed',\n        'Min_Allowed',\n        'Result',\n        'Test_Type',\n        'Comparison',\n        'Step_Name',\n    ];\n    \n    msg.sql = {\n        headers: headers\n    };\nfor (let i = 0; i < msg.payload.length; i++){\n    temp.push(msg.payload[i].Step_Number);\n    temp.push(msg.payload[i].Step_Start);\n    temp.push(msg.payload[i].Step_Stop);\n    temp.push(msg.payload[i].Measurement);\n    temp.push(msg.payload[i].Max);\n    temp.push(msg.payload[i].Min);\n    temp.push(msg.payload[i].Result);\n    temp.push(msg.payload[i].Test_Type); // Ours is test name\n    temp.push(msg.payload[i].Comparison);\n    temp.push(msg.payload[i].Step_Name);\n\n    output.push(temp);\n    temp = [];\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3870,
        "y": 120,
        "wires": [
            [
                "7818f055fa547e34",
                "7b8e21c6cb507ef4"
            ]
        ]
    },
    {
        "id": "a6f71a0b8281dc24",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 130",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 40,
        "wires": []
    },
    {
        "id": "7818f055fa547e34",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4080,
        "y": 60,
        "wires": []
    },
    {
        "id": "7b8e21c6cb507ef4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Statement",
        "func": "// Insert statement\nlet task = \"INSERT INTO \",\n    tableName = \"[NodeRed].[dbo].[DefyTestResults] \",\n    headers = \"( \" + msg.sql.headers.toString() + \" )\",\n    valueText = \"\",\n    values = [];\n;\nmsg.payload.forEach((array) => {\n\n    // Some are numbers, some are text. For loop is eaasier to catch those\n    let i = 0; // Count of i will be kept\n    valueText += array[i++].toString(); // First instance put in so the comma insert works\n\n    for (i; i <= 5; i++) { // Adds up the numbers\n        valueText += \", \" + array[i].toString();\n    }\n\n    for (i; i <= 9; i++) { // Catching the text fields\n        valueText += \", '\" + array[i] + \"'\"; \n    }\n\n    valueText = \" VALUES ( \" + valueText + \" ) \";\n    node.send({ \n        payload: task + tableName + headers + valueText,\n        topic: array[0] // Using the Step number to define each, should use unique ID\n        });\n    values.push(valueText);\n\n    valueText = \"\";\n});\n\n/* //del\nlet sqlStatement = task + tableName + headers;// NOt being used\nmsg.payload = sqlStatement + values[0];\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 120,
        "wires": [
            [
                "1fe255fa2794954c"
            ]
        ]
    },
    {
        "id": "1fe255fa2794954c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 133",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4290,
        "y": 60,
        "wires": []
    },
    {
        "id": "d4035602d8249960",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4320,
        "y": 120,
        "wires": [
            [
                "48455d087a4e0b9d",
                "3bb7698b3e5ec4af"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "e0b08af5f1ae6196",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4720,
        "y": 120,
        "wires": [
            [
                "223476e9236b84c1",
                "d4035602d8249960"
            ]
        ]
    },
    {
        "id": "48455d087a4e0b9d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4480,
        "y": 60,
        "wires": []
    },
    {
        "id": "3bb7698b3e5ec4af",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 4520,
        "y": 120,
        "wires": [
            [
                "190d0e831d8fc1a3",
                "e0b08af5f1ae6196"
            ]
        ]
    },
    {
        "id": "223476e9236b84c1",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 135",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4920,
        "y": 80,
        "wires": []
    },
    {
        "id": "190d0e831d8fc1a3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 132",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 60,
        "wires": []
    },
    {
        "id": "aa780d419e8f6b42",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4050,
        "y": 340,
        "wires": [
            [
                "3fca0b21b8accf41"
            ]
        ]
    },
    {
        "id": "3fca0b21b8accf41",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Select Test_Result_ID",
        "func": "msg.payload = \"SELECT Test_Result_ID FROM [NodeRed].[dbo].[DefyTestResults] WHERE Step_Result_ID = 785\";\nlet bypass = {\n    payload:  \"Beep beep boo pah\",\n    topic: 'delay',\n    lineFlag: 'delay'\n}\nreturn [msg, bypass];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 340,
        "wires": [
            [
                "3aa23e148834c839"
            ],
            [
                "9959ae60b0a3a77b"
            ]
        ]
    },
    {
        "id": "3aa23e148834c839",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 4470,
        "y": 320,
        "wires": [
            [
                "51bb1227a8ba604c",
                "d34d1e5d368a93f2"
            ]
        ]
    },
    {
        "id": "9959ae60b0a3a77b",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 4470,
        "y": 380,
        "wires": [
            [
                "2592de2ae30cd15a",
                "d34d1e5d368a93f2"
            ]
        ]
    },
    {
        "id": "51bb1227a8ba604c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 137",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4640,
        "y": 260,
        "wires": []
    },
    {
        "id": "d34d1e5d368a93f2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check MSQL request (single)",
        "func": "let clearNotifications = {\n    payload: \"\"\n};\n\nlet buffer = context.get('buffer')\nif ((msg.topic ==  \"\") && (buffer == undefined)) { // checks if messae is from msql node and if the delay message hasn't arived yet\n    context.set('buffer', 'defined')\n    return [msg, clearNotifications];\n} else if ((msg.topic == 'delay') && (buffer == undefined)) {\n    msg.lineFlag = 'failed'\n    return[msg, {\n        payload: 'Unable to connect to MSQL'\n    }]\n} else if ((msg.topic == 'delay') && (buffer = 'defined')) {\n    context.set('buffer', undefined);\n    return [ , clearNotifications];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4690,
        "y": 320,
        "wires": [
            [
                "c734afdff48ba802"
            ],
            [
                "fd75bdd415f1305b"
            ]
        ]
    },
    {
        "id": "2592de2ae30cd15a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 149",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4640,
        "y": 440,
        "wires": []
    },
    {
        "id": "c734afdff48ba802",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4900,
        "y": 260,
        "wires": []
    },
    {
        "id": "fd75bdd415f1305b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 152",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4900,
        "y": 380,
        "wires": []
    },
    {
        "id": "dfbdde3fdc784092",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "name": "Notes",
        "info": "HMI not connected\nwrite json disconnected\n",
        "x": 810,
        "y": 60,
        "wires": []
    },
    {
        "id": "cab0eb25b0f27e16",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "name": "Current changes",
        "info": "Changed Basic section. \n    • Clear is set in basic\n    • storing all data, percentages and values\n\nChanges in Set write -> HMI CSV\n    • Both basic and parameter section has been updated to handle undefined (empty) cases\n",
        "x": 950,
        "y": 100,
        "wires": []
    },
    {
        "id": "792e18f0a5c5bef2",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "debug 289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 3380,
        "wires": []
    },
    {
        "id": "91e28a64f1b3b9ba",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3260,
        "y": 1140,
        "wires": [
            [
                "c1733f0711ba27c9"
            ]
        ]
    },
    {
        "id": "c1733f0711ba27c9",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "link out 1",
        "mode": "link",
        "links": [],
        "x": 3465,
        "y": 1080,
        "wires": []
    },
    {
        "id": "36b4e9aa57b9bd34",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3360,
        "y": 1440,
        "wires": [
            [
                "50e8e2093892c2b9"
            ],
            []
        ]
    },
    {
        "id": "05e89193ab46ad87",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3360,
        "y": 1520,
        "wires": [
            [
                "5c7756d64364c634"
            ],
            []
        ]
    },
    {
        "id": "bd8002e9bc519619",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3360,
        "y": 1600,
        "wires": [
            [
                "7af7b48edc11bf0d"
            ],
            []
        ]
    },
    {
        "id": "905c4d15027928fb",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 1440,
        "wires": [
            [
                "36b4e9aa57b9bd34"
            ]
        ]
    },
    {
        "id": "aa2a2b2176c05d8b",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 1520,
        "wires": [
            [
                "05e89193ab46ad87"
            ]
        ]
    },
    {
        "id": "fb7d7ca0164ba068",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 1600,
        "wires": [
            [
                "bd8002e9bc519619"
            ]
        ]
    },
    {
        "id": "30f8b47daa429470",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA2';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1440,
        "wires": [
            [
                "905c4d15027928fb"
            ],
            [
                "fe7c70c3ce699303"
            ]
        ]
    },
    {
        "id": "fa64b89314d98475",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA3';\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1520,
        "wires": [
            [
                "aa2a2b2176c05d8b"
            ],
            [
                "fe7c70c3ce699303"
            ]
        ]
    },
    {
        "id": "dad481905a20fdea",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'ATEKA4';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1600,
        "wires": [
            [
                "fb7d7ca0164ba068"
            ],
            [
                "fe7c70c3ce699303"
            ]
        ]
    },
    {
        "id": "a65d38dff46ce146",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "PLC Indicator Buffer in",
        "links": [
            "35a5747e957985c7",
            "e99a5f4974e41824"
        ],
        "x": 3625,
        "y": 1320,
        "wires": [
            [
                "be4a9fa1b209c98e",
                "4af2dd4f5c5f8cf0"
            ]
        ]
    },
    {
        "id": "4b8ce65db5980c6a",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "PLC Indicator Buffer out",
        "mode": "link",
        "links": [
            "9ce57eae9878230d"
        ],
        "x": 3955,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5a119c75341540cd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.bufTopic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and bufTopic to the buffer\n    buffer.push(msg);\n    ID.push(msg.bufTopic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3960,
        "y": 940,
        "wires": [
            [
                "a3224fe140f78d79",
                "bab57cde095f9f92"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "eb16fb104f90241c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.bufTopic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 940,
        "wires": [
            [
                "ed1ac282b089fd55",
                "5a119c75341540cd"
            ]
        ]
    },
    {
        "id": "a3224fe140f78d79",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 290",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4110,
        "y": 860,
        "wires": []
    },
    {
        "id": "ed1ac282b089fd55",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 291",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4710,
        "y": 900,
        "wires": []
    },
    {
        "id": "7a7e721034420dce",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 292",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4370,
        "y": 880,
        "wires": []
    },
    {
        "id": "8f88998133837a96",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Cleaned",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4280,
        "y": 940,
        "wires": [
            [
                "eb16fb104f90241c"
            ]
        ]
    },
    {
        "id": "b152788ae867aaa9",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3580,
        "y": 880,
        "wires": [
            [
                "dcac7018ef63a65a"
            ]
        ]
    },
    {
        "id": "dcac7018ef63a65a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "function 24",
        "func": "let buf = context.get('buf') || 0;\nmsg.topic = buf++;\ncontext.set('buf', buf);\nmsg.bufTopic = 'Topic ' + buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3700,
        "y": 940,
        "wires": [
            [
                "a58e72ce0f1a8380",
                "5a119c75341540cd"
            ]
        ]
    },
    {
        "id": "a58e72ce0f1a8380",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 293",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3820,
        "y": 860,
        "wires": []
    },
    {
        "id": "bab57cde095f9f92",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 4130,
        "y": 940,
        "wires": [
            [
                "8f88998133837a96"
            ]
        ]
    },
    {
        "id": "f8f22ece88ec980d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set Clear Basic",
        "func": "msg.payload = {\n    basic : {\n        \"GB\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"ACW\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"IR\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        },\n        \"EL\": {\n            \"value\": \"\",\n            \"upperTol\": \"\",\n            \"lowerTol\": \"\",\n            \"upperVal\": \"\",\n            \"lowerVal\": \"\"\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1920,
        "wires": [
            [
                "9fc4b59f185c006e"
            ]
        ]
    },
    {
        "id": "fa9015a8110bfeda",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic clear in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 145,
        "y": 1940,
        "wires": [
            [
                "47be9509daa1c04b",
                "f8f22ece88ec980d"
            ]
        ]
    },
    {
        "id": "9fc4b59f185c006e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Grab data",
        "func": "msg.data = msg.payload.basic; // Assume this is the setup of the stored data, but also clear has to be structured this way\n\nif (msg.lineFlag == 'clear' || msg.lineFlag == 'save' || msg.lineFlag == 'JSONdata') { \n    return [msg, msg];\n}\n//Setting up the Feed Lines data\n//msg.dataKeys = Object.keys(msg.data);\nmsg.labels = { \n    \"upperTol\": \"Upper Tolerance %\", \n    \"lowerTol\": \"Upper Tolerance %\" \n    }\nreturn [ ,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1920,
        "wires": [
            [
                "fc805a8187a29356"
            ],
            [
                "fa831abc7da41e90"
            ]
        ]
    },
    {
        "id": "47be9509daa1c04b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Clear IN",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1880,
        "wires": []
    },
    {
        "id": "039d4dbe4e2b78e1",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Tests in",
        "links": [
            "5491c556639992d7"
        ],
        "x": 255,
        "y": 1980,
        "wires": [
            [
                "a6a1f7a83c9a8a9a",
                "9fc4b59f185c006e"
            ]
        ]
    },
    {
        "id": "a6a1f7a83c9a8a9a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Data in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1960,
        "wires": []
    },
    {
        "id": "c07227c42b3fd36d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Bypass",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1820,
        "wires": []
    },
    {
        "id": "72e02e9f9b6ba534",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'GB';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"Ground Bond\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 1920,
        "wires": [
            [
                "b0395f2d2b283ff5",
                "8f7cb562d41b8b5d",
                "264ef17a2f0a1d0a"
            ]
        ],
        "l": false
    },
    {
        "id": "86db4bedc72c93e1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'ACW';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"ACW\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 1980,
        "wires": [
            [
                "2fb8b9d1af7859d8",
                "df1fd1941c5b395f"
            ]
        ],
        "l": false
    },
    {
        "id": "8cb57e408fc465c5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'IR';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"IR\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2040,
        "wires": [
            [
                "6074901c2154d650",
                "18a6019dbf51f4b8"
            ]
        ],
        "l": false
    },
    {
        "id": "aebf85de92113483",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set loaded line",
        "func": "msg.dataKey = 'EL';\nmsg.functionInfo = [\n    {\n        \"topic\": \"value\",\n        \"label\": \"Earth Leakage\"\n    },\n    {\n        \"topic\": \"upperTol\",\n        \"label\": \"\"\n    },\n    {\n        \"topic\": \"lowerTol\",\n        \"label\": \"\"\n    }\n]\nif (msg.dataKey in msg.data) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 2100,
        "wires": [
            [
                "b868f68bd9f8c96a",
                "b0d452d7a86250cc"
            ]
        ],
        "l": false
    },
    {
        "id": "517b54151287feac",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined && msg.topic == 'save') { // Buffer trigger is msg.complete existing (save)\n//node.warn('You\\'re savng things');\n    if (msg.lineFlag == 'completedWithChecks') {\n        // set payload with buffer and clear buffer if final checks have been done, indicated by the msg.lineFlag = \"completedWithChecks\"\n        //context.set('buffer', undefined)\n        return [msg, ];\n    }\n    msg.payload = context.get('buffer');\n    return [ ,msg]; // Go to line with checks\n} else if (msg.lineFlag == 'JSONdata') { //Catching the Feed line data\n//node.warn('Storing JSON data');\n    context.set('buffer', msg.data);\n} else if (msg.lineFlag == \"clear\") { // Catching clear message\n//node.warn('Clearing data');\n    context.set('buffer', undefined);\n} else { // Catches normal data inputing\n//node.warn('Inputing normal data');\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || {};\n\n    // Add / Delete the incoming message payload and topic to the buffer\n    if ((msg.payload == null) && (msg.topic in buffer)) {// If field is cleared\n        delete buffer[msg.topic];\n    } else { // if any other data point comes through thats not empty, save it\n        buffer[msg.topic] = msg.payload;\n    }\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1940,
        "wires": [
            [
                "b9fe3a978a99d255",
                "9eb6147d495f9105"
            ],
            [
                "306199d1b0477757",
                "fb7182813481b720"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "b0395f2d2b283ff5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 1940,
        "wires": [
            [
                "79439506b1a6acc3"
            ]
        ],
        "l": false
    },
    {
        "id": "264ef17a2f0a1d0a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 287",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1820,
        "wires": []
    },
    {
        "id": "2fb8b9d1af7859d8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2000,
        "wires": [
            [
                "648b704962cd7cb4"
            ]
        ],
        "l": false
    },
    {
        "id": "6074901c2154d650",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2060,
        "wires": [
            [
                "64540ab6ef54df04"
            ]
        ],
        "l": false
    },
    {
        "id": "b868f68bd9f8c96a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 2120,
        "wires": [
            [
                "23bcac963ec3db9e"
            ]
        ],
        "l": false
    },
    {
        "id": "6a9e30f65e495bca",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Buffer in",
        "links": [
            "a5d2df37afae85ec",
            "b4b222f939895c2c"
        ],
        "x": 1685,
        "y": 2160,
        "wires": [
            [
                "517b54151287feac",
                "9af343f3d1944ad8"
            ]
        ]
    },
    {
        "id": "7e8e9285ac4d4af7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    } \n    return []; \n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 1960,
        "wires": [
            [
                "517b54151287feac",
                "7dac7ad1da48a1f9"
            ]
        ],
        "l": false
    },
    {
        "id": "ea2d055881e36cfe",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2020,
        "wires": [
            [
                "517b54151287feac"
            ]
        ],
        "l": false
    },
    {
        "id": "dc4d189a7a019648",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2080,
        "wires": [
            [
                "517b54151287feac"
            ]
        ],
        "l": false
    },
    {
        "id": "ef896cd52b629bbd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet dataKey = context.get('dataKey') || undefined;\n\n//From feed line, save the object name (how it's stored)\nif ('dataKey' in msg) { // msg from Feed Line (clear and Data)\n    context.set('dataKey', msg.dataKey)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONData') { //stored Data line\n        //Nothing to add here, leaving it for reference\n    }\n    return [];\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n}\nif (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n    buffer = null;\n    context.set('buffer', undefined)\n}\nmsg = {\n    payload: (buffer == undefined) ? null : buffer,\n    topic: dataKey\n}\nif (msg.topic != undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1595,
        "y": 2140,
        "wires": [
            [
                "517b54151287feac"
            ]
        ],
        "l": false
    },
    {
        "id": "b9fe3a978a99d255",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 102",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1820,
        "wires": []
    },
    {
        "id": "9eb6147d495f9105",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Calc values",
        "func": "let upperVal, lowerVal\n//Going to be using the logic of setting \nfor (var key in msg.payload) { //Checks each test in basics\n    if (msg.payload[key].value < 0) { // Empty values are forced to equal -1\n        msg.payload[key].upperVal = -1;\n        msg.payload[key].lowerVal = -1;\n    } else {\n        if (msg.payload[key].upperTol < 0) {\n            msg.payload[key].upperVal = -1;\n        } else {\n            msg.payload[key].upperVal = msg.payload[key].value + msg.payload[key].value * msg.payload[key].upperTol / 100.0;\n        }\n        if (msg.payload[key].lowerTol < 0) {\n            msg.payload[key].lowerVal = -1;\n        } else {\n            msg.payload[key].lowerVal = msg.payload[key].value - msg.payload[key].value * msg.payload[key].lowerTol / 100.0;\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1920,
        "wires": [
            [
                "fe33b174df8546ad",
                "d235074ffad9a339"
            ]
        ]
    },
    {
        "id": "306199d1b0477757",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Checks (Has Sets)",
        "func": "// Set\nif(msg.lineFlag == \"clear\")\n    return null;\nlet basicFormElements = { // Has the correct order of things\n    \"GB\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"ACW\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"IR\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    },\n    \"EL\": {\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\"\n    }\n},\n    basicFormElementsNames = {\n        \"GB\" : \"Ground Bond Value(s)\",\n        \"ACW\": \"ACW Value(s)\",\n        \"IR\": \"Insulation Resistance Value(s)\",\n        \"EL\": \"Earth Leakage Value(s)\"\n    },\n    output = {},\n    temp = {},\n    missing = [];\n \nif (msg.payload == undefined) { // checks if nothing was in the buffer's context variable, if so, make it empty\n    msg.payload = { // copy basicFormsElements into payload\n        ...basicFormElements\n    };\n    for(var key1 in msg.payload) { // Goes through and creates the empty basic data\n        for (var key2 in msg.payload[key1]) {\n            temp[key2] = -1;\n        }\n        output[key1] = temp;\n        missing.push(basicFormElementsNames[key1]);\n    }\n} else {\n    for (var key1 in basicFormElements) { // Goes through and creates the empty basic data\n        if (key1 in msg.payload && msg.payload[key1] != \"\") { // Check if key exists in current payload\n            for (var key2 in basicFormElements[key1]) { // Loop through members of each basic test\n                if (key2 in msg.payload[key1]) { // Check if each member in basic test exist\n                    temp[key2] = (msg.payload[key1][key2] != null) ? msg.payload[key1][key2] : -1; \n                } else { //Looking at members in basic test\n                    temp[key2] = -1;\n                    if (!(missing.includes(basicFormElementsNames[key1]))) { // checks to see if missing arr does not have text error msg\n                        missing.push(basicFormElementsNames[key1]);\n                    }\n                }\n            }\n            output[key1] = (temp)\n            temp = {}\n        } else { // Looking at basic tests\n            for (key2 in basicFormElements[key1]) {\n                temp[key2] = -1;\n            }\n            output[key1] = temp;\n            temp = {};\n            missing.push(basicFormElementsNames[key1])\n        }\n    }\n}\n\nmsg.data  = {\n    output: output, //Used in second node downstream to assign payload\n    missing: missing\n}\n\nif (missing.length > 0) { // If the full basic form is not filled in\n    let status = 'The following elements have been left out in the \"Basics\" section: || ';\n    for(let i = 0; i < missing.length; i++) {\n        status += missing[i] + \" || \";\n    }\n    msg.payload = status;\n    return [ , msg];\n} else { // if full basic form is completed\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = output;\n    delete msg.data; // Not needed once checks are completed.\n    return [msg, ];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1980,
        "wires": [
            [
                "40226ce37f97e01d",
                "c08febe6a2ea67d1"
            ],
            [
                "071e0510fb46c738",
                "a5f50c3adfd68f30",
                "a8e5c3f63ac47823"
            ]
        ]
    },
    {
        "id": "fb7182813481b720",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 115",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2040,
        "wires": []
    },
    {
        "id": "79439506b1a6acc3",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Ground Bond",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 900,
        "y": 1940,
        "wires": [
            [
                "46a420304f511f09",
                "9198bb0cdc6fe3d6"
            ]
        ]
    },
    {
        "id": "53bc6d05453164e1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 1940,
        "wires": [
            [
                "a71b06b6aa2a7ca7"
            ]
        ],
        "l": false
    },
    {
        "id": "648b704962cd7cb4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "ACW",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 880,
        "y": 2000,
        "wires": [
            [
                "5661c235efdcfa2c"
            ]
        ]
    },
    {
        "id": "399295b176020939",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2000,
        "wires": [
            [
                "620b5fb0977fafbe"
            ]
        ],
        "l": false
    },
    {
        "id": "64540ab6ef54df04",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "IR",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 880,
        "y": 2060,
        "wires": [
            [
                "53629911f5459ce1"
            ]
        ]
    },
    {
        "id": "fe3347238adb2776",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2060,
        "wires": [
            [
                "6a8b42eb09f61512"
            ]
        ],
        "l": false
    },
    {
        "id": "23bcac963ec3db9e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Earth Leakage",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 910,
        "y": 2120,
        "wires": [
            [
                "edad1ed751f9f35a"
            ]
        ]
    },
    {
        "id": "c48701d31a705a25",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 2120,
        "wires": [
            [
                "35bd6a039503688e"
            ]
        ],
        "l": false
    },
    {
        "id": "9af343f3d1944ad8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Save in ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 2100,
        "wires": []
    },
    {
        "id": "8ba01020f0859762",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 1940,
        "wires": [
            [
                "7e8e9285ac4d4af7"
            ]
        ]
    },
    {
        "id": "7dac7ad1da48a1f9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Inputted data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1820,
        "wires": []
    },
    {
        "id": "9e06961882e23a35",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2000,
        "wires": [
            [
                "ea2d055881e36cfe"
            ]
        ]
    },
    {
        "id": "2826b8fce3f78243",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2060,
        "wires": [
            [
                "dc4d189a7a019648"
            ]
        ]
    },
    {
        "id": "c868f96cbdde6b5a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Lower Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1470,
        "y": 2120,
        "wires": [
            [
                "ef896cd52b629bbd"
            ]
        ]
    },
    {
        "id": "fe33b174df8546ad",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 288",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 1820,
        "wires": []
    },
    {
        "id": "d235074ffad9a339",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Send Join / Save Return",
        "func": "// Set things up for the Final join node\nlet joinNodeMsg = {\n    payload : msg.payload,\n    topic   : 'basic'\n}\n\nlet saveMsg = {\n    payload : \"\",\n    topic   : 'save',\n    lineFlag: 'save',\n    complete: ''\n}\nreturn [joinNodeMsg, saveMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1920,
        "wires": [
            [
                "e65f384ee41cf598",
                "03d1c3ba697c94e4"
            ],
            [
                "899982ab2aee5dab",
                "b19f1d350c2fabd7"
            ]
        ]
    },
    {
        "id": "40226ce37f97e01d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 109",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2080,
        "wires": []
    },
    {
        "id": "071e0510fb46c738",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "PROCEED ANYWAY",
        "cancel": "GO BACK",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2170,
        "y": 2000,
        "wires": [
            [
                "73d41cef94786e51",
                "d74b12cee713ed7e"
            ]
        ]
    },
    {
        "id": "a5f50c3adfd68f30",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic Error out",
        "mode": "link",
        "links": [
            "c7a80db6e1441f4f"
        ],
        "x": 2115,
        "y": 2160,
        "wires": []
    },
    {
        "id": "a8e5c3f63ac47823",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Checks (bottom)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 2140,
        "wires": []
    },
    {
        "id": "46a420304f511f09",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "After GB_V",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1820,
        "wires": []
    },
    {
        "id": "9323c14a8cd433da",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 1940,
        "wires": [
            [
                "8ba01020f0859762"
            ]
        ],
        "l": false
    },
    {
        "id": "a71b06b6aa2a7ca7",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 1940,
        "wires": [
            [
                "86f7147f3a0eae1d",
                "643cd93a1a646fcf"
            ]
        ]
    },
    {
        "id": "bedb18ee343c6347",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2000,
        "wires": [
            [
                "9e06961882e23a35"
            ]
        ],
        "l": false
    },
    {
        "id": "620b5fb0977fafbe",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2000,
        "wires": [
            [
                "4c4b6a2e98592723"
            ]
        ]
    },
    {
        "id": "2a096eb5b729ad7a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2060,
        "wires": [
            [
                "2826b8fce3f78243"
            ]
        ],
        "l": false
    },
    {
        "id": "6a8b42eb09f61512",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2060,
        "wires": [
            [
                "368d37e7008cea73"
            ]
        ]
    },
    {
        "id": "f4819242d6b630f6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.data[msg.dataKey].lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 2120,
        "wires": [
            [
                "c868f96cbdde6b5a"
            ]
        ],
        "l": false
    },
    {
        "id": "35bd6a039503688e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Upper Tolerance",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1190,
        "y": 2120,
        "wires": [
            [
                "677d85a17326c45a"
            ]
        ]
    },
    {
        "id": "e65f384ee41cf598",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 114",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 1840,
        "wires": []
    },
    {
        "id": "03d1c3ba697c94e4",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 2315,
        "y": 1880,
        "wires": []
    },
    {
        "id": "899982ab2aee5dab",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 117",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b19f1d350c2fabd7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Save Out From Basic",
        "mode": "link",
        "links": [
            "37a523ac432e0d6b",
            "f20ae25ed86a8160"
        ],
        "x": 2355,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a5d2df37afae85ec",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Buffer Checks out",
        "mode": "link",
        "links": [
            "6a9e30f65e495bca"
        ],
        "x": 2465,
        "y": 1960,
        "wires": []
    },
    {
        "id": "73d41cef94786e51",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "debug 111",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2040,
        "wires": []
    },
    {
        "id": "d74b12cee713ed7e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set Line Flag",
        "func": "if (msg.payload == \"PROCEED ANYWAY\") {\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = msg.data.output;\n    delete msg.data; // Not needed once checks are completed.\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 2000,
        "wires": [
            [
                "a5d2df37afae85ec",
                "bf90850384938521"
            ]
        ]
    },
    {
        "id": "86f7147f3a0eae1d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "After Upper Tolerance",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1820,
        "wires": []
    },
    {
        "id": "bf90850384938521",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Set Line Flag",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 2040,
        "wires": []
    },
    {
        "id": "2e9e80c68d3c4b58",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "New Data structure (clear)",
        "props": [
            {
                "p": "payload.basic",
                "v": "{\"GB\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"ACW\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"IR\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"},\"EL\":{\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"upperVal\":\"\",\"lowerVal\":\"\"}}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "clear",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "8a84e81f560c21e0",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "name": "Basic",
        "info": "",
        "x": 100,
        "y": 1820,
        "wires": []
    },
    {
        "id": "b4af2d25ef2d0ac9",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "group": "218e00eac196634f",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 870,
        "y": 2160,
        "wires": []
    },
    {
        "id": "34b7442112b489aa",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "group": "218e00eac196634f",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 1040,
        "y": 2160,
        "wires": []
    },
    {
        "id": "49f6e7937c095566",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "6e97773fd049cb5b",
        "group": "218e00eac196634f",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 1220,
        "y": 2160,
        "wires": []
    },
    {
        "id": "e7a2a4b9a696881a",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Test",
        "payloadType": "str",
        "x": 100,
        "y": 400,
        "wires": [
            [
                "ee87062733a66993"
            ]
        ]
    },
    {
        "id": "ee87062733a66993",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "1c6020fbb63afcbb"
        ],
        "x": 215,
        "y": 360,
        "wires": []
    },
    {
        "id": "566a00ebb027feb3",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "Local",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3350,
        "y": 1680,
        "wires": [
            [
                "0fa57ade6c906b98"
            ],
            []
        ]
    },
    {
        "id": "d94928736ec68c9e",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3220,
        "y": 1680,
        "wires": [
            [
                "566a00ebb027feb3",
                "c2c9735da2d44354"
            ]
        ]
    },
    {
        "id": "6dd7449228ea05ec",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\nmsg.machineID = 'local';\n\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1680,
        "wires": [
            [
                "d94928736ec68c9e"
            ],
            [
                "fe7c70c3ce699303"
            ]
        ]
    },
    {
        "id": "f83e8b87b89f68b3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 299",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 1760,
        "wires": []
    },
    {
        "id": "06fbf0db7aa5673a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 301",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 3800,
        "wires": []
    },
    {
        "id": "81326c921da84159",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3420,
        "wires": [
            [
                "9c7996d4ba3f5e25"
            ]
        ]
    },
    {
        "id": "6f1005a602a07add",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3420,
        "wires": [
            [
                "81326c921da84159"
            ]
        ],
        "l": false
    },
    {
        "id": "6132ac162aca7cee",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3420,
        "wires": [
            [
                "2ae5d6e42d3b0716"
            ]
        ]
    },
    {
        "id": "48dc445d4ff942cc",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3420,
        "wires": [
            [
                "68732acf328c67f3",
                "88550d1f0120f442"
            ]
        ]
    },
    {
        "id": "f677382f329687e1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload : msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    } \n    \n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3440,
        "wires": [
            [
                "59d279a4d03ce1f0",
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "765279b5ea382782",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Before End Line",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 3380,
        "wires": []
    },
    {
        "id": "3bc6d73031a37c78",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3420,
        "wires": [
            [
                "6132ac162aca7cee"
            ]
        ],
        "l": false
    },
    {
        "id": "88550d1f0120f442",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3420,
        "wires": [
            [
                "48dc445d4ff942cc"
            ]
        ],
        "l": false
    },
    {
        "id": "e2a25e3816b57796",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3420,
        "wires": [
            [
                "b42caa5c33f93cc9"
            ]
        ]
    },
    {
        "id": "59d279a4d03ce1f0",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "End Line",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 3380,
        "wires": []
    },
    {
        "id": "8c047014126f4c26",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined && msg.topic == 'save') { // Buffer trigger is msg.complete existing (save)\n    if (msg.lineFlag == 'completedWithChecks') {\n        // set payload with buffer and clear buffer if final checks have been done, indicated by the msg.lineFlag = \"completedWithChecks\"\n        //context.set('buffer', undefined)\n        msg.topic = 'parameterData';\n        return [msg, ];\n    }\n    msg.payload = context.get('buffer');\n    return [ ,msg]; // Go to line with checks\n} else if (msg.lineFlag == 'JSONdata') { //Catching the Feed line data\n    context.set('buffer', msg.data);\n} else if (msg.topic == \"clear\") { // Catching clear message\n    context.set('buffer', undefined);\n    if (msg.lineFlag == 'fileSelected') {\n        return [msg,];\n    }\n} else { // Catches normal data inputing\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || {};\n\n    // Add / Delete the incoming message payload and topic to the buffer\n    if ((msg.payload == null) && (msg.topic in buffer)) {// If field is cleared\n        delete buffer[msg.topic];\n    } else { // if any other data point comes through thats not empty, save it\n        buffer[msg.topic] = msg.payload;\n    }\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 3520,
        "wires": [
            [
                "906b3f8242500bb5",
                "bedd4e7e680bd1f8"
            ],
            [
                "8aa0a989873e1241",
                "60db4289585826c8"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "ec754243006abbd0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3420,
        "wires": [
            [
                "e2a25e3816b57796"
            ]
        ],
        "l": false
    },
    {
        "id": "3b3a5764562134ea",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3420,
        "wires": [
            [
                "07acba2d374ef320"
            ]
        ]
    },
    {
        "id": "8478259032868211",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Basic Buffer in",
        "links": [
            "a3d72fef328832a0"
        ],
        "x": 2295,
        "y": 3680,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ]
    },
    {
        "id": "86ea00ea5425bbfe",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3520,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "1bda9836522fb1d0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3600,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "9e0a6351566681e0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3680,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "e08ef402ed7f5427",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3760,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "539936a80222ae52",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3840,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "b50ac676ec012d75",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 3920,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "37a011b31c406eb4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4000,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "3720eeb3e3452a11",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4080,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "1d7401b14e0bc95d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4160,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "2ccd2f92716679f7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4980,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "98a97cc6104838ef",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4260,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "2ce8a6374abb9919",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4340,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "c2b863fdf34ad4a5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4420,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "156de4ccc7bed134",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4500,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "24bbc8e4206864c0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4580,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "154cf6e3a01b4df1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4660,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "2ee87b7820fdc936",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4740,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "ecef329470d31c86",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4820,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "465fea572d3cefb4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "End line data management",
        "func": "let buffer = context.get('buffer') || {};\nlet bufferTopic;\nif (context.get('bufferTopic') == undefined) {\n    bufferTopic = msg.bufferTopic;\n    context.set('bufferTopic', bufferTopic);\n} else {\n    bufferTopic = context.get('bufferTopic');\n}\n\n//From feed line, save the object name (how it's stored)\nif ('lineFlag' in msg) { // msg from Feed Line (clear and Data)\n\n    if (msg.lineFlag == 'clear') { //Clear message\n        context.set('buffer', undefined)\n    } else if (msg.lineFlag == 'JSONdata') { //stored loaded Data line\n        //Nothing to add here, leaving it for reference\n        msg = {\n            topic: bufferTopic,\n            payload: msg.payload\n        }\n        buffer = msg.payload;\n        context.set('buffer', buffer);\n        return msg;\n    }\n\n\n} else { // Normal data\n    buffer[msg.topic] = msg.payload\n    context.set('buffer', buffer);\n\n    if (Object.values(buffer).every(value => value === null)) { //Catches when all values are zero / null\n        buffer = null;\n        context.set('buffer', undefined)\n    }\n    msg = {\n        payload: (buffer == undefined) ? null : buffer,\n        topic: bufferTopic\n    }\n    if (msg.topic != undefined) {\n        //del\n        msg.check = {\n            buffer: buffer\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2035,
        "y": 4900,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ],
        "l": false
    },
    {
        "id": "8aa0a989873e1241",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Checks (Has Sets)",
        "func": "//Checking\nlet arrTest1 = [],\n    arrTest2 = [],\n    msgData = JSON.stringify(msg);\n\n// Clear message returns nothing\nif(msg.lineFlag == \"clear\")\n    return null;\n\nlet missingList = [],\n    incorrectList1 = [],\n    currentMissingFlag = false,\n    basicKeys = Object.keys(msg.payload),\n    requiredMembers = [\"name\", \"value\", \"upperTol\", \"lowerTol\"];\n\nfor (var key1 in msg.payload) { // Goes through each parameter\n    currentMissingFlag = false;\n    for (const member of requiredMembers) { //Checks requiredMembers that they exist\n        if (!(member in msg.payload[key1]) || msg.payload[key1][member] === \"\" || (msg.payload[key1][member] === null && msg.payload[key1][member] !== 0)) {\n            arrTest2.push([key1, member, msg.payload[key1][member]]);\n            arrTest1.push([!(member in msg.payload[key1]), msg.payload[key1][member] === \"\", msg.payload[key1][member] === null]);\n            missingList.push(key1);\n            currentMissingFlag = true;\n            break;\n        }\n    }\n    if (!currentMissingFlag) { //This should catch the cases where all the value and name parameters are present\n        for (let i = 1; i < 4; i++) { //Using the requiredMembers template\n            if (msg.payload[key1][requiredMembers[i]] < 0) { //Checks to see that all the elements are positive\n                incorrectList1.push(key1); // Pushes the incorrect key into a list and jumps out of the checks\n                break;\n            }\n        }\n    }\n}\n\nlet issueText = \"\",\n    currentCheck = \"\",\n    missing = \"\",\n    incorrect1 = \"\",\n    incorrect2 = \"\"\n\nif (missingList.length > 0) {\n    currentCheck = 'missing';\n    for (const member of missingList) {\n        missing += member + \" \"\n    }\n    issueText = \"Please make sure that Parameter Names and Values section are fully filled in (Missing on \" + missing.trim() + \").\";\n    msg.payload = issueText;\n} else if (incorrectList1.length > 0) {\n    currentCheck = 'incorrect1'\n    for (const member of incorrectList1) {\n        incorrect1 += member + \" \"\n    }\n    issueText = \"Please make sure that all values are positive (\" + incorrect1.trim() + \").\";\n    msg.payload = issueText;\n}\nmsg.errorCode = currentCheck;\n\n// Checking\nmsg.check = {\n    arrTest2: arrTest2,\n    arrTest1: arrTest1,\n    msgData: msgData,\n    currentCheck: currentCheck,\n    missingList: missingList,\n    incorrectList1: incorrectList1,\n    issueText: issueText\n}\n\nif (msg.errorCode == \"\") {\n    msg.lineFlag = 'completedWithChecks'\n    return [msg, , { payload: \"Recipe is being saved\" }]\n} else {\n    return [, msg, msg]\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 3540,
        "wires": [
            [
                "a3d72fef328832a0",
                "2418183db5b14a58"
            ],
            [
                "f51a7ae38da3f247",
                "48605c97cc801545"
            ],
            [
                "da2c0c1abdcb6011"
            ]
        ]
    },
    {
        "id": "60db4289585826c8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 310",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 3620,
        "wires": []
    },
    {
        "id": "906b3f8242500bb5",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Leaving parameters",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 3380,
        "wires": []
    },
    {
        "id": "bedd4e7e680bd1f8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Calc values",
        "func": "let upperVal, lowerVal\n//Going to be using the logic of setting \nif (msg.lineFlag != 'fileSelected') {\n    for (var key in msg.payload) {\n        msg.payload[key].upperVal = msg.payload[key].value + msg.payload[key].value * msg.payload[key].upperTol / 100;\n        msg.payload[key].lowerVal = msg.payload[key].value - msg.payload[key].value * msg.payload[key].lowerTol / 100;\n    }\n} \nmsg.nodeID = 'node:d266b35bbc25032f'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 3480,
        "wires": [
            [
                "07b289da5a1af7f3",
                "d266b35bbc25032f"
            ]
        ]
    },
    {
        "id": "0fe92fb3fd7e197d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 1\";\nmsg.bufferTopic = \"Par01\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3400,
        "wires": [
            [
                "5594a98927d1d631",
                "2cd30b8115e93a33"
            ]
        ],
        "l": false
    },
    {
        "id": "297ea0ab9d5abf55",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3420,
        "wires": [
            [
                "3b3a5764562134ea"
            ]
        ],
        "l": false
    },
    {
        "id": "c9742fc00a857919",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3420,
        "wires": [
            [
                "01c09518311fd758"
            ]
        ]
    },
    {
        "id": "f51a7ae38da3f247",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "GO BACK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2750,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "48605c97cc801545",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Checks (bottom)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 3620,
        "wires": []
    },
    {
        "id": "da2c0c1abdcb6011",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Basic Error out",
        "mode": "link",
        "links": [
            "c7a80db6e1441f4f"
        ],
        "x": 2705,
        "y": 3660,
        "wires": []
    },
    {
        "id": "07b289da5a1af7f3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Calc Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 3380,
        "wires": []
    },
    {
        "id": "d35f226b714c1efa",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "Clear",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "clear",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"\",\"value\":\"\",\"upperTol\":\"\",\"lowerTol\":\"\",\"instructions\":\"\",\"ifTestFailStop\":false}",
        "payloadType": "json",
        "x": 450,
        "y": 3280,
        "wires": [
            [
                "0fe92fb3fd7e197d",
                "1bd2b20c4f16ff70",
                "b9182b988e3bae30",
                "52a49eb7c9602eee",
                "a41c8551aae893fb",
                "d4eb7c4119fd72d2",
                "058e802695751c9a",
                "49795f709c828c99",
                "b80542d63469f2c6",
                "38b6d67c867c539c",
                "d16c761985a57a84",
                "a37c187c76cbbf79",
                "5db83138e42c29c8",
                "968cea58cfded069",
                "51527e279977768a",
                "f94a1141b8bfed36",
                "b6fb0b784e7fc29b",
                "5c701d2c0eda0332",
                "8abcfc19b1414e84",
                "e63c9494c350d701"
            ]
        ]
    },
    {
        "id": "5594a98927d1d631",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3420,
        "wires": [
            [
                "c9742fc00a857919"
            ]
        ],
        "l": false
    },
    {
        "id": "6fa763cbc16682d6",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3500,
        "wires": [
            [
                "72d6f5cc5dd00dd5",
                "d21a1dd37cf1ca43"
            ]
        ]
    },
    {
        "id": "4a34b7cc64704694",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3580,
        "wires": [
            [
                "e70af25c91140f83",
                "5f523914fc5a8b43"
            ]
        ]
    },
    {
        "id": "c555618d81357532",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3660,
        "wires": [
            [
                "97a8fd6e11911595",
                "56e24c769aae2ea1"
            ]
        ]
    },
    {
        "id": "cd86035bab7ce4d5",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3740,
        "wires": [
            [
                "133cb8ab2ec7f504",
                "d716a2401c33b9df"
            ]
        ]
    },
    {
        "id": "a4d53386df4484aa",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3820,
        "wires": [
            [
                "aeb85e03db18a3fd",
                "8daa95cc5dc8fdf9"
            ]
        ]
    },
    {
        "id": "69b0d047139f3665",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3900,
        "wires": [
            [
                "3610d8b0ea5bfea9",
                "fb84374f8e7262b8"
            ]
        ]
    },
    {
        "id": "3fad9d805578e8c9",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 3980,
        "wires": [
            [
                "352763695066694c",
                "37f77fbf56d5671c"
            ]
        ]
    },
    {
        "id": "3c1bfa1369ba3e97",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4060,
        "wires": [
            [
                "cb4a54f26026712e",
                "ba0a12a7a8ee5594"
            ]
        ]
    },
    {
        "id": "c3578795be16cb51",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4140,
        "wires": [
            [
                "e30bc11e88188932",
                "ba796631157cdffb"
            ]
        ]
    },
    {
        "id": "c47705e96af2adea",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4960,
        "wires": [
            [
                "867d5a12e1a3f87e",
                "8fb51d43cf0f2de1"
            ]
        ]
    },
    {
        "id": "37387762632302d1",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4240,
        "wires": [
            [
                "5ece38961f189808",
                "04e823e7991ad1f0"
            ]
        ]
    },
    {
        "id": "e681f0b2d7042713",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4320,
        "wires": [
            [
                "4e36f1585181830e",
                "0d30e08a3c71a69c"
            ]
        ]
    },
    {
        "id": "ef3f203e5b11b0be",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4400,
        "wires": [
            [
                "759489bd1233ba62",
                "d63d5d15a43dce21"
            ]
        ]
    },
    {
        "id": "ca91e93978aa3473",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4480,
        "wires": [
            [
                "81ec1b3d0a6520cf",
                "66eedf0330f1e2b4"
            ]
        ]
    },
    {
        "id": "d0522be8b0fcb1bf",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4560,
        "wires": [
            [
                "2b54e889a5265de0",
                "7374d330d1a660fe"
            ]
        ]
    },
    {
        "id": "5631d9a0d7ca37c9",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4640,
        "wires": [
            [
                "50b4d194672bb389",
                "4aa094193be14ea4"
            ]
        ]
    },
    {
        "id": "ab7b4310fb2f4bf3",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4720,
        "wires": [
            [
                "8a47b8d5fc05794e",
                "3bce5408476df26f"
            ]
        ]
    },
    {
        "id": "fb11617e22df66b0",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4800,
        "wires": [
            [
                "9629d942ab071493",
                "4af53bd5567e013d"
            ]
        ]
    },
    {
        "id": "e8497f8734538926",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "name": "New switch",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1890,
        "y": 4880,
        "wires": [
            [
                "6b6419373506ac71",
                "680792bb14df321d"
            ]
        ]
    },
    {
        "id": "a3d72fef328832a0",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Buffer Checks out",
        "mode": "link",
        "links": [
            "8478259032868211"
        ],
        "x": 2705,
        "y": 3520,
        "wires": []
    },
    {
        "id": "1bd2b20c4f16ff70",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 2\";\nmsg.bufferTopic = \"Par02\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3480,
        "wires": [
            [
                "dedf3379dd0b2fd7",
                "2b368866553fbfc2"
            ]
        ],
        "l": false
    },
    {
        "id": "b9182b988e3bae30",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 3\";\nmsg.bufferTopic = \"Par03\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3560,
        "wires": [
            [
                "d0be37559d39b540",
                "2fb366c82b2a896f"
            ]
        ],
        "l": false
    },
    {
        "id": "52a49eb7c9602eee",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 4\";\nmsg.bufferTopic = \"Par04\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3640,
        "wires": [
            [
                "77d33d3572c1de80",
                "49a07563c97c6aaf"
            ]
        ],
        "l": false
    },
    {
        "id": "a41c8551aae893fb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 5\";\nmsg.bufferTopic = \"Par05\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3720,
        "wires": [
            [
                "bff081530868b062",
                "453f077457420bfc"
            ]
        ],
        "l": false
    },
    {
        "id": "d4eb7c4119fd72d2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 6\";\nmsg.bufferTopic = \"Par06\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3800,
        "wires": [
            [
                "4ceafcf8ed277d73",
                "8ea0771e99cc208a"
            ]
        ],
        "l": false
    },
    {
        "id": "058e802695751c9a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 7\";\nmsg.bufferTopic = \"Par07\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3880,
        "wires": [
            [
                "679cc1aad46c4f98",
                "064f0c66b28a5244"
            ]
        ],
        "l": false
    },
    {
        "id": "49795f709c828c99",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 8\";\nmsg.bufferTopic = \"Par08\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 3960,
        "wires": [
            [
                "f102b06bf1fbf17a",
                "abbb689dc80e17a9"
            ]
        ],
        "l": false
    },
    {
        "id": "b80542d63469f2c6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 9\";\nmsg.bufferTopic = \"Par09\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4040,
        "wires": [
            [
                "e922ce31cb6e284d",
                "1e91e15671951300"
            ]
        ],
        "l": false
    },
    {
        "id": "38b6d67c867c539c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 10\";\nmsg.bufferTopic = \"Par10\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4120,
        "wires": [
            [
                "7d988f65e0c3b1e8",
                "76e22e5711df7591"
            ]
        ],
        "l": false
    },
    {
        "id": "d16c761985a57a84",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 11\";\nmsg.bufferTopic = \"Par11\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4220,
        "wires": [
            [
                "f3ce9fce03c4b859",
                "1067a1cffe149972"
            ]
        ],
        "l": false
    },
    {
        "id": "a37c187c76cbbf79",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 12\";\nmsg.bufferTopic = \"Par12\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4300,
        "wires": [
            [
                "29bab3be94c53198",
                "c46c88fa04860913"
            ]
        ],
        "l": false
    },
    {
        "id": "5db83138e42c29c8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 13\";\nmsg.bufferTopic = \"Par13\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4380,
        "wires": [
            [
                "1b64bae960ee8241",
                "30d21eabfa6cd4a3"
            ]
        ],
        "l": false
    },
    {
        "id": "968cea58cfded069",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 14\";\nmsg.bufferTopic = \"Par14\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4460,
        "wires": [
            [
                "f7d29a802f99aa75",
                "65bc6d116c496fd1"
            ]
        ],
        "l": false
    },
    {
        "id": "51527e279977768a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 15\";\nmsg.bufferTopic = \"Par15\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4540,
        "wires": [
            [
                "113b8a97dc2ebfe2",
                "4972ab53374d3131"
            ]
        ],
        "l": false
    },
    {
        "id": "f94a1141b8bfed36",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 16\";\nmsg.bufferTopic = \"Par16\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4620,
        "wires": [
            [
                "9e62c5335504b54d",
                "b93467acd0a1cf48"
            ]
        ],
        "l": false
    },
    {
        "id": "b6fb0b784e7fc29b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 17\";\nmsg.bufferTopic = \"Par17\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4700,
        "wires": [
            [
                "47d72275bcaef4a3",
                "90028efffada3907"
            ]
        ],
        "l": false
    },
    {
        "id": "5c701d2c0eda0332",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 18\";\nmsg.bufferTopic = \"Par18\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4780,
        "wires": [
            [
                "9828ece9c6f400ec",
                "4788e2063195b4c4"
            ]
        ],
        "l": false
    },
    {
        "id": "8abcfc19b1414e84",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 19\";\nmsg.bufferTopic = \"Par19\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4860,
        "wires": [
            [
                "ea5512312aa5c5d2",
                "44b57d7ad504d56e"
            ]
        ],
        "l": false
    },
    {
        "id": "e63c9494c350d701",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set loaded line",
        "func": "let keyDescription = \"Parameter 20\";\nmsg.bufferTopic = \"Par20\";\nmsg.functionInfo = [\n    {\n        \"topic\": \"name\",\n        \"label\": keyDescription + \": Name\"\n    },\n    {\n        \"topic\": \"value\",\n        \"label\": keyDescription\n    },\n    {\n        \"topic\": \"upperTol\",\n    },\n    {\n        \"topic\": \"lowerTol\",\n    },\n    {\n        \"topic\": \"instructions\",\n        \"label\": keyDescription + \": instructions\"\n\n    },\n    {\n        \"topic\": \"ifTestFailStop\",\n    }\n]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 4940,
        "wires": [
            [
                "735c66933c9aca32",
                "d2a85dda75d74e2b"
            ]
        ],
        "l": false
    },
    {
        "id": "d21a1dd37cf1ca43",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3500,
        "wires": [
            [
                "6fa763cbc16682d6"
            ]
        ],
        "l": false
    },
    {
        "id": "a57e137cfe4d5ef0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3500,
        "wires": [
            [
                "bfcd526bd10c3c0a"
            ]
        ]
    },
    {
        "id": "5f523914fc5a8b43",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3580,
        "wires": [
            [
                "4a34b7cc64704694"
            ]
        ],
        "l": false
    },
    {
        "id": "3403d7009304d8b6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3580,
        "wires": [
            [
                "0d5c4644ba59aa96"
            ]
        ]
    },
    {
        "id": "56e24c769aae2ea1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3660,
        "wires": [
            [
                "c555618d81357532"
            ]
        ],
        "l": false
    },
    {
        "id": "9a19601e22f8a91a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3660,
        "wires": [
            [
                "05590b9c4df8087b"
            ]
        ]
    },
    {
        "id": "d716a2401c33b9df",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3740,
        "wires": [
            [
                "cd86035bab7ce4d5"
            ]
        ],
        "l": false
    },
    {
        "id": "18122820daae9dda",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3740,
        "wires": [
            [
                "fe0c0bb086b61b9a"
            ]
        ]
    },
    {
        "id": "8daa95cc5dc8fdf9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3820,
        "wires": [
            [
                "a4d53386df4484aa"
            ]
        ],
        "l": false
    },
    {
        "id": "ee69285e792de5e4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3820,
        "wires": [
            [
                "3954313e61866e90"
            ]
        ]
    },
    {
        "id": "fb84374f8e7262b8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3900,
        "wires": [
            [
                "69b0d047139f3665"
            ]
        ],
        "l": false
    },
    {
        "id": "bd9e442bc08f8733",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3900,
        "wires": [
            [
                "8395bd2c32e139de"
            ]
        ]
    },
    {
        "id": "37f77fbf56d5671c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 3980,
        "wires": [
            [
                "3fad9d805578e8c9"
            ]
        ],
        "l": false
    },
    {
        "id": "726b821ed7bb688a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 3980,
        "wires": [
            [
                "c5517210264641f2"
            ]
        ]
    },
    {
        "id": "ba0a12a7a8ee5594",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4060,
        "wires": [
            [
                "3c1bfa1369ba3e97"
            ]
        ],
        "l": false
    },
    {
        "id": "988698e21e09a429",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4060,
        "wires": [
            [
                "21fe2044e777b6a5"
            ]
        ]
    },
    {
        "id": "ba796631157cdffb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4140,
        "wires": [
            [
                "c3578795be16cb51"
            ]
        ],
        "l": false
    },
    {
        "id": "4fd67a039becc229",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4140,
        "wires": [
            [
                "ae5f5d7aaf72b0ee"
            ]
        ]
    },
    {
        "id": "8fb51d43cf0f2de1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4960,
        "wires": [
            [
                "c47705e96af2adea"
            ]
        ],
        "l": false
    },
    {
        "id": "2fddae3b55ea1a51",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4960,
        "wires": [
            [
                "3c7386a9b7c00130"
            ]
        ]
    },
    {
        "id": "04e823e7991ad1f0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4240,
        "wires": [
            [
                "37387762632302d1"
            ]
        ],
        "l": false
    },
    {
        "id": "0e60fd369b425892",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4240,
        "wires": [
            [
                "12d4113254a9f866"
            ]
        ]
    },
    {
        "id": "0d30e08a3c71a69c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4320,
        "wires": [
            [
                "e681f0b2d7042713"
            ]
        ],
        "l": false
    },
    {
        "id": "ac54c1533b895fab",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4320,
        "wires": [
            [
                "e4de75feda6faa1f"
            ]
        ]
    },
    {
        "id": "d63d5d15a43dce21",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4400,
        "wires": [
            [
                "ef3f203e5b11b0be"
            ]
        ],
        "l": false
    },
    {
        "id": "5337d646c8606671",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4400,
        "wires": [
            [
                "e533cae113e5d01a"
            ]
        ]
    },
    {
        "id": "66eedf0330f1e2b4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4480,
        "wires": [
            [
                "ca91e93978aa3473"
            ]
        ],
        "l": false
    },
    {
        "id": "c9919a543beef241",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4480,
        "wires": [
            [
                "e92021330ae86492"
            ]
        ]
    },
    {
        "id": "7374d330d1a660fe",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4560,
        "wires": [
            [
                "d0522be8b0fcb1bf"
            ]
        ],
        "l": false
    },
    {
        "id": "0dbd62fa1b254f4a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4560,
        "wires": [
            [
                "1ca328572d4848cf"
            ]
        ]
    },
    {
        "id": "4aa094193be14ea4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4640,
        "wires": [
            [
                "5631d9a0d7ca37c9"
            ]
        ],
        "l": false
    },
    {
        "id": "b10b20275c210c58",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4640,
        "wires": [
            [
                "caa5654acbed1f5a"
            ]
        ]
    },
    {
        "id": "3bce5408476df26f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4720,
        "wires": [
            [
                "ab7b4310fb2f4bf3"
            ]
        ],
        "l": false
    },
    {
        "id": "4cb8f14f4faa8685",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4720,
        "wires": [
            [
                "4d2c0af856682af3"
            ]
        ]
    },
    {
        "id": "4af53bd5567e013d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4800,
        "wires": [
            [
                "fb11617e22df66b0"
            ]
        ],
        "l": false
    },
    {
        "id": "074a6725dc5f1046",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4800,
        "wires": [
            [
                "b5b2df01b2e46b7d"
            ]
        ]
    },
    {
        "id": "680792bb14df321d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo;\nif (msg.hasOwnProperty('functionInfo')) {\n    functionInfo = msg.functionInfo[5]\n    msg.topic = functionInfo.topic;\n}\n\nif (msg.lineFlag == 'JSONdata' || msg.lineFlag == 'clear') {// Catching the scenario where data is loaded \n    msg.payload = msg.payload.ifTestFailStop\n}\nif (msg.payload) {\n    msg.label = \"STOP on fail\"\n} else {\n    msg.label = \"CONTINUE on fail\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1785,
        "y": 4880,
        "wires": [
            [
                "e8497f8734538926"
            ]
        ],
        "l": false
    },
    {
        "id": "fa97508d829c58d2",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Instructions",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1660,
        "y": 4880,
        "wires": [
            [
                "cb0acfa71b39426b"
            ]
        ]
    },
    {
        "id": "dedf3379dd0b2fd7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3500,
        "wires": [
            [
                "2dceb9df1f5430a1"
            ]
        ],
        "l": false
    },
    {
        "id": "23684264e21a2ce8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Tester 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 3340,
        "wires": []
    },
    {
        "id": "d0be37559d39b540",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3580,
        "wires": [
            [
                "f4d80d0c2df73ce1"
            ]
        ],
        "l": false
    },
    {
        "id": "77d33d3572c1de80",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3660,
        "wires": [
            [
                "e32588c8e01b5ac6"
            ]
        ],
        "l": false
    },
    {
        "id": "bff081530868b062",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3740,
        "wires": [
            [
                "758a730476a66559"
            ]
        ],
        "l": false
    },
    {
        "id": "4ceafcf8ed277d73",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3820,
        "wires": [
            [
                "4cc0faf7e0d72470"
            ]
        ],
        "l": false
    },
    {
        "id": "679cc1aad46c4f98",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3900,
        "wires": [
            [
                "48bed8c6352534dd"
            ]
        ],
        "l": false
    },
    {
        "id": "f102b06bf1fbf17a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 3980,
        "wires": [
            [
                "ac1abd8d4518c577"
            ]
        ],
        "l": false
    },
    {
        "id": "e922ce31cb6e284d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4060,
        "wires": [
            [
                "bdc55d16e194a3ce"
            ]
        ],
        "l": false
    },
    {
        "id": "7d988f65e0c3b1e8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4140,
        "wires": [
            [
                "b060ad74d7d6eece"
            ]
        ],
        "l": false
    },
    {
        "id": "f3ce9fce03c4b859",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4240,
        "wires": [
            [
                "420115d0d907e368"
            ]
        ],
        "l": false
    },
    {
        "id": "29bab3be94c53198",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4320,
        "wires": [
            [
                "48b2d32ea968a64f"
            ]
        ],
        "l": false
    },
    {
        "id": "1b64bae960ee8241",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4400,
        "wires": [
            [
                "a125f57811a79350"
            ]
        ],
        "l": false
    },
    {
        "id": "f7d29a802f99aa75",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4480,
        "wires": [
            [
                "d826524602f4925a"
            ]
        ],
        "l": false
    },
    {
        "id": "113b8a97dc2ebfe2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4560,
        "wires": [
            [
                "6ffff5c69ea38655"
            ]
        ],
        "l": false
    },
    {
        "id": "9e62c5335504b54d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4640,
        "wires": [
            [
                "f6ace0fa9ea30479"
            ]
        ],
        "l": false
    },
    {
        "id": "47d72275bcaef4a3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4720,
        "wires": [
            [
                "f26e4cea42a25fc6"
            ]
        ],
        "l": false
    },
    {
        "id": "9828ece9c6f400ec",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4800,
        "wires": [
            [
                "5228397ff558cf33"
            ]
        ],
        "l": false
    },
    {
        "id": "ea5512312aa5c5d2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4880,
        "wires": [
            [
                "c38de29b7b6a9365"
            ]
        ],
        "l": false
    },
    {
        "id": "735c66933c9aca32",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[0];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\n//dataKey is definied by the lines leading function \nmsg.payload = msg.payload.name //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 4960,
        "wires": [
            [
                "463418e14e9fb78c"
            ]
        ],
        "l": false
    },
    {
        "id": "26eb4bd42c0d1e97",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3500,
        "wires": [
            [
                "a57e137cfe4d5ef0",
                "b896059a61ae41f9"
            ]
        ],
        "l": false
    },
    {
        "id": "4636512e2ae0daf5",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3500,
        "wires": [
            [
                "ef4ff23f307da767"
            ]
        ]
    },
    {
        "id": "237e1ed707b83d28",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3580,
        "wires": [
            [
                "3403d7009304d8b6"
            ]
        ],
        "l": false
    },
    {
        "id": "26e6ad64e68c4f08",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3580,
        "wires": [
            [
                "cb228e03f86eeea3"
            ]
        ]
    },
    {
        "id": "e74b66c224a5fd20",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3660,
        "wires": [
            [
                "9a19601e22f8a91a"
            ]
        ],
        "l": false
    },
    {
        "id": "058924f0cb57319a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3660,
        "wires": [
            [
                "d39f4b087fc68096"
            ]
        ]
    },
    {
        "id": "71bd2bcc4faaa3be",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3740,
        "wires": [
            [
                "18122820daae9dda"
            ]
        ],
        "l": false
    },
    {
        "id": "49f87d03a2457190",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 18,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3740,
        "wires": [
            [
                "375757f94e2f1602"
            ]
        ]
    },
    {
        "id": "21d08d073d49cbaf",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3820,
        "wires": [
            [
                "ee69285e792de5e4"
            ]
        ],
        "l": false
    },
    {
        "id": "2b50e15eb0cacc4f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 21,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3820,
        "wires": [
            [
                "f52db66766f57b94"
            ]
        ]
    },
    {
        "id": "4f24ce8df77af52a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3900,
        "wires": [
            [
                "bd9e442bc08f8733"
            ]
        ],
        "l": false
    },
    {
        "id": "7961e71038d2f2fc",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 24,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3900,
        "wires": [
            [
                "dd4758100700b1ac"
            ]
        ]
    },
    {
        "id": "0a6e261f3cef505e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 3980,
        "wires": [
            [
                "726b821ed7bb688a"
            ]
        ],
        "l": false
    },
    {
        "id": "dc27b4944f8b482d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 27,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 3980,
        "wires": [
            [
                "48fe888fcdf1329f"
            ]
        ]
    },
    {
        "id": "d821396f497573e9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4060,
        "wires": [
            [
                "988698e21e09a429"
            ]
        ],
        "l": false
    },
    {
        "id": "ceef5b0273cc2849",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 30,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4060,
        "wires": [
            [
                "a9a3042fcae09fba"
            ]
        ]
    },
    {
        "id": "db394129948e146a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4140,
        "wires": [
            [
                "4fd67a039becc229"
            ]
        ],
        "l": false
    },
    {
        "id": "05a9fee69e5f4604",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 33,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4140,
        "wires": [
            [
                "884d87089cc24130"
            ]
        ]
    },
    {
        "id": "af50a02d7e7d9bd3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4960,
        "wires": [
            [
                "2fddae3b55ea1a51"
            ]
        ],
        "l": false
    },
    {
        "id": "5156309cb997b6d8",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 73,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4960,
        "wires": [
            [
                "77991745f0fd630b"
            ]
        ]
    },
    {
        "id": "bea17800f02ffd37",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4240,
        "wires": [
            [
                "0e60fd369b425892"
            ]
        ],
        "l": false
    },
    {
        "id": "49d4588252b589af",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4240,
        "wires": [
            [
                "891a5905f2f9df38"
            ]
        ]
    },
    {
        "id": "3b384e6f8b43f469",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4320,
        "wires": [
            [
                "ac54c1533b895fab"
            ]
        ],
        "l": false
    },
    {
        "id": "4757e3168952c20f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 20,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4320,
        "wires": [
            [
                "13c63a7d873423f4"
            ]
        ]
    },
    {
        "id": "04478a945e83156d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4400,
        "wires": [
            [
                "5337d646c8606671"
            ]
        ],
        "l": false
    },
    {
        "id": "7e60cad205850581",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 29,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4400,
        "wires": [
            [
                "29e31006fc913154"
            ]
        ]
    },
    {
        "id": "89200de5fa5565e6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4480,
        "wires": [
            [
                "c9919a543beef241"
            ]
        ],
        "l": false
    },
    {
        "id": "4c587a6eee7fff66",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 38,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4480,
        "wires": [
            [
                "b0c7e64dadfe65a3"
            ]
        ]
    },
    {
        "id": "c716c644ac7aa14b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4560,
        "wires": [
            [
                "0dbd62fa1b254f4a"
            ]
        ],
        "l": false
    },
    {
        "id": "88199e16a823e685",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 47,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4560,
        "wires": [
            [
                "69bc625d5a18fce1"
            ]
        ]
    },
    {
        "id": "503bd9187bc91bc4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4640,
        "wires": [
            [
                "b10b20275c210c58"
            ]
        ],
        "l": false
    },
    {
        "id": "4ad13127e9539199",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 56,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4640,
        "wires": [
            [
                "20159ff589259894"
            ]
        ]
    },
    {
        "id": "5c0aa5e2088f7b71",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4720,
        "wires": [
            [
                "4cb8f14f4faa8685"
            ]
        ],
        "l": false
    },
    {
        "id": "f2e811d0a4e45908",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 64,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4720,
        "wires": [
            [
                "9ac814eebf03dae8"
            ]
        ]
    },
    {
        "id": "dfbf739050de915d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4800,
        "wires": [
            [
                "074a6725dc5f1046"
            ]
        ],
        "l": false
    },
    {
        "id": "8060ca06608df335",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 67,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4800,
        "wires": [
            [
                "7e3b57e1150913dc"
            ]
        ]
    },
    {
        "id": "a762c4408b7a19e1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[4];\nmsg.topic = functionInfo.topic;\nmsg.label = functionInfo.label;\n\nmsg.payload = msg.payload.instructions //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1555,
        "y": 4880,
        "wires": [
            [
                "fa97508d829c58d2"
            ]
        ],
        "l": false
    },
    {
        "id": "193d2ce094310c1d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Lower Tolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 70,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1420,
        "y": 4880,
        "wires": [
            [
                "bef683eb8e1a8554"
            ]
        ]
    },
    {
        "id": "2dceb9df1f5430a1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3500,
        "wires": [
            [
                "0d59d33f010d3a30"
            ]
        ]
    },
    {
        "id": "b896059a61ae41f9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Tester 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 3340,
        "wires": []
    },
    {
        "id": "dfe46e7ac11b8fed",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3500,
        "wires": [
            [
                "401afaaa0bf6e1e1"
            ]
        ],
        "l": false
    },
    {
        "id": "f4d80d0c2df73ce1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3580,
        "wires": [
            [
                "f3156657e4c9ddcc"
            ]
        ]
    },
    {
        "id": "2f99e450661f1084",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3580,
        "wires": [
            [
                "4c6c0399e5ccd27c"
            ]
        ],
        "l": false
    },
    {
        "id": "e32588c8e01b5ac6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3660,
        "wires": [
            [
                "f1695b4de3d85eef"
            ]
        ]
    },
    {
        "id": "c8dacf3ae305192f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3660,
        "wires": [
            [
                "c8d0c5b8581c386e"
            ]
        ],
        "l": false
    },
    {
        "id": "758a730476a66559",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3740,
        "wires": [
            [
                "42ca36a7cc2538cb"
            ]
        ]
    },
    {
        "id": "74eb5893a9cc883c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3740,
        "wires": [
            [
                "7758701a4e90be3c"
            ]
        ],
        "l": false
    },
    {
        "id": "4cc0faf7e0d72470",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3820,
        "wires": [
            [
                "1982ec68587d445b"
            ]
        ]
    },
    {
        "id": "506ce393ff85931d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3820,
        "wires": [
            [
                "20eb990c2d1506b4"
            ]
        ],
        "l": false
    },
    {
        "id": "48bed8c6352534dd",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3900,
        "wires": [
            [
                "d3804ff033d855b1"
            ]
        ]
    },
    {
        "id": "3b71e89a564fc11d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3900,
        "wires": [
            [
                "8f0d750a2361681e"
            ]
        ],
        "l": false
    },
    {
        "id": "ac1abd8d4518c577",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 3980,
        "wires": [
            [
                "8bdac195aef949d6"
            ]
        ]
    },
    {
        "id": "e173c928c9f5f103",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 3980,
        "wires": [
            [
                "d7cd9629c2f36c4b"
            ]
        ],
        "l": false
    },
    {
        "id": "bdc55d16e194a3ce",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4060,
        "wires": [
            [
                "077c531ab6fbe77a"
            ]
        ]
    },
    {
        "id": "abcf63f845d01d49",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4060,
        "wires": [
            [
                "b8c455918058a0aa"
            ]
        ],
        "l": false
    },
    {
        "id": "b060ad74d7d6eece",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4140,
        "wires": [
            [
                "3a141e74c3c6d123"
            ]
        ]
    },
    {
        "id": "a06611720f5fc36f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4140,
        "wires": [
            [
                "c9f7bbb7b4216394"
            ]
        ],
        "l": false
    },
    {
        "id": "420115d0d907e368",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4240,
        "wires": [
            [
                "cc4a4c77746f63b8"
            ]
        ]
    },
    {
        "id": "d8d637616b0e90db",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4240,
        "wires": [
            [
                "5418c7f2719d58ce"
            ]
        ],
        "l": false
    },
    {
        "id": "48b2d32ea968a64f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4320,
        "wires": [
            [
                "56a348c9efaa3738"
            ]
        ]
    },
    {
        "id": "ddb0199b0edcdaa8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4320,
        "wires": [
            [
                "a3c8912a05d45e89"
            ]
        ],
        "l": false
    },
    {
        "id": "a125f57811a79350",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4400,
        "wires": [
            [
                "d0aa355d4bc4c311"
            ]
        ]
    },
    {
        "id": "cb3df3c12aa65082",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4400,
        "wires": [
            [
                "fca2589432586925"
            ]
        ],
        "l": false
    },
    {
        "id": "d826524602f4925a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4480,
        "wires": [
            [
                "75b19dc895a29811"
            ]
        ]
    },
    {
        "id": "f48af7f3f8130943",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4480,
        "wires": [
            [
                "bec564c8c01119b5"
            ]
        ],
        "l": false
    },
    {
        "id": "6ffff5c69ea38655",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4560,
        "wires": [
            [
                "4e8d2c95f15ed2fe"
            ]
        ]
    },
    {
        "id": "ad64bfd9d658988b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4560,
        "wires": [
            [
                "9f879d3c56aacd98"
            ]
        ],
        "l": false
    },
    {
        "id": "f6ace0fa9ea30479",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4640,
        "wires": [
            [
                "f83dae12357a9c3e"
            ]
        ]
    },
    {
        "id": "dfc83746a5dbb86b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4640,
        "wires": [
            [
                "a6b38b93f8f191e8"
            ]
        ],
        "l": false
    },
    {
        "id": "f26e4cea42a25fc6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4720,
        "wires": [
            [
                "68474e1558414e1a"
            ]
        ]
    },
    {
        "id": "fa33d6c7e7ac9586",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4720,
        "wires": [
            [
                "84e491a69dcca0ba"
            ]
        ],
        "l": false
    },
    {
        "id": "5228397ff558cf33",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4800,
        "wires": [
            [
                "7875e396abe4056d"
            ]
        ]
    },
    {
        "id": "e266ddcc73262225",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4800,
        "wires": [
            [
                "337efb9b94af5d81"
            ]
        ],
        "l": false
    },
    {
        "id": "c38de29b7b6a9365",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4880,
        "wires": [
            [
                "e2ee9b9da9a2b4d9"
            ]
        ]
    },
    {
        "id": "c071d4f292ba4e1a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4880,
        "wires": [
            [
                "f6cfc226b54857d0"
            ]
        ],
        "l": false
    },
    {
        "id": "463418e14e9fb78c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Par Name",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 710,
        "y": 4960,
        "wires": [
            [
                "dbe70caf44d262ff"
            ]
        ]
    },
    {
        "id": "2b39474fa498318e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[1];\nmsg.topic = functionInfo.topic\nmsg.label = functionInfo.label\nmsg.payload = msg.payload.value //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 845,
        "y": 4960,
        "wires": [
            [
                "5f91922e537bded4"
            ]
        ],
        "l": false
    },
    {
        "id": "7d6b94450f124f9a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3500,
        "wires": [
            [
                "4636512e2ae0daf5"
            ]
        ],
        "l": false
    },
    {
        "id": "af0f153f0adf2bcc",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3500,
        "wires": [
            [
                "a43c92765f091e28"
            ]
        ]
    },
    {
        "id": "3cc3958eabf64ac6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3580,
        "wires": [
            [
                "26e6ad64e68c4f08"
            ]
        ],
        "l": false
    },
    {
        "id": "2f66c6f648dd5ba4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3580,
        "wires": [
            [
                "54797a9f5f9c372d"
            ]
        ]
    },
    {
        "id": "3a550648b569bb29",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3660,
        "wires": [
            [
                "058924f0cb57319a"
            ]
        ],
        "l": false
    },
    {
        "id": "3c63588459aa78ff",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3660,
        "wires": [
            [
                "90fea8d830386591"
            ]
        ]
    },
    {
        "id": "20d4cddc65042659",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3740,
        "wires": [
            [
                "49f87d03a2457190"
            ]
        ],
        "l": false
    },
    {
        "id": "a4089091b02dafc6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3740,
        "wires": [
            [
                "5641eee939d5bc8b"
            ]
        ]
    },
    {
        "id": "ce1d1e8bd71a9587",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3820,
        "wires": [
            [
                "2b50e15eb0cacc4f"
            ]
        ],
        "l": false
    },
    {
        "id": "91a45bdeeb8f3e87",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 20,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3820,
        "wires": [
            [
                "c262490e5b0497a4"
            ]
        ]
    },
    {
        "id": "473ea76fe38f224f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3900,
        "wires": [
            [
                "7961e71038d2f2fc"
            ]
        ],
        "l": false
    },
    {
        "id": "9f9b7ee54b2dd17e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 23,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3900,
        "wires": [
            [
                "9d73ae0012c16104"
            ]
        ]
    },
    {
        "id": "e417e3a6f989b9bd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 3980,
        "wires": [
            [
                "dc27b4944f8b482d"
            ]
        ],
        "l": false
    },
    {
        "id": "4b5d8c28d8e1e74f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 26,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 3980,
        "wires": [
            [
                "673cbabf808f1b35"
            ]
        ]
    },
    {
        "id": "b367899e4eb36ab9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4060,
        "wires": [
            [
                "ceef5b0273cc2849"
            ]
        ],
        "l": false
    },
    {
        "id": "3d761bf5f4773bff",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 29,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4060,
        "wires": [
            [
                "b27afb8948e6f680"
            ]
        ]
    },
    {
        "id": "b08dda66c111e46f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4140,
        "wires": [
            [
                "05a9fee69e5f4604"
            ]
        ],
        "l": false
    },
    {
        "id": "e3e964e848d0280d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 32,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4140,
        "wires": [
            [
                "5315eb48754db3cc"
            ]
        ]
    },
    {
        "id": "e0bd84f2873404a5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4960,
        "wires": [
            [
                "5156309cb997b6d8"
            ]
        ],
        "l": false
    },
    {
        "id": "c7224619d3d5b545",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 72,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4960,
        "wires": [
            [
                "c0de0f63d7dd74e9"
            ]
        ]
    },
    {
        "id": "9a42bccb5274321d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4240,
        "wires": [
            [
                "49d4588252b589af"
            ]
        ],
        "l": false
    },
    {
        "id": "f43cb774859059a9",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4240,
        "wires": [
            [
                "20399c5ac562b160"
            ]
        ]
    },
    {
        "id": "1446b4287a081b8f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4320,
        "wires": [
            [
                "4757e3168952c20f"
            ]
        ],
        "l": false
    },
    {
        "id": "b43d8d84380300d2",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4320,
        "wires": [
            [
                "52543548dff5e20c"
            ]
        ]
    },
    {
        "id": "d6f5a79d6c76fd96",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4400,
        "wires": [
            [
                "7e60cad205850581"
            ]
        ],
        "l": false
    },
    {
        "id": "035c554a17bebc58",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 26,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4400,
        "wires": [
            [
                "c8a83a850d99d41c"
            ]
        ]
    },
    {
        "id": "efc4c9bf0c95d883",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4480,
        "wires": [
            [
                "4c587a6eee7fff66"
            ]
        ],
        "l": false
    },
    {
        "id": "585810d696f67394",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 35,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4480,
        "wires": [
            [
                "1edb21adc59a3766"
            ]
        ]
    },
    {
        "id": "2134aee9dfe65935",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4560,
        "wires": [
            [
                "88199e16a823e685"
            ]
        ],
        "l": false
    },
    {
        "id": "ec80db9e35359466",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 44,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4560,
        "wires": [
            [
                "9395149f4bb00111"
            ]
        ]
    },
    {
        "id": "ac1413f5b45bda66",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4640,
        "wires": [
            [
                "4ad13127e9539199"
            ]
        ],
        "l": false
    },
    {
        "id": "a475f304d65cb2e4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 53,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4640,
        "wires": [
            [
                "a3b3788d36729837"
            ]
        ]
    },
    {
        "id": "9b0dc40c965e6b1c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4720,
        "wires": [
            [
                "f2e811d0a4e45908"
            ]
        ],
        "l": false
    },
    {
        "id": "db56eee8cc6953a3",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 62,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4720,
        "wires": [
            [
                "baa513a71f193d7f"
            ]
        ]
    },
    {
        "id": "ea1a416ae30b3b54",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4800,
        "wires": [
            [
                "8060ca06608df335"
            ]
        ],
        "l": false
    },
    {
        "id": "9301833d3e79f785",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 66,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4800,
        "wires": [
            [
                "af421235081fae99"
            ]
        ]
    },
    {
        "id": "de0474c623ccacb3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[3];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.lowerTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1305,
        "y": 4880,
        "wires": [
            [
                "193d2ce094310c1d"
            ]
        ],
        "l": false
    },
    {
        "id": "db3284c90b1dab8f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "UpperTolerance",
        "label": "",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 69,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1160,
        "y": 4880,
        "wires": [
            [
                "04fee0e4532ee05a"
            ]
        ]
    },
    {
        "id": "63b28c2fee9da5d0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3500,
        "wires": [
            [
                "af0f153f0adf2bcc"
            ]
        ],
        "l": false
    },
    {
        "id": "401afaaa0bf6e1e1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3500,
        "wires": [
            [
                "0e807def6bba805b"
            ]
        ]
    },
    {
        "id": "422ff28aaeaf165e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3580,
        "wires": [
            [
                "2f66c6f648dd5ba4"
            ]
        ],
        "l": false
    },
    {
        "id": "4c6c0399e5ccd27c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3580,
        "wires": [
            [
                "7f8dc21566ce2f99"
            ]
        ]
    },
    {
        "id": "b671b331e4aa0af4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3660,
        "wires": [
            [
                "3c63588459aa78ff"
            ]
        ],
        "l": false
    },
    {
        "id": "c8d0c5b8581c386e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3660,
        "wires": [
            [
                "5e157dc86e9ac6c4"
            ]
        ]
    },
    {
        "id": "51ba32848bb1ca6c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3740,
        "wires": [
            [
                "a4089091b02dafc6"
            ]
        ],
        "l": false
    },
    {
        "id": "7758701a4e90be3c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 16,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3740,
        "wires": [
            [
                "e7d5e2844ed867bc"
            ]
        ]
    },
    {
        "id": "8c09cf9edf3b2c5a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3820,
        "wires": [
            [
                "91a45bdeeb8f3e87"
            ]
        ],
        "l": false
    },
    {
        "id": "20eb990c2d1506b4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 19,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3820,
        "wires": [
            [
                "4b0a7f629b40b92b"
            ]
        ]
    },
    {
        "id": "64b1e32fbe75fa37",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3900,
        "wires": [
            [
                "9f9b7ee54b2dd17e"
            ]
        ],
        "l": false
    },
    {
        "id": "8f0d750a2361681e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 22,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3900,
        "wires": [
            [
                "9ab1736a0228ce43"
            ]
        ]
    },
    {
        "id": "ba5af58ce8fd00e1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 3980,
        "wires": [
            [
                "4b5d8c28d8e1e74f"
            ]
        ],
        "l": false
    },
    {
        "id": "d7cd9629c2f36c4b",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 25,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 3980,
        "wires": [
            [
                "c0118340b05c0bb2"
            ]
        ]
    },
    {
        "id": "a5f8a8a6e99de3eb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4060,
        "wires": [
            [
                "3d761bf5f4773bff"
            ]
        ],
        "l": false
    },
    {
        "id": "b8c455918058a0aa",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 28,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4060,
        "wires": [
            [
                "e433a030ab57307f"
            ]
        ]
    },
    {
        "id": "1495ce7010001f91",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4140,
        "wires": [
            [
                "e3e964e848d0280d"
            ]
        ],
        "l": false
    },
    {
        "id": "c9f7bbb7b4216394",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 31,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4140,
        "wires": [
            [
                "caad7d818247c99d"
            ]
        ]
    },
    {
        "id": "de27117211cfa5e9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4240,
        "wires": [
            [
                "f43cb774859059a9"
            ]
        ],
        "l": false
    },
    {
        "id": "5418c7f2719d58ce",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4240,
        "wires": [
            [
                "04de294d215a376d"
            ]
        ]
    },
    {
        "id": "e7b5967037fc06ce",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4320,
        "wires": [
            [
                "b43d8d84380300d2"
            ]
        ],
        "l": false
    },
    {
        "id": "a3c8912a05d45e89",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 14,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4320,
        "wires": [
            [
                "839174725fb3481f"
            ]
        ]
    },
    {
        "id": "66b9776d66230f9f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4400,
        "wires": [
            [
                "035c554a17bebc58"
            ]
        ],
        "l": false
    },
    {
        "id": "fca2589432586925",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 23,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4400,
        "wires": [
            [
                "dae23a4e62aafd6a"
            ]
        ]
    },
    {
        "id": "a6ba38e20d7b9896",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4480,
        "wires": [
            [
                "585810d696f67394"
            ]
        ],
        "l": false
    },
    {
        "id": "bec564c8c01119b5",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 32,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4480,
        "wires": [
            [
                "864268dd14c59aa4"
            ]
        ]
    },
    {
        "id": "de30db7e7ea39dd9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4560,
        "wires": [
            [
                "ec80db9e35359466"
            ]
        ],
        "l": false
    },
    {
        "id": "9f879d3c56aacd98",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 41,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4560,
        "wires": [
            [
                "f9c7ebb37231966c"
            ]
        ]
    },
    {
        "id": "24b2ba8878db5b2e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4640,
        "wires": [
            [
                "a475f304d65cb2e4"
            ]
        ],
        "l": false
    },
    {
        "id": "a6b38b93f8f191e8",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 50,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4640,
        "wires": [
            [
                "46cdaacc9648ece5"
            ]
        ]
    },
    {
        "id": "b6e60bcd27494dce",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4720,
        "wires": [
            [
                "db56eee8cc6953a3"
            ]
        ],
        "l": false
    },
    {
        "id": "84e491a69dcca0ba",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 59,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4720,
        "wires": [
            [
                "03316f06346597c8"
            ]
        ]
    },
    {
        "id": "8cc242b8dc2681b8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4800,
        "wires": [
            [
                "9301833d3e79f785"
            ]
        ],
        "l": false
    },
    {
        "id": "337efb9b94af5d81",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 65,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4800,
        "wires": [
            [
                "290b352cc929a7b1"
            ]
        ]
    },
    {
        "id": "9a4341c7a93cd60f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4880,
        "wires": [
            [
                "db3284c90b1dab8f"
            ]
        ],
        "l": false
    },
    {
        "id": "f6cfc226b54857d0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 68,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4880,
        "wires": [
            [
                "dc70c78176d21bad"
            ]
        ]
    },
    {
        "id": "8136d1191d6076d4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set payload",
        "func": "//line info defined in the this line's leading function\nlet functionInfo = msg.functionInfo[2];\nmsg.topic = functionInfo.topic\n\nmsg.payload = msg.payload.upperTol //Sets payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 4960,
        "wires": [
            [
                "c7224619d3d5b545"
            ]
        ],
        "l": false
    },
    {
        "id": "5f91922e537bded4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "name": "Value",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 71,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 930,
        "y": 4960,
        "wires": [
            [
                "8933fa41c0d873ad"
            ]
        ]
    },
    {
        "id": "9f1f63f517922f5a",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "f24d9462b2c2f4ce",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 2350,
        "y": 3820,
        "wires": []
    },
    {
        "id": "e9ad03522d2468d0",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "f24d9462b2c2f4ce",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance (L)",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 2530,
        "y": 3820,
        "wires": []
    },
    {
        "id": "17d7796abd52fe12",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "f24d9462b2c2f4ce",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance (L)",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 2730,
        "y": 3820,
        "wires": []
    },
    {
        "id": "e0a02da217bb1c73",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "d53c3b4207d65609",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "Value Label",
        "label": "",
        "format": "Value",
        "layout": "row-center",
        "className": "",
        "x": 2350,
        "y": 3860,
        "wires": []
    },
    {
        "id": "5c74986620bfe67b",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "d53c3b4207d65609",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Upper Tolerance (L)",
        "label": "",
        "format": "Upper Tolerance",
        "layout": "row-right",
        "className": "",
        "x": 2530,
        "y": 3860,
        "wires": []
    },
    {
        "id": "43c0456195217570",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "group": "d53c3b4207d65609",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Lower Tolerance (L)",
        "label": "",
        "format": "Lower Tolerance",
        "layout": "row-center",
        "className": "",
        "x": 2730,
        "y": 3860,
        "wires": []
    },
    {
        "id": "b90804487b4aa253",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"name\": \"One\",     \"value\": 100,     \"upperTol\": 10,     \"lowerTol\": 8,     \"instructions\": \"words\",     \"ifTestFailStop\": true }",
        "payloadType": "json",
        "x": 3830,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb3f06114065c8c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 315",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 3300,
        "wires": []
    },
    {
        "id": "bb9f75da651b4614",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Parameters Main Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 3340,
        "wires": []
    },
    {
        "id": "9418c7ac7adffa0e",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "Active Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 105,
        "y": 4460,
        "wires": [
            [
                "95465849aff52344"
            ]
        ],
        "l": false
    },
    {
        "id": "95465849aff52344",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "function 25",
        "func": "let output = [],\n    current = {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"upperTol\": \"\",\n        \"lowerTol\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    },\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\n\n\nfor (let i = 0; i < 10; i ++) {\n    current = {\n        name: names[i],\n        value: (i + 1) * 100,\n        upperTol: (i + 1) * 10 + (i + 1),\n        lowerTol: (i + 1) * 10,\n        instructions: \"Words in Parameter \" + (i + 1),\n        ifTestFailStop: ((i % 2) == 0) ? false : true\n    }\n    msg.payload = current;\n    msg.topic = 'Par',\n    msg.topic += (i != 9) ? ('0' + (i + 1)) : i + 1\n    msg.lineFlag = 'JSONdata';\n    node.send(msg);\n}\n\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 165,
        "y": 4460,
        "wires": [
            [
                "9ce551dd9b798a01",
                "bab0609bea1707c5"
            ]
        ],
        "l": false
    },
    {
        "id": "9ce551dd9b798a01",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 316",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 4360,
        "wires": []
    },
    {
        "id": "202ca214ea3f89fd",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "5985a693ce172e40",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "save",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "save",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "save",
        "payload": "",
        "payloadType": "date",
        "x": 2250,
        "y": 3440,
        "wires": [
            [
                "8c047014126f4c26"
            ]
        ]
    },
    {
        "id": "6e399498c012289c",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "activeTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "8100084100",
        "payloadType": "str",
        "x": 190,
        "y": 2360,
        "wires": [
            [
                "3dab220221184841",
                "113479bbc86295a4",
                "a513364e1951fda6"
            ]
        ]
    },
    {
        "id": "0792e799b2db24b0",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "ActiveTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "lineFlag",
                "v": "JSONdata",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"File_Name\":\"ActiveTest\"}",
        "payloadType": "json",
        "x": 3370,
        "y": 3820,
        "wires": [
            [
                "d749b9f44a2a2ba1"
            ]
        ]
    },
    {
        "id": "5e41e8f1e690587f",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "debug 317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 2440,
        "wires": []
    },
    {
        "id": "e93add45de99a760",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "ActiveTest",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lineFlag",
                "v": "JSONdata",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"basic\":{\"GB\":{\"value\":100,\"upperTol\":11,\"lowerTol\":10,\"upperVal\":\"\",\"lowerVal\":\"\"},\"ACW\":{\"value\":200,\"upperTol\":22,\"lowerTol\":20,\"upperVal\":\"\",\"lowerVal\":\"\"},\"IR\":{\"value\":300,\"upperTol\":33,\"lowerTol\":30,\"upperVal\":\"\",\"lowerVal\":\"\"},\"EL\":{\"value\":400,\"upperTol\":44,\"lowerTol\":40,\"upperVal\":\"\",\"lowerVal\":\"\"}}}",
        "payloadType": "json",
        "x": 120,
        "y": 1700,
        "wires": [
            [
                "9fc4b59f185c006e"
            ]
        ]
    },
    {
        "id": "fe142404f5037996",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "LOOOOOK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4580,
        "y": 3820,
        "wires": []
    },
    {
        "id": "2418183db5b14a58",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 318",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 3460,
        "wires": []
    },
    {
        "id": "6b9af4a3d307cdca",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 319",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4580,
        "y": 3540,
        "wires": []
    },
    {
        "id": "e845ec4d61acf2d5",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ATEKA1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 2770,
        "y": 1500,
        "wires": [
            [
                "31e3351497920e04",
                "c383e6c87fdb7c8d"
            ],
            [
                "30f8b47daa429470",
                "0b01c8a19b3c169d"
            ],
            [
                "fa64b89314d98475",
                "582a7b49baa531f7"
            ],
            [
                "dad481905a20fdea",
                "b2ecd9b4b705fc34"
            ],
            [
                "6dd7449228ea05ec",
                "2b5d430bc8a6f4c6"
            ]
        ]
    },
    {
        "id": "2b5d430bc8a6f4c6",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "local",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3690,
        "y": 1660,
        "wires": []
    },
    {
        "id": "b2ecd9b4b705fc34",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "ATEKA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1600,
        "wires": []
    },
    {
        "id": "582a7b49baa531f7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "ATEKA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1540,
        "wires": []
    },
    {
        "id": "0b01c8a19b3c169d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "ATEKA2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c383e6c87fdb7c8d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "ATEKA1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1420,
        "wires": []
    },
    {
        "id": "be4a9fa1b209c98e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Buffer input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3790,
        "y": 1260,
        "wires": []
    },
    {
        "id": "184b09f65255818d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template HS Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// initialize context variables\nlet buffer = context.get('buffer') || {}; //The buffer that contains the whole incomming message\nlet ID = context.get('ID') || [];       // A unique identifier of the incomming message, which is indexed and spliced in unison with buffer\n//Indicator for whether the buffer is waiting for a message to return or not\nlet waiting = context.get('waiting');  \nif (waiting == undefined) {\n    waiting = false; //Set the waiting or the current instance to false\n    context.set('waiting', true); // Sets the next message that'll be recieved to wait\n}\n\n// Set paramarams\n    //Sets the trigger msg member name and what the value of it is \nlet msgTriggerName = 'lineFlag',\n    msgTriggerValue = 'sqlHandshake',\n    incommingUniqueIDmsgMember = 'machineID',\n    outgoingUniqueIDmsgMember = 'machineID'\n\n// Check for trigger\nif (msg[msgTriggerName] == msgTriggerValue) {\n    let index = ID.indexOf(msg.incommingUniqueIDmsgMember);\n    if (index != -1) { // Looking for the returned message in the context variables\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n\n    // Sets the next msg to go out (FIFO)\n    msg = {\n        ...buffer[0]\n    }\n    msg.outgoingUniqueIDmsgMember = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n    } else {\n        return msg;\n    }  \n} else {\n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 1160,
        "wires": [
            []
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "4af2dd4f5c5f8cf0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template HS Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// initialize context variables\nlet buffer = context.get('buffer') || []; //The buffer that contains the whole incomming message\nlet ID = context.get('ID') || [];       // A unique identifier of the incomming message, which is indexed and spliced in unison with buffer\n//Indicator for whether the buffer is waiting for a message to return or not\nlet waiting = context.get('waiting');  \nif (waiting == undefined) {\n    waiting = false; //Set the waiting or the current instance to false\n    context.set('waiting', true); // Sets the next message that'll be recieved to wait\n}\n\n// Set paramarams\n    //Sets the trigger msg member name and what the value of it is \nlet msgTriggerName = 'lineFlag',\n    msgTriggerValue = 'sqlHandshake',\n    incommingUniqueIDmsgMember = 'machineID',\n    outgoingUniqueIDmsgMember = 'machineID'\n\n// Check for trigger\nif (msg[msgTriggerName] == msgTriggerValue) {\n    let index = ID.indexOf(msg.incommingUniqueIDmsgMember);\n    if (index != -1) { // Looking for the returned message in the context variables\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n        return null;\n    }\n\n    //Make copy of incoming message\n    let msgCOPY = JSON.parse(JSON.stringify(msg));\n    // Sets the next msg to go out (FIFO)\n    msg = {\n        ...buffer[0]\n    }\n    msg.outgoingUniqueIDmsgMember = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        return [ ,msgCOPY]\n    } else {\n        return [msg, msgCOPY];\n    }  \n} else {\n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.incommingUniqueIDmsgMember);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return [msg, ];\n    }\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3790,
        "y": 1360,
        "wires": [
            [
                "4b8ce65db5980c6a",
                "ce5393c202cda92c"
            ],
            [
                "ad724f31606be360",
                "cede9a90dadb15e1"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "ad724f31606be360",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Return from PLC indicator buffer out",
        "mode": "link",
        "links": [
            "4bd08e17390a6e11"
        ],
        "x": 3955,
        "y": 1380,
        "wires": []
    },
    {
        "id": "ce5393c202cda92c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Top",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4070,
        "y": 1320,
        "wires": []
    },
    {
        "id": "cede9a90dadb15e1",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Bottom",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4080,
        "y": 1380,
        "wires": []
    },
    {
        "id": "1882869c0537e468",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "function 31",
        "func": "msg = {\n    machineID: msg.machineID,\n    payload: 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2665,
        "y": 1500,
        "wires": [
            [
                "e845ec4d61acf2d5"
            ]
        ],
        "l": false
    },
    {
        "id": "4952dd022abb75ad",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 25, //Number of registers allowed per instance\n    offset = 0;\n\n/*Del\nnode.send({ \"payload\" : {\n    data : msg.payload.data.length,\n    buffer: msg.payload.buffer.length\n}});*/\n\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nmsg.check = {\n    output: output,\n    test: String.fromCharCode(83, 116),\n    check: msg.payload.data.length / entryRegisterLength\n};\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 140,
        "wires": [
            [
                "a63ee866d1d3340b"
            ]
        ]
    },
    {
        "id": "0a8ed61e867f56ed",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 570,
        "y": 140,
        "wires": [
            [],
            [
                "4952dd022abb75ad",
                "4eceb11fa41fb864"
            ]
        ]
    },
    {
        "id": "f5ad7a146a77eea2",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Read Reg",
        "func": "var fc=3;\nvar sa=260;\nvar addresses=100; //Set\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "0a8ed61e867f56ed"
            ]
        ]
    },
    {
        "id": "9059f5fd97c87d09",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "f5ad7a146a77eea2"
            ]
        ]
    },
    {
        "id": "a63ee866d1d3340b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "4eceb11fa41fb864",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 100,
        "wires": []
    },
    {
        "id": "ed9e10d9c22c547c",
        "type": "comment",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "PLC Read DEVELOPMENT",
        "info": "",
        "x": 180,
        "y": 80,
        "wires": []
    },
    {
        "id": "12e8cfd55bd6f932",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Float write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12.5",
        "payloadType": "num",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "fbe9023f2366e5bb"
            ]
        ]
    },
    {
        "id": "df6da89a12f26db4",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "4ea21dda80af99ec",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Write Float 2W",
        "func": "var buf;\nvar fc=16;\nvar sa=msg.sa;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "df6da89a12f26db4",
                "a41742725ab5987b"
            ]
        ]
    },
    {
        "id": "a41742725ab5987b",
        "type": "modbus-flex-write",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 850,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fbe9023f2366e5bb",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "function 20",
        "func": "msg.payload = [101.23, 210.36, 300.99, 400.36];\nlet sa = 15100;\n\n/*\nlet sa = 200;\nmsg.payload = [\n    1863,\n    4\n];*/\nfor (let i = 0; i < msg.payload.length; i++) {\n    node.send({\n        payload: msg.payload[i],\n        sa: sa\n    })\n    sa = sa + 2\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "4ea21dda80af99ec"
            ]
        ]
    },
    {
        "id": "2afb31f338f918e7",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Write Reg as Char",
        "func": "//Testing\nlet var1 = Buffer.from('');\n\n//Par.Names\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16LE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16LE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        var1: var1,\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            [
                "c0eed8ccb5e34a3c",
                "38374f02c85e3efa"
            ]
        ]
    },
    {
        "id": "38374f02c85e3efa",
        "type": "modbus-flex-write",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 890,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c0eed8ccb5e34a3c",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Char Write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "b49c91e11fc35baa",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Char Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "cb8d00cf3af12820"
            ]
        ]
    },
    {
        "id": "cb8d00cf3af12820",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "function 21",
        "func": "\nlet arr = [\"8100084100\", \"ActiveTest\"]\nmsg.payload = {\n    values: arr,\n    sa: 15000,\n    entryRegisterLength: 15,\n    entryCount: 2\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "2afb31f338f918e7",
                "a94da27ee4dd7d33"
            ]
        ]
    },
    {
        "id": "a94da27ee4dd7d33",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 180",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "e0e063d64010d657",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 610,
        "y": 460,
        "wires": [
            [],
            [
                "036712fa2b497dae",
                "34b0b3a03033e594"
            ]
        ]
    },
    {
        "id": "464136f77820a240",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Float: Par results",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.basicReg,\n    addresses = registers.basicRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "e0e063d64010d657"
            ]
        ]
    },
    {
        "id": "036712fa2b497dae",
        "type": "function",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "Store values",
        "func": "const offset = 4;\nlet buf,\n    values = [],\n    test = [],//del\n    numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n    \n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    test.push(Buffer.from([buf[2], buf[3]]).readInt16BE())\n    test.push(Buffer.from([buf[0], buf[1]]).readInt16BE())\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = values;\nflow.set('testResults', testResults)\n\nmsg.check = {\n    values: values\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 460,
        "wires": [
            [
                "35ef6d9691bad31b"
            ]
        ]
    },
    {
        "id": "34b0b3a03033e594",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "35ef6d9691bad31b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 420,
        "wires": []
    },
    {
        "id": "ce1b26d50834a0ff",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "g": "0b9482d917fa354c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "464136f77820a240"
            ]
        ]
    },
    {
        "id": "d5d32098bee3786d",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 780,
        "wires": [
            [
                "9a329cb80ea5f45f"
            ]
        ]
    },
    {
        "id": "9a329cb80ea5f45f",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 780,
        "wires": [
            [
                "d6ac7bbd7ead942b"
            ]
        ]
    },
    {
        "id": "9ce57eae9878230d",
        "type": "link in",
        "z": "31496c5ec25fc448",
        "name": "Load PLC info in",
        "links": [
            "4b8ce65db5980c6a"
        ],
        "x": 145,
        "y": 680,
        "wires": [
            [
                "df5d28f26305ce52",
                "80e1ada509df05b2"
            ]
        ]
    },
    {
        "id": "d6ac7bbd7ead942b",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 700,
        "y": 780,
        "wires": [
            [],
            [
                "c82c4fca487d4735",
                "3001b12596f64a16"
            ]
        ]
    },
    {
        "id": "c82c4fca487d4735",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 780,
        "wires": [
            [
                "46db9aabeee8a60b",
                "78a1175a4dd0e1ba"
            ]
        ]
    },
    {
        "id": "3001b12596f64a16",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 230",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 740,
        "wires": []
    },
    {
        "id": "46db9aabeee8a60b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 231",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 740,
        "wires": []
    },
    {
        "id": "78a1175a4dd0e1ba",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 780,
        "wires": [
            [
                "f4a4c424bbf8c172"
            ]
        ]
    },
    {
        "id": "f4a4c424bbf8c172",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1330,
        "y": 780,
        "wires": [
            [],
            [
                "68e5c844050f69a8",
                "0ed579743b8b0155"
            ]
        ]
    },
    {
        "id": "68e5c844050f69a8",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 780,
        "wires": [
            [
                "16a22fc609b38b44",
                "e54017babbb92362"
            ]
        ]
    },
    {
        "id": "0ed579743b8b0155",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 232",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 740,
        "wires": []
    },
    {
        "id": "16a22fc609b38b44",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 233",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 740,
        "wires": []
    },
    {
        "id": "e54017babbb92362",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 780,
        "wires": [
            [
                "e6a705e6e0505ce2"
            ]
        ]
    },
    {
        "id": "e6a705e6e0505ce2",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1900,
        "y": 780,
        "wires": [
            [],
            [
                "3e0ca73980f5032a",
                "1ba90b607468f4dd"
            ]
        ]
    },
    {
        "id": "3e0ca73980f5032a",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [20, 20],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = floatValues[0];\ntestResults.parameterVoltages = floatValues[1];\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 780,
        "wires": [
            [
                "afd3396cc5c96ba0",
                "f2aba66e9632b8f0"
            ]
        ]
    },
    {
        "id": "1ba90b607468f4dd",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 234",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 740,
        "wires": []
    },
    {
        "id": "afd3396cc5c96ba0",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 740,
        "wires": []
    },
    {
        "id": "f2aba66e9632b8f0",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 780,
        "wires": [
            [
                "60c5872b2f0d6f29",
                "18b5fcbbaa5adacb"
            ]
        ]
    },
    {
        "id": "60c5872b2f0d6f29",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2470,
        "y": 780,
        "wires": [
            [],
            [
                "5fce0a422522f322",
                "cf4aacab03b7b7a8"
            ]
        ]
    },
    {
        "id": "18b5fcbbaa5adacb",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 720,
        "wires": []
    },
    {
        "id": "5fce0a422522f322",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 780,
        "wires": [
            [
                "66783a5d7c8f684d",
                "df537e8e950a84b1"
            ]
        ]
    },
    {
        "id": "cf4aacab03b7b7a8",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 740,
        "wires": []
    },
    {
        "id": "66783a5d7c8f684d",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 238",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 720,
        "wires": []
    },
    {
        "id": "df537e8e950a84b1",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 780,
        "wires": [
            [
                "82546e589ece378a",
                "cfe99be8739f1f61"
            ]
        ]
    },
    {
        "id": "82546e589ece378a",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3050,
        "y": 780,
        "wires": [
            [],
            [
                "4dddd32133c74fa4",
                "13c02b4ef75ff0f9"
            ]
        ]
    },
    {
        "id": "cfe99be8739f1f61",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 251",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 720,
        "wires": []
    },
    {
        "id": "4dddd32133c74fa4",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 780,
        "wires": [
            [
                "7aedede0c5f85d27",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "13c02b4ef75ff0f9",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 252",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 740,
        "wires": []
    },
    {
        "id": "7aedede0c5f85d27",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 253",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 720,
        "wires": []
    },
    {
        "id": "85c4d22315196e1c",
        "type": "link out",
        "z": "31496c5ec25fc448",
        "name": "Loaded TestResults from PLC",
        "mode": "link",
        "links": [
            "383005b740be9c02"
        ],
        "x": 3565,
        "y": 780,
        "wires": []
    },
    {
        "id": "94f770252806aae0",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1580,
        "wires": [
            [
                "386aa47f24a1be6d"
            ]
        ]
    },
    {
        "id": "386aa47f24a1be6d",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "config File Lister",
        "func": "msg.payload = {\n    start: 'C:/Users/User/Documents/Coding/Node Red/Recipes',\n    pattern: '*.json'\n}  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1580,
        "wires": [
            [
                "c4fb67a936d854e0"
            ]
        ]
    },
    {
        "id": "383005b740be9c02",
        "type": "link in",
        "z": "31496c5ec25fc448",
        "name": "Find TestResult Test in",
        "links": [
            "85c4d22315196e1c",
            "d682b6b8fe3c6634"
        ],
        "x": 175,
        "y": 1500,
        "wires": [
            [
                "386aa47f24a1be6d"
            ]
        ]
    },
    {
        "id": "c4fb67a936d854e0",
        "type": "fs-file-lister",
        "z": "31496c5ec25fc448",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 540,
        "y": 1580,
        "wires": [
            [
                "becf12d8d94b4efe",
                "9026214ddcbd4dd0"
            ]
        ]
    },
    {
        "id": "becf12d8d94b4efe",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1520,
        "wires": []
    },
    {
        "id": "9026214ddcbd4dd0",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Split",
        "func": "let testResults = flow.get('testResults') || {};\ntestResults.recipeID\nfor (let i = 0; i < msg.payload.length; i++) {\n    node.send({\n        filename : msg.payload[i],\n        topic: i,\n        search: testResults.recipeID,\n        machineID: msg.machineID\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "675a434bf086b9f7",
                "c96524e80f38b876"
            ]
        ]
    },
    {
        "id": "675a434bf086b9f7",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Buffer",
        "func": "/*\n//infinite loop preventer\nlet loop = context.get('loop') || 0;\n\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    //Looking for my value\n    let test = JSON.parse(msg.payload);\n    if (parseInt(test.File_Code) == parseInt(msg.search)) {\n        context.set('ID', undefined);\n        context.set('buffer', undefined);\n        flow.set('test', test);\n        return [, msg, ];\n    }\n\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n    } else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        /*loop: loop*/\n    }\n    if (ID[0] == undefined) { //When the buffer is empty\n        //del\n        node.send([, , {\n            payload: msg.machineID + \" :The JSON file with the recipe \" + msg.search + \"  data stored could not be found\"\n        }]);\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return [msg, , ];\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        /*loop: loop*/\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return [msg, ];\n    }\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1580,
        "wires": [
            [
                "ea76b7467c7ae599",
                "b09cb5ae7c299cf3"
            ],
            [
                "c8716ad40a94ac63",
                "9c2a5523344edd67"
            ],
            [
                "f4b38784796a244f"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "c96524e80f38b876",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 185",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ca8212dc22f79f51",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1580,
        "wires": [
            [
                "d22162f4e47d4b35",
                "675a434bf086b9f7"
            ]
        ]
    },
    {
        "id": "ea76b7467c7ae599",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 184",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1520,
        "wires": []
    },
    {
        "id": "b09cb5ae7c299cf3",
        "type": "file in",
        "z": "31496c5ec25fc448",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1140,
        "y": 1580,
        "wires": [
            [
                "6d9fac7ce82aa641",
                "ca8212dc22f79f51"
            ]
        ]
    },
    {
        "id": "c8716ad40a94ac63",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Create data from PLC",
        "func": "let results = flow.get('testResults'),\n    test = flow.get('test'),\n    testResultID = flow.get('testResultID'),\n    parCount = results.parCount,\n    headers = [ // Step ID gets done by MSQL\n        \"Test_result_ID\",\n        \"Step_Number\",\n        \"Measurement\",\n        \"Max\",\n        \"Min\",\n        \"Result\",\n        \"Reason\",\n        \"Step_Name\",\n        \"Instructions\"\n    ],\n    output = [],\n    arr = [],\n    i = 0,\n    stepNum = 1,\n    basicStepNameHeaders = ['Dead Short', 'Ground Bond', 'ACW Test', 'Insulation Resistance', 'Earth Leakage'],\n    basicKeys = Object.keys(test.basic),\n    allParameterKeys = Object.keys(test.parameterData),\n    singleParameterKeys = Object.keys(test.parameterData[allParameterKeys[0]])\n\nmsg.headers = headers;\n\n//Because dead short isn't in the recipe sent\narr.push(testResultID);\narr.push(stepNum); // Step Number\narr.push(parseFloat(results.basicResults[0].toFixed(2))); //Value\narr.push(1000)//max\narr.push(0)//min\narr.push(results.coilBasic[0]) // Result\narr.push((results.coilBasic[0]) ? results.basicResults[0].toFixed(2) + 'mA is within range' : results.basicResults[0].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n// Basic section\nfor (i = 0; i < basicStepNameHeaders.length - 2; i++) { // Basic section\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\n    arr.push(test.basic[basicKeys[i * 2]])//max\n    arr.push(test.basic[basicKeys[i * 2 + 1]])//min\n    arr.push(results.coilBasic[stepNum - 1]) // Result\n    arr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) +'mA is out of range') // Reason\n    arr.push(basicStepNameHeaders[stepNum - 1]) // stepName\n    arr.push(\"\"); // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\n// Last basic element doesn't have the min value\narr.push(testResultID);\narr.push(stepNum);\narr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\narr.push(test.basic[basicKeys[i * 2]])//max\narr.push(0)//min\narr.push(results.coilBasic[stepNum - 1]) // Result\narr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n//Parameter section \n\nfor (let i = 0; i < parCount; i++) {\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.parameterResults[i].toFixed(2))); //Value\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[1]])//max\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[2]])//min\n    arr.push(results.coilPar[i]) // Result\n    arr.push((results.coilPar[i]) ? results.parameterResults[i].toFixed(2) + 'W is within range' : results.parameterResults[i].toFixed(2) + 'W is out of range') // Reason\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[0]]) // stepName\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[3]]) // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\nflow.set('testResultID', flow.get('testResultID') + 1);\n\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1680,
        "wires": [
            [
                "7bc74e839404994a",
                "1c06331bc6a62fb8",
                "986dcda44872dbf9",
                "3101ffadd9315b82"
            ]
        ]
    },
    {
        "id": "9c2a5523344edd67",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1640,
        "wires": []
    },
    {
        "id": "d22162f4e47d4b35",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 182",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1520,
        "wires": []
    },
    {
        "id": "6d9fac7ce82aa641",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 183",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1520,
        "wires": []
    },
    {
        "id": "75011822dd9591e4",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 1680,
        "wires": [
            [
                "c8716ad40a94ac63"
            ]
        ]
    },
    {
        "id": "7bc74e839404994a",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 191",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1640,
        "wires": []
    },
    {
        "id": "1c06331bc6a62fb8",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Config File Listener",
        "func": "msg.data = msg.payload;\nmsg.columns = msg.headers.toString();\nlet pattern = 'stepResults.csv'\nmsg.filename = flow.get('stepResultsCSVlocation') + pattern;\nmsg.payload = {\n    start: flow.get('stepResultsCSVlocation'),\n    pattern: 'stepResults.csv'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1680,
        "wires": [
            [
                "ccf62559a293553a"
            ]
        ]
    },
    {
        "id": "986dcda44872dbf9",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "SQL Statement",
        "func": "// Insert statement\nlet task = \"INSERT INTO \",\n    tableName = \"[NodeRed].[dbo].[DefyStepResults] \",\n    headers = \"( \" + msg.headers.toString() + \" )\",\n    valueText = \"\",\n    values = [];\n;\nmsg.payload.forEach((array) => {\n\n    // Some are numbers, some are text. For loop is eaasier to catch those\n    let i = 0; // Count of i will be kept\n    valueText += array[i++].toString(); // First instance put in so the comma insert works\n\n    for (i; i <= 4; i++) { // Adds up the numbers\n        valueText += \", \" + array[i].toString();\n    }\n\n    if(array[i++]) {\n        valueText += \", 'PASS'\";\n    } else {\n        valueText += \", 'FAIL'\";\n    }\n\n    for (i; i <= 8; i++) { // Catching the text fields\n        valueText += \", '\" + array[i] + \"'\"; \n    }\n\n    valueText = \" VALUES ( \" + valueText + \" ) \";\n    node.send({ \n        payload: task + tableName + headers + valueText,\n        topic: array[0] // Using the Step number to define each, should use unique ID\n        });\n    values.push(valueText);\n\n    valueText = \"\";\n});\n\n/* //del\nlet sqlStatement = task + tableName + headers;// NOt being used\nmsg.payload = sqlStatement + values[0];\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1800,
        "wires": [
            [
                "dce81094d2878d3a",
                "3d322d6d01656610"
            ]
        ]
    },
    {
        "id": "3101ffadd9315b82",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Return msg",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1840,
        "wires": [
            [
                "e738e4fd70baf647",
                "d1e4cbb597b63411"
            ]
        ]
    },
    {
        "id": "ccf62559a293553a",
        "type": "fs-file-lister",
        "z": "31496c5ec25fc448",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 1600,
        "y": 1680,
        "wires": [
            [
                "bdc1a42a78f24634"
            ]
        ]
    },
    {
        "id": "dce81094d2878d3a",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 197",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1740,
        "wires": []
    },
    {
        "id": "3d322d6d01656610",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1800,
        "wires": [
            [
                "0548504efd4b194c",
                "02bc94ee6c52bc8d"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "e738e4fd70baf647",
        "type": "link out",
        "z": "31496c5ec25fc448",
        "name": "Trigger listener out",
        "mode": "link",
        "links": [
            "f4a2496d2edd30aa"
        ],
        "x": 1495,
        "y": 1860,
        "wires": []
    },
    {
        "id": "bdc1a42a78f24634",
        "type": "switch",
        "z": "31496c5ec25fc448",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 1680,
        "wires": [
            [
                "6b71f6dd8b9b9d65",
                "65b0e81b67bc36bf"
            ],
            [
                "dbe012e9e4dc4f99"
            ]
        ]
    },
    {
        "id": "d67d8f4042b67298",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 1800,
        "wires": [
            [
                "fd9030ad96778ed5",
                "3d322d6d01656610"
            ]
        ]
    },
    {
        "id": "0548504efd4b194c",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 198",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1740,
        "wires": []
    },
    {
        "id": "02bc94ee6c52bc8d",
        "type": "MSSQL",
        "z": "31496c5ec25fc448",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2000,
        "y": 1800,
        "wires": [
            [
                "c15ddeb608db8815",
                "d67d8f4042b67298"
            ]
        ]
    },
    {
        "id": "6b71f6dd8b9b9d65",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Set Payload",
        "func": "msg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1600,
        "wires": [
            [
                "5f9909f7e59cd58c",
                "759efd13af7d101e"
            ]
        ]
    },
    {
        "id": "65b0e81b67bc36bf",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 192",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 1540,
        "wires": []
    },
    {
        "id": "dbe012e9e4dc4f99",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Set Payload",
        "func": "msg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1680,
        "wires": [
            [
                "cb2a64c19589d0f7"
            ]
        ]
    },
    {
        "id": "fd9030ad96778ed5",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 199",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c15ddeb608db8815",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 196",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 1740,
        "wires": []
    },
    {
        "id": "5f9909f7e59cd58c",
        "type": "csv",
        "z": "31496c5ec25fc448",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2090,
        "y": 1600,
        "wires": [
            [
                "ac4d60b66c26bb51",
                "817defa459204588"
            ]
        ]
    },
    {
        "id": "759efd13af7d101e",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1520,
        "wires": []
    },
    {
        "id": "cb2a64c19589d0f7",
        "type": "csv",
        "z": "31496c5ec25fc448",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2090,
        "y": 1680,
        "wires": [
            [
                "817defa459204588"
            ]
        ]
    },
    {
        "id": "ac4d60b66c26bb51",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 193",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 1540,
        "wires": []
    },
    {
        "id": "817defa459204588",
        "type": "file",
        "z": "31496c5ec25fc448",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2280,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "80e1ada509df05b2",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 300",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 560,
        "wires": []
    },
    {
        "id": "f4b38784796a244f",
        "type": "ui_toast",
        "z": "31496c5ec25fc448",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "d1e4cbb597b63411",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "Finished reading PLC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3072800bb098b992",
        "type": "comment",
        "z": "31496c5ec25fc448",
        "name": "Store data",
        "info": "",
        "x": 80,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e8dc7d33141cf1b0",
        "type": "comment",
        "z": "31496c5ec25fc448",
        "name": "Read PLC",
        "info": "",
        "x": 70,
        "y": 560,
        "wires": []
    },
    {
        "id": "5175dbf2ce8dad04",
        "type": "modbus-write",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "ec998e1eb45fe4eb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 720,
        "y": 2060,
        "wires": [
            [],
            [
                "7e7d5d11fac70f1c"
            ]
        ]
    },
    {
        "id": "02ace2ac61db8d6a",
        "type": "modbus-write",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 720,
        "y": 2120,
        "wires": [
            [],
            [
                "7e7d5d11fac70f1c"
            ]
        ]
    },
    {
        "id": "621c6c91f528a769",
        "type": "modbus-write",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "5d0e1198b746388a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 720,
        "y": 2180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "762c874322c0017e",
        "type": "modbus-write",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "4f042df482363103",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 720,
        "y": 2240,
        "wires": [
            [],
            [
                "7e7d5d11fac70f1c"
            ]
        ]
    },
    {
        "id": "aaaac0747ffaa6ed",
        "type": "modbus-write",
        "z": "31496c5ec25fc448",
        "name": "local",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 2300,
        "wires": [
            [],
            [
                "7e7d5d11fac70f1c"
            ]
        ]
    },
    {
        "id": "be04843f2eb7126d",
        "type": "switch",
        "z": "31496c5ec25fc448",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ATEKA1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "17400ef8180458c7"
            ],
            [
                "f6ab9be8997f935d"
            ],
            [
                "a939e2ecffab5bd7"
            ],
            [
                "b7435d2b7de0b390"
            ],
            [
                "840868fbba4e8c32"
            ]
        ]
    },
    {
        "id": "9efe6d6c8d8e09b8",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "f80a6f0ccd05cfd5"
            ]
        ]
    },
    {
        "id": "80d827b9f64f69b9",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 880,
        "wires": [
            [
                "9efe6d6c8d8e09b8"
            ]
        ]
    },
    {
        "id": "f80a6f0ccd05cfd5",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 880,
        "wires": [
            [],
            [
                "305d542d2f9b2f27",
                "37fa6fef8ed88fdf"
            ]
        ]
    },
    {
        "id": "305d542d2f9b2f27",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 880,
        "wires": [
            [
                "6804482ea00ee62b",
                "049ea2a0f6f48e6e"
            ]
        ]
    },
    {
        "id": "37fa6fef8ed88fdf",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 320",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 840,
        "wires": []
    },
    {
        "id": "6804482ea00ee62b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 321",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 840,
        "wires": []
    },
    {
        "id": "049ea2a0f6f48e6e",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 880,
        "wires": [
            [
                "ec9033b433027732"
            ]
        ]
    },
    {
        "id": "ec9033b433027732",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 880,
        "wires": [
            [],
            [
                "f49b227e8df24e6c",
                "7e7262776c8823d6"
            ]
        ]
    },
    {
        "id": "f49b227e8df24e6c",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 880,
        "wires": [
            [
                "2561f9e3a71de414",
                "653c1a3a0a6a0fb8"
            ]
        ]
    },
    {
        "id": "7e7262776c8823d6",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 322",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 840,
        "wires": []
    },
    {
        "id": "2561f9e3a71de414",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 323",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 840,
        "wires": []
    },
    {
        "id": "653c1a3a0a6a0fb8",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 880,
        "wires": [
            [
                "5e5cf8ae0687829d"
            ]
        ]
    },
    {
        "id": "5e5cf8ae0687829d",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 880,
        "wires": [
            [],
            [
                "0e6e0d6cf2c41885",
                "8befde378174dd51"
            ]
        ]
    },
    {
        "id": "0e6e0d6cf2c41885",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 880,
        "wires": [
            [
                "c4b909b5668cb125",
                "8af477ef6f44406d"
            ]
        ]
    },
    {
        "id": "8befde378174dd51",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 324",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 840,
        "wires": []
    },
    {
        "id": "c4b909b5668cb125",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 325",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 840,
        "wires": []
    },
    {
        "id": "8af477ef6f44406d",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 880,
        "wires": [
            [
                "406cc4c7c6c2beaa",
                "b6a611cc7c52d0fe"
            ]
        ]
    },
    {
        "id": "406cc4c7c6c2beaa",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 880,
        "wires": [
            [],
            [
                "5d983ff2e9c306d4",
                "efd860064473656b"
            ]
        ]
    },
    {
        "id": "b6a611cc7c52d0fe",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 326",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 840,
        "wires": []
    },
    {
        "id": "5d983ff2e9c306d4",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 880,
        "wires": [
            [
                "b73f489a0b3b1631",
                "8f3f04dd43084b32"
            ]
        ]
    },
    {
        "id": "efd860064473656b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 327",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 840,
        "wires": []
    },
    {
        "id": "b73f489a0b3b1631",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 840,
        "wires": []
    },
    {
        "id": "8f3f04dd43084b32",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 880,
        "wires": [
            [
                "bfab6b1235519fa2",
                "9f7925effd3301c7"
            ]
        ]
    },
    {
        "id": "bfab6b1235519fa2",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka1",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ec998e1eb45fe4eb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 880,
        "wires": [
            [],
            [
                "8329d909b73e2c11",
                "5c1a8cf1216f9161"
            ]
        ]
    },
    {
        "id": "9f7925effd3301c7",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 329",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 840,
        "wires": []
    },
    {
        "id": "8329d909b73e2c11",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 880,
        "wires": [
            [
                "99cdb5c61058c5da",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "5c1a8cf1216f9161",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 330",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 840,
        "wires": []
    },
    {
        "id": "99cdb5c61058c5da",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 331",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 820,
        "wires": []
    },
    {
        "id": "11064f13f702f5ab",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 980,
        "wires": [
            [
                "361e776a693caa7e"
            ]
        ]
    },
    {
        "id": "eee5d170e5385f15",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "11064f13f702f5ab"
            ]
        ]
    },
    {
        "id": "361e776a693caa7e",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 980,
        "wires": [
            [],
            [
                "772bc8f9a9c5c1d7",
                "dc3ae07d2ded6e9d"
            ]
        ]
    },
    {
        "id": "772bc8f9a9c5c1d7",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 980,
        "wires": [
            [
                "4d4991d10e0a66a3",
                "4bc980c62fe3b950"
            ]
        ]
    },
    {
        "id": "dc3ae07d2ded6e9d",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 332",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 940,
        "wires": []
    },
    {
        "id": "4d4991d10e0a66a3",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 333",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 940,
        "wires": []
    },
    {
        "id": "4bc980c62fe3b950",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 980,
        "wires": [
            [
                "29b11a1ad55c7959"
            ]
        ]
    },
    {
        "id": "29b11a1ad55c7959",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 980,
        "wires": [
            [],
            [
                "2b182a67aaf01f46",
                "1d0d433b5529833f"
            ]
        ]
    },
    {
        "id": "2b182a67aaf01f46",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 980,
        "wires": [
            [
                "259e355a8d089f05",
                "7c5a02a8e9ba1b0f"
            ]
        ]
    },
    {
        "id": "1d0d433b5529833f",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 334",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 940,
        "wires": []
    },
    {
        "id": "259e355a8d089f05",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 335",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 940,
        "wires": []
    },
    {
        "id": "7c5a02a8e9ba1b0f",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 980,
        "wires": [
            [
                "102a32afa95f194d"
            ]
        ]
    },
    {
        "id": "102a32afa95f194d",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 980,
        "wires": [
            [],
            [
                "6ed365225df8a02f",
                "a0c1ca45865bbeab"
            ]
        ]
    },
    {
        "id": "6ed365225df8a02f",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 980,
        "wires": [
            [
                "642c0b08529f22ec",
                "765cbfa9e846d693"
            ]
        ]
    },
    {
        "id": "a0c1ca45865bbeab",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 336",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 940,
        "wires": []
    },
    {
        "id": "642c0b08529f22ec",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 337",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 940,
        "wires": []
    },
    {
        "id": "765cbfa9e846d693",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 980,
        "wires": [
            [
                "4490601e5418ea3d",
                "059583c151750ba5"
            ]
        ]
    },
    {
        "id": "4490601e5418ea3d",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 980,
        "wires": [
            [],
            [
                "c9ec8dd42511a982",
                "68893e22f5d467db"
            ]
        ]
    },
    {
        "id": "059583c151750ba5",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 338",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 940,
        "wires": []
    },
    {
        "id": "c9ec8dd42511a982",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 980,
        "wires": [
            [
                "10504e78063acd83",
                "f7b7c98c9254d48b"
            ]
        ]
    },
    {
        "id": "68893e22f5d467db",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 339",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 940,
        "wires": []
    },
    {
        "id": "10504e78063acd83",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 340",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 940,
        "wires": []
    },
    {
        "id": "f7b7c98c9254d48b",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 980,
        "wires": [
            [
                "ddfc4351fca132c4",
                "c01203c79f6bf44b"
            ]
        ]
    },
    {
        "id": "ddfc4351fca132c4",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka2",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 980,
        "wires": [
            [],
            [
                "eb3ecfd48e034528",
                "e98cbcaa73dbb8eb"
            ]
        ]
    },
    {
        "id": "c01203c79f6bf44b",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 341",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 940,
        "wires": []
    },
    {
        "id": "eb3ecfd48e034528",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 980,
        "wires": [
            [
                "722aa14fefeb0ef5",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "e98cbcaa73dbb8eb",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 342",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 940,
        "wires": []
    },
    {
        "id": "722aa14fefeb0ef5",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 343",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 920,
        "wires": []
    },
    {
        "id": "0507d1d8e38b200a",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "85e1a6d6abfb945e"
            ]
        ]
    },
    {
        "id": "65e74532b67b20e1",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1080,
        "wires": [
            [
                "0507d1d8e38b200a"
            ]
        ]
    },
    {
        "id": "85e1a6d6abfb945e",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1080,
        "wires": [
            [],
            [
                "3b936e46c221527e",
                "ee51986fb0f77035"
            ]
        ]
    },
    {
        "id": "3b936e46c221527e",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "1d7dcde7a67b78f3",
                "7cba3421f5689573"
            ]
        ]
    },
    {
        "id": "ee51986fb0f77035",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 344",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1d7dcde7a67b78f3",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 345",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7cba3421f5689573",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1080,
        "wires": [
            [
                "91b20b1138d0ab43"
            ]
        ]
    },
    {
        "id": "91b20b1138d0ab43",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1080,
        "wires": [
            [],
            [
                "116d69414d0f7bad",
                "804cca36b5fea87a"
            ]
        ]
    },
    {
        "id": "116d69414d0f7bad",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "ee886d5d901f4789",
                "e31506e3f03b8f62"
            ]
        ]
    },
    {
        "id": "804cca36b5fea87a",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 346",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ee886d5d901f4789",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 347",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e31506e3f03b8f62",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1080,
        "wires": [
            [
                "c781f6d85f310423"
            ]
        ]
    },
    {
        "id": "c781f6d85f310423",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1080,
        "wires": [
            [],
            [
                "d843187011470f10",
                "6df6cb73c4f3f1c0"
            ]
        ]
    },
    {
        "id": "d843187011470f10",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1080,
        "wires": [
            [
                "583c01662f072e49",
                "f8f806a5b8d46128"
            ]
        ]
    },
    {
        "id": "6df6cb73c4f3f1c0",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 348",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "583c01662f072e49",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 349",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f8f806a5b8d46128",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1080,
        "wires": [
            [
                "bff7ba9d32ce9e58",
                "0aa2f30ea99fc763"
            ]
        ]
    },
    {
        "id": "bff7ba9d32ce9e58",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1080,
        "wires": [
            [],
            [
                "4215cdf386db4f9a",
                "cb4ea3d193b56890"
            ]
        ]
    },
    {
        "id": "0aa2f30ea99fc763",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 350",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4215cdf386db4f9a",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1080,
        "wires": [
            [
                "5ecc2b3f451d6a12",
                "6451b828da47811e"
            ]
        ]
    },
    {
        "id": "cb4ea3d193b56890",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 351",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1040,
        "wires": []
    },
    {
        "id": "5ecc2b3f451d6a12",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 352",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6451b828da47811e",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1080,
        "wires": [
            [
                "e1f420bd9f7fe2cf",
                "fc3e0b6d64bef7d6"
            ]
        ]
    },
    {
        "id": "e1f420bd9f7fe2cf",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5d0e1198b746388a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1080,
        "wires": [
            [],
            [
                "ec50cab6d4c5e343",
                "ca1050e64fdd0df1"
            ]
        ]
    },
    {
        "id": "fc3e0b6d64bef7d6",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 353",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ec50cab6d4c5e343",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1080,
        "wires": [
            [
                "e9a2d275542ce0d9",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "ca1050e64fdd0df1",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 354",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e9a2d275542ce0d9",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 355",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9ff1d05f9c94ac3c",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "7b61256daf9b4b97"
            ]
        ]
    },
    {
        "id": "5605e7244bf1a70f",
        "type": "inject",
        "z": "31496c5ec25fc448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1180,
        "wires": [
            [
                "9ff1d05f9c94ac3c"
            ]
        ]
    },
    {
        "id": "7b61256daf9b4b97",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 1180,
        "wires": [
            [],
            [
                "e23f82aaaa0af68f",
                "378b43641b20ac8f"
            ]
        ]
    },
    {
        "id": "e23f82aaaa0af68f",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1180,
        "wires": [
            [
                "d7fa43c0eca3af76",
                "47dcf607db8fd0e0"
            ]
        ]
    },
    {
        "id": "378b43641b20ac8f",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 356",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d7fa43c0eca3af76",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 357",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "47dcf607db8fd0e0",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1180,
        "wires": [
            [
                "8b4a7dad4fedfbda"
            ]
        ]
    },
    {
        "id": "8b4a7dad4fedfbda",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1320,
        "y": 1180,
        "wires": [
            [],
            [
                "319b97bea4c37013",
                "a24379bb4ea0e05f"
            ]
        ]
    },
    {
        "id": "319b97bea4c37013",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1180,
        "wires": [
            [
                "aad5c0ab8e01e3a7",
                "a625f726f4449357"
            ]
        ]
    },
    {
        "id": "a24379bb4ea0e05f",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 358",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1140,
        "wires": []
    },
    {
        "id": "aad5c0ab8e01e3a7",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 359",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a625f726f4449357",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1180,
        "wires": [
            [
                "0a77b5aa563d1f55"
            ]
        ]
    },
    {
        "id": "0a77b5aa563d1f55",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1890,
        "y": 1180,
        "wires": [
            [],
            [
                "af0d3afeddaa887a",
                "e6634ae772c125a5"
            ]
        ]
    },
    {
        "id": "af0d3afeddaa887a",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Power & Voltage (coupled)\t    15 200\tfloat\t80 Reg\t40 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [40],\n    arr = [];\n/*\nlet entryLength = 4,\n    parVal,\n    parVol,\n    floatBuf = [];\nfor (let i = 0; i < 160;) {\n    Buffer.concat([parVal, msg.payload.buffer.slice(i, i + entryLength)])\n    parVal.concat(msg.payload.buffer.slice(i, i + entryLength)); //Get the buffer values for the Power test values\n    i += entryLength;   // Indents the pointer in the buffer array\n    Buffer.concat([parVol, msg.payload.buffer.slice(i, i + entryLength)])\n    parVol = [...parVol, ...(msg.payload.buffer.slice(i, i + entryLength))]; // Grabs the Voltage value\n    i += entryLength;\n}\nfloatBuf[0] = (parVal);\nfloatBuf[1] = (parVol);\n*/\n//del\n/*\nnode.send({\n    floatBuf: floatBuf\n})*/\n\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\nlet powerTests = [],\n    voltageTests = []\n\nfor (let i = 0; i < 40; i += 2) { //catching the power tests\n    powerTests.push(floatValues[0][i]);\n}\nfor (let i = 1; i < 40; i += 2) { //catching the voltage tests\n    voltageTests.push(floatValues[0][i]);\n}\n\nmsg.check = {\n    powerTests: powerTests,\n    voltageTests: voltageTests,\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = powerTests;\ntestResults.parameterVoltages = voltageTests;\n;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1180,
        "wires": [
            [
                "f9309f0c39fd7535",
                "f60dec572cccc398"
            ]
        ]
    },
    {
        "id": "e6634ae772c125a5",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 360",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f9309f0c39fd7535",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 361",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f60dec572cccc398",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10;\n    //slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\n//msg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1180,
        "wires": [
            [
                "0338e7b0d6e18f67",
                "98bd494baf64fa87"
            ]
        ]
    },
    {
        "id": "0338e7b0d6e18f67",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 1180,
        "wires": [
            [],
            [
                "ac48ed8a105b68ac",
                "94f77dc663f85bb7"
            ]
        ]
    },
    {
        "id": "98bd494baf64fa87",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 362",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ac48ed8a105b68ac",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1180,
        "wires": [
            [
                "06c9772a4ea55d5e",
                "8a92cdd23c79ee9f"
            ]
        ]
    },
    {
        "id": "94f77dc663f85bb7",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 363",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1140,
        "wires": []
    },
    {
        "id": "06c9772a4ea55d5e",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 364",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8a92cdd23c79ee9f",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1180,
        "wires": [
            [
                "1aceea9d5c210afe",
                "6fd4db7272620a90"
            ]
        ]
    },
    {
        "id": "1aceea9d5c210afe",
        "type": "modbus-flex-getter",
        "z": "31496c5ec25fc448",
        "name": "Ateka4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4f042df482363103",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3040,
        "y": 1180,
        "wires": [
            [],
            [
                "80011f4c8e80aed2",
                "2f98cb55ccd274d6"
            ]
        ]
    },
    {
        "id": "6fd4db7272620a90",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 365",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1140,
        "wires": []
    },
    {
        "id": "80011f4c8e80aed2",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1180,
        "wires": [
            [
                "41abbf2470f653b7",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "2f98cb55ccd274d6",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 366",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1140,
        "wires": []
    },
    {
        "id": "41abbf2470f653b7",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "debug 367",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1120,
        "wires": []
    },
    {
        "id": "df5d28f26305ce52",
        "type": "switch",
        "z": "31496c5ec25fc448",
        "name": "",
        "property": "machineID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "local",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ATEKA4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "9a329cb80ea5f45f"
            ],
            [
                "9efe6d6c8d8e09b8"
            ],
            [
                "11064f13f702f5ab"
            ],
            [
                "0507d1d8e38b200a"
            ],
            [
                "9ff1d05f9c94ac3c"
            ]
        ]
    },
    {
        "id": "17400ef8180458c7",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "function 26",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 2060,
        "wires": [
            [
                "5175dbf2ce8dad04",
                "b0491d933dd0ba43"
            ]
        ],
        "l": false
    },
    {
        "id": "f6ab9be8997f935d",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "function 27",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 2120,
        "wires": [
            [
                "02ace2ac61db8d6a",
                "8d7d5fbc4b832a73"
            ]
        ],
        "l": false
    },
    {
        "id": "a939e2ecffab5bd7",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "function 28",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 2180,
        "wires": [
            [
                "621c6c91f528a769",
                "bd65aa633c374777"
            ]
        ],
        "l": false
    },
    {
        "id": "b7435d2b7de0b390",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "function 29",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 2240,
        "wires": [
            [
                "762c874322c0017e",
                "a090f7b72878c04c"
            ]
        ],
        "l": false
    },
    {
        "id": "840868fbba4e8c32",
        "type": "function",
        "z": "31496c5ec25fc448",
        "name": "function 30",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 2300,
        "wires": [
            [
                "aaaac0747ffaa6ed",
                "b8a98b013b8c309e"
            ]
        ],
        "l": false
    },
    {
        "id": "b8a98b013b8c309e",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "local",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2300,
        "wires": []
    },
    {
        "id": "f4a2496d2edd30aa",
        "type": "link in",
        "z": "31496c5ec25fc448",
        "name": "PLC machine switch bit off in",
        "links": [
            "e738e4fd70baf647"
        ],
        "x": 275,
        "y": 2120,
        "wires": [
            [
                "be04843f2eb7126d",
                "9582d4e011b048d1"
            ]
        ]
    },
    {
        "id": "9582d4e011b048d1",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "PLC machine switch bit off in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2000,
        "wires": []
    },
    {
        "id": "a090f7b72878c04c",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "ATEKA4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2240,
        "wires": []
    },
    {
        "id": "bd65aa633c374777",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "ATEKA3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8d7d5fbc4b832a73",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "ATEKA2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2120,
        "wires": []
    },
    {
        "id": "b0491d933dd0ba43",
        "type": "debug",
        "z": "31496c5ec25fc448",
        "name": "ATEKA1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2060,
        "wires": []
    },
    {
        "id": "35a5747e957985c7",
        "type": "link out",
        "z": "31496c5ec25fc448",
        "name": "PLC machine switch bit off out",
        "mode": "link",
        "links": [
            "a65d38dff46ce146"
        ],
        "x": 915,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2a99dc5d1f16aca5",
        "type": "ui_template",
        "z": "90f171682dfc3f42",
        "group": "",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>\n.login{\n    padding: 18px;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "86d352ede94cfc61",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Settings page",
        "info": "",
        "x": 90,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a918d52c5a658719",
        "type": "ui_text",
        "z": "90f171682dfc3f42",
        "group": "9ba12de27dc123ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "status",
        "x": 430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "d1a41a727392ecfa",
        "type": "ui_form",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "",
        "group": "9ba12de27dc123ba",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat Password",
                "value": "password2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password1": "",
            "password2": ""
        },
        "payload": "",
        "submit": "REGISTER",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "54ea78c3c478634a",
                "17894237102d0e7a"
            ]
        ]
    },
    {
        "id": "54ea78c3c478634a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1380,
        "wires": []
    },
    {
        "id": "17894237102d0e7a",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Checks",
        "func": "if (flow.get(\"usernames\").includes(msg.payload.username)) {\n    let status = {\n        payload: \"Username already exists\"\n    }\n    return [, status];\n} else if (msg.payload.password1 == msg.payload.password2) {\n    msg = {\n        lineFlag: 'formInput',\n        data : {\n            username: msg.payload.username,\n            password: msg.payload.password1\n        }\n    };\n    let status = {payload: \"\"};\n    return [msg, status];\n} else {\n    let status = {\n        payload: \"The passwords do not match\"\n    }\n    return [,status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1420,
        "wires": [
            [
                "f90afec645303d7a",
                "2a6a3d3626e8d156"
            ],
            [
                "a918d52c5a658719",
                "cacb430fae27b53f"
            ]
        ]
    },
    {
        "id": "f90afec645303d7a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b45d6e2d886ab9e6",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Set Par",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "7b9e0102ef2077a2",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1400,
        "wires": [
            [
                "30b771718c579dd1"
            ]
        ]
    },
    {
        "id": "32d6d25a22388994",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B CSV data (NE)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "42bc5da63624f1d9",
        "type": "switch",
        "z": "90f171682dfc3f42",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "18b9cf52d19c8c39"
            ],
            [
                "6588444fcfdc54d7"
            ]
        ]
    },
    {
        "id": "3e9cc1fe49151981",
        "type": "fs-file-lister",
        "z": "90f171682dfc3f42",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 860,
        "y": 1420,
        "wires": [
            [
                "42bc5da63624f1d9",
                "1b9adcb2c45a6550"
            ]
        ]
    },
    {
        "id": "3f6f3c687ced4555",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1440,
        "wires": [
            [
                "30b771718c579dd1"
            ]
        ]
    },
    {
        "id": "bb37d573f1797676",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B CSV data (E)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1500,
        "wires": []
    },
    {
        "id": "18b9cf52d19c8c39",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1400,
        "wires": [
            [
                "7b9e0102ef2077a2",
                "32d6d25a22388994"
            ]
        ]
    },
    {
        "id": "6588444fcfdc54d7",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1440,
        "wires": [
            [
                "3f6f3c687ced4555",
                "bb37d573f1797676"
            ]
        ]
    },
    {
        "id": "1b9adcb2c45a6550",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1500,
        "wires": []
    },
    {
        "id": "071c23441ee3c49b",
        "type": "file",
        "z": "90f171682dfc3f42",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1790,
        "y": 1420,
        "wires": [
            [
                "546dbdeddd65b269"
            ]
        ]
    },
    {
        "id": "8dfa706e5138ec4d",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Par (write for csv)",
        "func": "//msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1420,
        "wires": [
            [
                "071c23441ee3c49b",
                "7dc2ea7e1adb7919"
            ]
        ]
    },
    {
        "id": "7dc2ea7e1adb7919",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "File write data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1360,
        "wires": []
    },
    {
        "id": "546dbdeddd65b269",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Final Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1420,
        "wires": []
    },
    {
        "id": "215d088689c2f725",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Config FL Set Par",
        "func": "\n//move\nmsg.data.ID = flow.get('passwords').length + 1\nnode.warn('We have a number ' + msg.data.ID);\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\n\n//Set the parameters needed for the write CSV function\nmsg.columns = \"ID, username, password\";\nmsg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "b45d6e2d886ab9e6",
                "3e9cc1fe49151981"
            ]
        ]
    },
    {
        "id": "cacb430fae27b53f",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1520,
        "wires": []
    },
    {
        "id": "5531ec73a8dd6b5e",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "view user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 2260,
        "wires": [
            [
                "4fdd258cd2c6a9e4"
            ]
        ]
    },
    {
        "id": "4fdd258cd2c6a9e4",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Read flow variables",
        "func": "msg.payload = {\n    usernames: flow.get(\"usernames\"),\n    passwords: flow.get(\"passwords\")\n}\n\n//Del: testing\nlet username = [];\nusername = flow.get(\"usernames\");\nmsg.check = {\n    check: username.indexOf(\"gio\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2260,
        "wires": [
            [
                "cedbaa431a9e9e37"
            ]
        ]
    },
    {
        "id": "cedbaa431a9e9e37",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c4d3d227d23559d3",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Registration Form",
        "info": "Writes to csv",
        "x": 130,
        "y": 1320,
        "wires": []
    },
    {
        "id": "6a9c82de64377004",
        "type": "ui_form",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "",
        "group": "9e76e570168f2dca",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "New Password",
                "value": "newPassword1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat New Password",
                "value": "newPassword2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "newPassword1": "",
            "newPassword2": ""
        },
        "payload": "",
        "submit": "UPDATE",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "762c9f53fc63ea8a",
                "7fb333832a4696fa"
            ]
        ]
    },
    {
        "id": "762c9f53fc63ea8a",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Checks",
        "func": "let usernames = flow.get(\"usernames\"),\n    passwords = flow.get(\"passwords\"),\n    index = usernames.indexOf(msg.payload.username);\n\nif (!usernames.includes(msg.payload.username)) { //Already checked with the declaration of index\n    let status = {\n        payload: \"Username does not exist\"\n    }\n    return [, status];\n} else if (msg.payload.newPassword1 == msg.payload.newPassword2) { //checks that the new passwords are the same\n        passwords[index] = msg.payload.newPassword1;\n        msg.data = {\n            usernames: usernames,\n            passwords: passwords\n        }\n        msg.lineFlag = \"formInput\";\n        return [msg, ];\n} else {\n    let status = { // When Password1 doesn't match Password2\n        payload: \"Passwords do not match\"\n    };\n    return [, status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1760,
        "wires": [
            [
                "279fe8db6719f27f"
            ],
            [
                "eb380d24e28bd310"
            ]
        ]
    },
    {
        "id": "eb380d24e28bd310",
        "type": "ui_text",
        "z": "90f171682dfc3f42",
        "group": "9e76e570168f2dca",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 1820,
        "wires": []
    },
    {
        "id": "ab48572e1513028a",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 270,
        "y": 1480,
        "wires": [
            [
                "a918d52c5a658719"
            ]
        ]
    },
    {
        "id": "d6ebf7c6a284d592",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 330,
        "y": 1820,
        "wires": [
            [
                "eb380d24e28bd310"
            ]
        ]
    },
    {
        "id": "279fe8db6719f27f",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b5fbba8c4e1cd4d7",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Update Password Form",
        "info": "",
        "x": 140,
        "y": 1660,
        "wires": []
    },
    {
        "id": "55aaacd276ca4bfa",
        "type": "ui_table",
        "z": "90f171682dfc3f42",
        "group": "9a5680e46e5f9771",
        "name": "",
        "order": 1,
        "width": 10,
        "height": 6,
        "columns": [
            {
                "field": "ID",
                "title": "ID",
                "width": "10%",
                "align": "center",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "username",
                "title": "Username",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "password",
                "title": "",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1080,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a180220ab6809aa9",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "6cc8bbe5846332b5"
            ]
        ]
    },
    {
        "id": "6cc8bbe5846332b5",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Config Read File",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1060,
        "wires": [
            [
                "caf677db5e73985b"
            ]
        ]
    },
    {
        "id": "caf677db5e73985b",
        "type": "file in",
        "z": "90f171682dfc3f42",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 1060,
        "wires": [
            [
                "d1424fc60d38adb8"
            ]
        ]
    },
    {
        "id": "d1424fc60d38adb8",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 750,
        "y": 1060,
        "wires": [
            [
                "b6d3fcffe3d5214d",
                "f40f478d71984f02"
            ]
        ]
    },
    {
        "id": "b6d3fcffe3d5214d",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 241",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7fb333832a4696fa",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1f56a7dfce1bdf69",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "Load user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2020,
        "wires": [
            [
                "2c2e3d9b67bdd849"
            ]
        ]
    },
    {
        "id": "2c2e3d9b67bdd849",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Par (read file)",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nmsg.columns = \"ID, username, password\";\nmsg.payload = {\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2020,
        "wires": [
            [
                "685db81b0bac5f0b"
            ]
        ]
    },
    {
        "id": "66b6270fcfbdd3c2",
        "type": "file in",
        "z": "90f171682dfc3f42",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 2080,
        "wires": [
            [
                "3f59c637a1060639",
                "c2a927f4ba4fd91c"
            ]
        ]
    },
    {
        "id": "3f59c637a1060639",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1010,
        "y": 2080,
        "wires": [
            [
                "2456bcb633a3fddd",
                "f808751ebe227a39"
            ]
        ]
    },
    {
        "id": "2456bcb633a3fddd",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c2a927f4ba4fd91c",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2040,
        "wires": []
    },
    {
        "id": "f808751ebe227a39",
        "type": "join",
        "z": "90f171682dfc3f42",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1150,
        "y": 2080,
        "wires": [
            [
                "5b1fe6f123919f2a",
                "93adf4da80060978"
            ]
        ]
    },
    {
        "id": "5b1fe6f123919f2a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2040,
        "wires": []
    },
    {
        "id": "93adf4da80060978",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Flow",
        "func": "let data = msg.payload,\n    usernames = [],\n    passwords = [];\nfor (let i = 0; i < data.length; i++) {\n    //Set\n    usernames.push(data[i].username);\n    passwords.push(data[i].password);\n}\nflow.set(\"usernames\", usernames);\nflow.set(\"passwords\", passwords);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2080,
        "wires": [
            [
                "5bab2cbe2d10740c",
                "7ce425fd6f0879fc"
            ]
        ]
    },
    {
        "id": "5bab2cbe2d10740c",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2120,
        "wires": []
    },
    {
        "id": "ab54695d8b90815c",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Load Login Credentials",
        "info": "CSV Line:\n• Column headers are hard coded in Set Flow\n",
        "x": 140,
        "y": 1940,
        "wires": []
    },
    {
        "id": "155f4a527d2e624a",
        "type": "ui_button",
        "z": "90f171682dfc3f42",
        "name": "",
        "group": "9a5680e46e5f9771",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "REFRESH",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "indent",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 240,
        "y": 1140,
        "wires": [
            [
                "6cc8bbe5846332b5"
            ]
        ]
    },
    {
        "id": "f40f478d71984f02",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Refresher",
        "func": "node.send({payload: []});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1060,
        "wires": [
            [
                "55aaacd276ca4bfa"
            ]
        ]
    },
    {
        "id": "685db81b0bac5f0b",
        "type": "fs-file-lister",
        "z": "90f171682dfc3f42",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 560,
        "y": 2020,
        "wires": [
            [
                "9813236685e2af7a"
            ]
        ]
    },
    {
        "id": "9813236685e2af7a",
        "type": "switch",
        "z": "90f171682dfc3f42",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 2020,
        "wires": [
            [
                "6734f2d9539c62ce",
                "05f01d1e79365ca5"
            ],
            [
                "66b6270fcfbdd3c2",
                "e423bf99f7883b3a"
            ]
        ]
    },
    {
        "id": "2a6a3d3626e8d156",
        "type": "link out",
        "z": "90f171682dfc3f42",
        "name": "Registration form out",
        "mode": "link",
        "links": [
            "db60f5a4308ead20"
        ],
        "x": 435,
        "y": 1400,
        "wires": []
    },
    {
        "id": "db60f5a4308ead20",
        "type": "link in",
        "z": "90f171682dfc3f42",
        "name": "Load Credentials in",
        "links": [
            "2a6a3d3626e8d156"
        ],
        "x": 215,
        "y": 2080,
        "wires": [
            [
                "2c2e3d9b67bdd849"
            ]
        ]
    },
    {
        "id": "4c67ec09c671a6df",
        "type": "link out",
        "z": "90f171682dfc3f42",
        "name": "Load Credentials out",
        "mode": "link",
        "links": [
            "0de8581ca5651dc9"
        ],
        "x": 1575,
        "y": 2000,
        "wires": []
    },
    {
        "id": "0de8581ca5651dc9",
        "type": "link in",
        "z": "90f171682dfc3f42",
        "name": "Registration Form in",
        "links": [
            "4c67ec09c671a6df"
        ],
        "x": 525,
        "y": 1480,
        "wires": [
            [
                "215d088689c2f725"
            ]
        ]
    },
    {
        "id": "20eb7ca2f9e89045",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Check",
        "func": "if (msg.lineFlag == 'formInput') {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2000,
        "wires": [
            [
                "4c67ec09c671a6df",
                "328bb7b454d9ce0d"
            ]
        ]
    },
    {
        "id": "acb1cef1e87b991e",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 243",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1920,
        "wires": []
    },
    {
        "id": "05f01d1e79365ca5",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 244",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1880,
        "wires": []
    },
    {
        "id": "e423bf99f7883b3a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2160,
        "wires": []
    },
    {
        "id": "328bb7b454d9ce0d",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1940,
        "wires": []
    },
    {
        "id": "c891a63d83380320",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "9c33923ae87f26b0"
            ]
        ]
    },
    {
        "id": "9c33923ae87f26b0",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/products.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "c7a93f48424e91c8"
            ]
        ]
    },
    {
        "id": "c7a93f48424e91c8",
        "type": "file in",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "263d72c49c8806ed"
            ]
        ]
    },
    {
        "id": "b71de4744c0474cc",
        "type": "join",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 820,
        "y": 220,
        "wires": [
            [
                "997df50f70c549a9",
                "3a33f18d1fd31730"
            ]
        ]
    },
    {
        "id": "088efd7a54561a7c",
        "type": "csv",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 660,
        "y": 220,
        "wires": [
            [
                "b71de4744c0474cc",
                "19d8d9e7b119b01e",
                "11b11b037d3e51ed"
            ]
        ]
    },
    {
        "id": "19d8d9e7b119b01e",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Calc time difference",
        "func": "if (context.get('timer') == undefined) {\n    context.set('timer', new Date().getTime())\n} else if (msg.lineFlag == 'trigger') {\n    let currentTime = new Date().getTime();\n    msg.payload = currentTime - context.get('timer');\n    context.set('timer', undefined);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 140,
        "wires": [
            [
                "38d6434be758d0a7"
            ]
        ]
    },
    {
        "id": "997df50f70c549a9",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Set Trigger",
        "func": "msg.lineFlag = 'trigger';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "19d8d9e7b119b01e"
            ]
        ]
    },
    {
        "id": "11b11b037d3e51ed",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 139",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "38d6434be758d0a7",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 60,
        "wires": []
    },
    {
        "id": "3a33f18d1fd31730",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 141",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    },
    {
        "id": "263d72c49c8806ed",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 142",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "9ec52cf046598a9a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "5827a37590da09cb"
            ]
        ]
    },
    {
        "id": "5827a37590da09cb",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/Steps.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "c7a93f48424e91c8"
            ]
        ]
    },
    {
        "id": "e83f27a0af8dab0f",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Check Size of Payload",
        "func": "msg.size = Buffer.byteLength(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "0247aee91f6bd7f5"
            ]
        ]
    },
    {
        "id": "0247aee91f6bd7f5",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "2a4ee2968fd0742c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Flow variables",
        "func": "flow.set('products', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "15590603a5bbc09e",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "ce0bd01e1c031139"
            ]
        ]
    },
    {
        "id": "ce0bd01e1c031139",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/products.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "9796b5d77f290f90"
            ]
        ]
    },
    {
        "id": "9796b5d77f290f90",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 540,
        "wires": [
            [
                "2a4ee2968fd0742c"
            ]
        ]
    },
    {
        "id": "59b9cd238764487d",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "61b8cb89a20f7b3d"
            ]
        ]
    },
    {
        "id": "61b8cb89a20f7b3d",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/Steps.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 620,
        "wires": [
            [
                "56a23a7a7300e35a"
            ]
        ]
    },
    {
        "id": "56a23a7a7300e35a",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 620,
        "wires": [
            [
                "c9b7d3419b5f6168"
            ]
        ]
    },
    {
        "id": "c9b7d3419b5f6168",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Flow variables",
        "func": "flow.set('steps', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f6448b5a5e0363a9",
        "type": "comment",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Check load spead and size ",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "ed8144c6f4129aee",
        "type": "comment",
        "z": "c00c7edc48758726",
        "name": "",
        "info": "",
        "x": 100,
        "y": 420,
        "wires": []
    },
    {
        "id": "9e9f0b040db4c704",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "83a3b7c84ae4b7fc"
            ]
        ]
    },
    {
        "id": "83a3b7c84ae4b7fc",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Create data from CSV",
        "func": "let products = flow.get('products'),\n    steps = flow.get('steps'),\n    productHeaders = [],\n    productIndexer = [],\n    stepsHeaders = [],\n    paulHMIcsv = [],\n    arr = [],\n    productCounter  = 1,\n    j = 0;\n\n    //del\n    let counter = 0\n    //\n\n// Separate rows\nproducts = products.split(/\\r?\\n/);\nsteps = steps.split(/\\r?\\n/);\n\nproductHeaders = products.splice(0, 1);\nstepsHeaders = steps.splice(0, 1);\n\nfor (let i = 0; i < products.length; i++) { \n    products[i] = products[i].split(',');\n    productIndexer.push(parseInt(products[i][0]))\n}\n\nfor (let i = 0; i < steps.length; i++) {\n    steps[i] = steps[i].split(',');\n\n    for (let j = 0; j < steps[i].length; j++) {\n        if ((j >= 0) && (j <= 2)) {\n            steps[i][j] = parseInt(steps[i][j]);\n        } else if ((j == 5) || (j == 6)) {\n            steps[i][j] = parseFloat(steps[i][j]);\n        } else if (j == 10) {\n            steps[i][j] =  Boolean(parseInt(steps[i][j]));\n        }\n    }\n    \n    if (counter++ < 0) {\n        node.send({\n            payload: {\n                i: i,\n                productCounter: productCounter,\n                index: productIndexer.indexOf(productCounter),\n                //arr: arr,\n                //paulHMIcsv: paulHMIcsv,\n                //'steps[i][1]': parseFloat(steps[i][1]),\n                //productCounter: productCounter\n            }\n        });\n    }\n    if (steps[i][1] != productCounter) { // Find the instance where product number changes\n        let index = productIndexer.indexOf(productCounter);\n        if (index != -1)\n            paulHMIcsv.push([products[index], arr]);\n        arr = [];\n        productCounter = steps[i][1]; // Set prodcut number to next product number\n    }\n    \n    arr.push(steps[i]);\n\n}\n\n//del\narr = []\nfor(let i = 0; i < paulHMIcsv.length; i++) {\n    arr.push(paulHMIcsv[i][1][0][1]);\n}\nmsg.payload = paulHMIcsv;\n/*//\nmsg.payload = {\n    arr: arr,\n    paulHMIcsv: paulHMIcsv,\n    //productHeaders: productHeaders,\n    //products: products,\n    productIndexer: productIndexer,\n    //steps: steps\n}*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "fcad0d90af0d3319",
                "0a669fd725936c42"
            ]
        ]
    },
    {
        "id": "fcad0d90af0d3319",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 144",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 700,
        "wires": []
    },
    {
        "id": "0a669fd725936c42",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "function 19",
        "func": "let i = 0,\n    output = {},\n    parameterData = {}\n\nfor (let j = 0; j < msg.payload[i][1].length; j++) {\n    msg.payload[i][1][j]\n}\noutput = {\n    File_Code: msg.payload[i][0][3],\n    File_Name: msg.payload[i][0][1],\n    parameterData : {\n\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "e3df95cdec702756"
            ]
        ]
    },
    {
        "id": "e3df95cdec702756",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 150",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 700,
        "wires": []
    },
    {
        "id": "094efcd5554c0129",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "1716e06bf68d3396"
            ]
        ]
    },
    {
        "id": "1716e06bf68d3396",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "Read A Basic JSON",
        "filename": "C:/Users/User/Documents/Coding/Node Red/Recipes/A Basic.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 480,
        "wires": [
            [
                "80ee1e39c9a83726"
            ]
        ]
    },
    {
        "id": "80ee1e39c9a83726",
        "type": "json",
        "z": "c00c7edc48758726",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 480,
        "wires": [
            [
                "704ac4cacdb045de"
            ]
        ]
    },
    {
        "id": "704ac4cacdb045de",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 151",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "6d63afd67c1ee77a",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 980,
        "wires": [
            [
                "026b1534894d38c0"
            ]
        ]
    },
    {
        "id": "bc67f62fa2a10a6a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "6d63afd67c1ee77a"
            ]
        ]
    },
    {
        "id": "026b1534894d38c0",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 153",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 920,
        "wires": []
    },
    {
        "id": "eac26054e44179bb",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "put",
        "filename": "Test1.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "e56a45544362508f"
            ]
        ]
    },
    {
        "id": "199c15f589926339",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "delete",
        "filename": "Test.csv",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 1140,
        "wires": [
            [
                "ec16815c05a66d3d"
            ]
        ]
    },
    {
        "id": "a0c22cd08197a3ad",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "2b1ec2b166ba7034",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "eac26054e44179bb"
            ]
        ]
    },
    {
        "id": "e56a45544362508f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 154",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1020,
        "wires": []
    },
    {
        "id": "299c442f263eb01a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1140,
        "wires": [
            [
                "199c15f589926339"
            ]
        ]
    },
    {
        "id": "ec16815c05a66d3d",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 155",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6bf0f5ca7f085c5a",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 980,
        "wires": [
            [
                "7f263bb005d70588"
            ]
        ]
    },
    {
        "id": "47d467d0723682cf",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 980,
        "wires": [
            [
                "6bf0f5ca7f085c5a"
            ]
        ]
    },
    {
        "id": "7f263bb005d70588",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 156",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 920,
        "wires": []
    },
    {
        "id": "18d7dfc3b8c90867",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "c7c41838fa3f452f",
                "1e9d03bf746f3831"
            ]
        ]
    },
    {
        "id": "0e0be36cdd7d39ea",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "delete",
        "filename": "Test.csv",
        "localFilename": "",
        "name": "",
        "x": 1390,
        "y": 960,
        "wires": [
            [
                "76aa97935fbd37ae"
            ]
        ]
    },
    {
        "id": "1325b7fa3f49caa8",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Put Mine",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "18d7dfc3b8c90867"
            ]
        ]
    },
    {
        "id": "c7c41838fa3f452f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 157",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b427c062606f8a91",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1240,
        "y": 960,
        "wires": [
            [
                "0e0be36cdd7d39ea"
            ]
        ]
    },
    {
        "id": "76aa97935fbd37ae",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 158",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 920,
        "wires": []
    },
    {
        "id": "7cb4bbd55b6e97e1",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Put HMI.csv",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 1140,
        "wires": [
            [
                "412e6260f8f15bae"
            ]
        ]
    },
    {
        "id": "412e6260f8f15bae",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/WORKS.csv",
        "name": "",
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "171d674d5b13f4a2",
                "1e9d03bf746f3831"
            ]
        ]
    },
    {
        "id": "171d674d5b13f4a2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 186",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ee6482b1167f33d7",
        "type": "modbus-write",
        "z": "c00c7edc48758726",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1560,
        "y": 1080,
        "wires": [
            [
                "241f3b4160cdc063"
            ],
            []
        ]
    },
    {
        "id": "1e9d03bf746f3831",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "3c229db6b91c8447"
            ]
        ]
    },
    {
        "id": "9744a91657a9bb3b",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1180,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b221903f8cc030",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 187",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3c229db6b91c8447",
        "type": "delay",
        "z": "c00c7edc48758726",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1390,
        "y": 1080,
        "wires": [
            [
                "ee6482b1167f33d7"
            ]
        ]
    },
    {
        "id": "241f3b4160cdc063",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 188",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1000,
        "wires": []
    },
    {
        "id": "77af2e3c956bd306",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Delete",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "666df0985192db8b"
            ]
        ]
    },
    {
        "id": "666df0985192db8b",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "delete",
        "filename": "ATEKA_Params.csv",
        "localFilename": "",
        "name": "",
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "111c5c4c3b489f41"
            ]
        ]
    },
    {
        "id": "111c5c4c3b489f41",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 189",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c1727c7def2bde09",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Basic",
        "func": "let fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.coilBasic,\n    addresses = registers.coilBasicCount,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1560,
        "wires": [
            [
                "6c1185590f2e2a58",
                "0cdf7c8f2232dffa"
            ]
        ]
    },
    {
        "id": "22626261aa534394",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1560,
        "wires": [
            [
                "5808d2e152af6d05",
                "c1727c7def2bde09"
            ]
        ]
    },
    {
        "id": "6c1185590f2e2a58",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1930,
        "y": 1560,
        "wires": [
            [],
            [
                "961a2d1b809e4491",
                "3deb3b906c45b6fa"
            ]
        ]
    },
    {
        "id": "0cdf7c8f2232dffa",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 200",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d201e35b69f86a5c",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1310,
        "y": 1560,
        "wires": [
            [],
            [
                "22626261aa534394",
                "d53f69d4b434a63e"
            ]
        ]
    },
    {
        "id": "5808d2e152af6d05",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 201",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "basicResults",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1520,
        "wires": []
    },
    {
        "id": "961a2d1b809e4491",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilBasic = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1560,
        "wires": [
            [
                "3094c6a7046eb6ea",
                "3d29ba220d724e63"
            ]
        ]
    },
    {
        "id": "3deb3b906c45b6fa",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 202",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1520,
        "wires": []
    },
    {
        "id": "134d792251a54dff",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Basic",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.basicReg,\n    addresses = registers.basicRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1560,
        "wires": [
            [
                "d201e35b69f86a5c",
                "14f2fcc2063fcec2"
            ]
        ]
    },
    {
        "id": "d53f69d4b434a63e",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3094c6a7046eb6ea",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 204",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "coilBasic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3d29ba220d724e63",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Parameter",
        "func": "let fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.coilPar,\n    addresses = registers.coilParCount,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 1560,
        "wires": [
            [
                "4eefeafcfbde978e",
                "3f198241d472b1a6"
            ]
        ]
    },
    {
        "id": "272562c38e5c9354",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1560,
        "wires": [
            [
                "fe4ae2a820757ea8",
                "134d792251a54dff"
            ]
        ]
    },
    {
        "id": "14f2fcc2063fcec2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4eefeafcfbde978e",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2570,
        "y": 1560,
        "wires": [
            [],
            [
                "0e6ac90a4419a939",
                "08edd8648b6ef32d"
            ]
        ]
    },
    {
        "id": "3f198241d472b1a6",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 206",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 1480,
        "wires": []
    },
    {
        "id": "99d7ec1f908ed051",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1560,
        "wires": [
            [],
            [
                "272562c38e5c9354",
                "3bae61cff4d0ba81"
            ]
        ]
    },
    {
        "id": "fe4ae2a820757ea8",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 207",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "parameterResults",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1520,
        "wires": []
    },
    {
        "id": "0e6ac90a4419a939",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 1560,
        "wires": [
            [
                "019770d12951816f",
                "46645a19f3d5192d"
            ]
        ]
    },
    {
        "id": "08edd8648b6ef32d",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 208",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4104d17c52941432",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Par results",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.parReg,\n    addresses = registers.parRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1560,
        "wires": [
            [
                "99d7ec1f908ed051"
            ]
        ]
    },
    {
        "id": "3bae61cff4d0ba81",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 209",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1520,
        "wires": []
    },
    {
        "id": "019770d12951816f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 210",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "coilPar",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1520,
        "wires": []
    },
    {
        "id": "34294cbbe26c5f5e",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Registers",
        "func": "msg.registers = {\n    parReg: 15200,\n    parRegCount: 20,\n    basicReg: 15100,\n    basicRegCount: 5,\n    coilBasic: 7000,\n    coilBasicCount: 8,\n    coilPar: 7100,\n    coilParCount: 20,\n    parCountVal: 15048,\n    parCountCount: 1,\n    prodIDnameSA: 15000,\n    prodIDnameEntryCount: 2,\n    prodIDnameEntryRegisterLength: 15,\n    stationNameSA: 15050,\n    stationNameEntryCount: 1,\n    stationNameEntryRegisterLength: 15\n\n}\nflow.set('registers', msg.registers);\nflow.set('testResults', undefined);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1560,
        "wires": [
            [
                "4104d17c52941432",
                "2ec15a983c246c08"
            ]
        ]
    },
    {
        "id": "131b5a4059c1b893",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1560,
        "wires": [
            [
                "34294cbbe26c5f5e"
            ]
        ]
    },
    {
        "id": "8b7c478948dce28d",
        "type": "link in",
        "z": "c00c7edc48758726",
        "name": "Load PLC info in",
        "links": [],
        "x": 105,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "2ec15a983c246c08",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "registers",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1480,
        "wires": []
    },
    {
        "id": "46645a19f3d5192d",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Char Product ID, Name",
        "func": "var fc=3;\nlet registers = flow.get('registers')\nvar sa = registers.prodIDnameSA;\nvar addresses = registers.prodIDnameEntryCount * registers.prodIDnameEntryRegisterLength;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1560,
        "wires": [
            [
                "7c5467bec94e8a07"
            ]
        ]
    },
    {
        "id": "7c5467bec94e8a07",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3230,
        "y": 1560,
        "wires": [
            [],
            [
                "31e68fbf797f722b",
                "740fe41463f249df"
            ]
        ]
    },
    {
        "id": "31e68fbf797f722b",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 10, //Number of registers allowed per instance\n    offset = 0,\n    //del\n    regChar = [],\n    test = \"\";\n\n// Reading it the right way\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i + 1 ]);\n        text += String.fromCharCode(msg.payload.buffer[i]);\n        i++;\n    }\n\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.prodIDname = output;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1560,
        "wires": [
            [
                "ca75a9e47ca4748e",
                "e032d7321917f95a"
            ]
        ]
    },
    {
        "id": "740fe41463f249df",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 214",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ca75a9e47ca4748e",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 215",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 1520,
        "wires": []
    },
    {
        "id": "5dc6f0b5d4e32bc3",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Station name",
        "func": "var fc=3;\nlet registers = flow.get('registers')\nvar sa = registers.stationNameSA;\nvar addresses = registers.stationNameEntryCount * registers.stationNameEntryRegisterLength;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4350,
        "y": 1560,
        "wires": [
            [
                "0679f9abbe180469"
            ]
        ]
    },
    {
        "id": "0679f9abbe180469",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4510,
        "y": 1560,
        "wires": [
            [],
            [
                "294712c19438413b",
                "ca0062692824b415"
            ]
        ]
    },
    {
        "id": "294712c19438413b",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 15, //Number of registers allowed per instance\n    offset = 0,\n    //del\n    regChar = [],\n    test = \"\";\n\n// Reading it the right way\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i + 1 ]);\n        text += String.fromCharCode(msg.payload.buffer[i]);\n        i++;\n    }\n\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.stationName = output;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4710,
        "y": 1560,
        "wires": [
            [
                "4bd691457e8d0f56"
            ]
        ]
    },
    {
        "id": "ca0062692824b415",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 218",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4700,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4bd691457e8d0f56",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 219",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4880,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e14ff10de5281b13",
        "type": "link out",
        "z": "c00c7edc48758726",
        "name": "Loaded TestResults from PLC",
        "mode": "link",
        "links": [],
        "x": 4875,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7f624863d870a386",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1.4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1680,
        "wires": [
            [
                "f9c16b448d1fe0f4"
            ]
        ]
    },
    {
        "id": "f9c16b448d1fe0f4",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "function 22",
        "func": "msg.payload = flow.get('testResults');\nflow.set('testResults', undefined);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "5364a1fbcb62c763"
            ]
        ]
    },
    {
        "id": "5364a1fbcb62c763",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e032d7321917f95a",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Parameter Count",
        "func": "let fc=3,\n    //set\n    //This is the station nuber and number of tests\n    registers = flow.get('registers'),\n    sa = registers.misc,\n    addresses = registers.miscCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1560,
        "wires": [
            [
                "9e6ee30d71bf2d20"
            ]
        ]
    },
    {
        "id": "9e6ee30d71bf2d20",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3930,
        "y": 1560,
        "wires": [
            [],
            [
                "29f87e87d2e6427c",
                "19b5fdf0723f80a2"
            ]
        ]
    },
    {
        "id": "29f87e87d2e6427c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.misc = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1560,
        "wires": [
            [
                "ba6786f0ece23c70",
                "5dc6f0b5d4e32bc3"
            ]
        ]
    },
    {
        "id": "19b5fdf0723f80a2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 212",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4100,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ba6786f0ece23c70",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 213",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "misc",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4260,
        "y": 1520,
        "wires": []
    },
    {
        "id": "6e8e54189f245f62",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1800,
        "wires": [
            [
                "dee6ad9f67d054cf"
            ]
        ]
    },
    {
        "id": "dee6ad9f67d054cf",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1800,
        "wires": [
            [
                "4a9018fffea03613"
            ]
        ]
    },
    {
        "id": "4a9018fffea03613",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 570,
        "y": 1800,
        "wires": [
            [],
            [
                "cc57365dcbbbd478",
                "293d61fed1541bb1"
            ]
        ]
    },
    {
        "id": "cc57365dcbbbd478",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1800,
        "wires": [
            [
                "206f40f961d11729",
                "c0362b3b5c3de325"
            ]
        ]
    },
    {
        "id": "293d61fed1541bb1",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 221",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1760,
        "wires": []
    },
    {
        "id": "206f40f961d11729",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 222",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c0362b3b5c3de325",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1800,
        "wires": [
            [
                "624e710f3b92968e"
            ]
        ]
    },
    {
        "id": "624e710f3b92968e",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1200,
        "y": 1800,
        "wires": [
            [],
            [
                "4385c7c0bdac43e6",
                "adf467e4b9a581bf"
            ]
        ]
    },
    {
        "id": "4385c7c0bdac43e6",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1800,
        "wires": [
            [
                "b7fd74e5fb994602",
                "e4d8815e125ff0e0"
            ]
        ]
    },
    {
        "id": "adf467e4b9a581bf",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 223",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b7fd74e5fb994602",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e4d8815e125ff0e0",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1800,
        "wires": [
            [
                "412e279cf796743f"
            ]
        ]
    },
    {
        "id": "412e279cf796743f",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1820,
        "y": 1800,
        "wires": [
            [],
            [
                "b336afc134975bdd",
                "92ef35e3e112c915"
            ]
        ]
    },
    {
        "id": "b336afc134975bdd",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [20, 20],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = floatValues[0];\ntestResults.parameterVoltages = floatValues[1];\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1800,
        "wires": [
            [
                "8360fbdbebcf2f94",
                "800387392ad1c01c"
            ]
        ]
    },
    {
        "id": "92ef35e3e112c915",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 225",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8360fbdbebcf2f94",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 226",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1760,
        "wires": []
    },
    {
        "id": "800387392ad1c01c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 1800,
        "wires": [
            [
                "491258d7fa69699f",
                "623da2f02668bd53"
            ]
        ]
    },
    {
        "id": "491258d7fa69699f",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2390,
        "y": 1800,
        "wires": [
            [],
            [
                "a386d629b2e4fca9",
                "52047b3e6ddc2965"
            ]
        ]
    },
    {
        "id": "623da2f02668bd53",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 227",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a386d629b2e4fca9",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 1800,
        "wires": [
            [
                "2cdf405db23c5d02"
            ]
        ]
    },
    {
        "id": "52047b3e6ddc2965",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 1760,
        "wires": []
    },
    {
        "id": "2cdf405db23c5d02",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 229",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 1740,
        "wires": []
    },
    {
        "id": "e94372836c18c7d9",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2000,
        "wires": [
            [
                "d173320434c3c23e"
            ]
        ]
    },
    {
        "id": "d173320434c3c23e",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "function 23",
        "func": "let fc = 3,\n    sa = 0,\n    quantity = 1;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2000,
        "wires": [
            [
                "48f3af813304d777",
                "92f5701c80548e83"
            ]
        ]
    },
    {
        "id": "48f3af813304d777",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 510,
        "y": 2000,
        "wires": [
            [
                "985ca53c6207bad5"
            ],
            []
        ]
    },
    {
        "id": "c312db7a02c1f4dd",
        "type": "modbus-flex-sequencer",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "sequences": [
            {
                "name": "1",
                "unitid": "1",
                "fc": "FC1",
                "address": "1",
                "quantity": "1"
            }
        ],
        "server": "ebeab3422d31a778",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 520,
        "y": 2460,
        "wires": [
            [
                "552a9e388d7eda29"
            ],
            []
        ]
    },
    {
        "id": "99da7dfd84cbd186",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 2460,
        "wires": [
            [
                "6c8c4aeace8044d9"
            ]
        ]
    },
    {
        "id": "6c8c4aeace8044d9",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "func": "msg.sequences = [\n    {\n        name: \"Foo\",\n        unitid: 1,\n        fc: 3,\n        address: 1,\n        quantity: 1\n    },\n    {\n        name: \"Bar\",\n        unitid: 1,\n        fc: 3,\n        address: 10,\n        quantity: 2\n    },\n    {\n        name: \"Baz\",\n        unitid: 1,\n        fc: 'FC3',\n        address: 20,\n        quantity: 3\n    }]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2460,
        "wires": [
            [
                "c312db7a02c1f4dd"
            ]
        ]
    },
    {
        "id": "e387b5cf3a56528a",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 2460,
        "wires": []
    },
    {
        "id": "552a9e388d7eda29",
        "type": "join",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "responseBuffer.buffer",
        "propertyType": "msg",
        "key": "modbusRequest.name",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 2460,
        "wires": [
            [
                "0cd883411cc554c7"
            ]
        ]
    },
    {
        "id": "0cd883411cc554c7",
        "type": "change",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "responseBuffer.buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 2460,
        "wires": [
            [
                "e387b5cf3a56528a"
            ]
        ]
    },
    {
        "id": "602c2fb9189b3c62",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "d": true,
        "g": "539804e1d61a4508",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ebeab3422d31a778",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 600,
        "y": 2580,
        "wires": [
            [
                "167f353c05c28461"
            ],
            []
        ]
    },
    {
        "id": "9eb2b47107b96ed8",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 2580,
        "wires": [
            [
                "2996681554f2e749"
            ]
        ]
    },
    {
        "id": "2996681554f2e749",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "func": "msg.payload = {\n    name: \"Foo\",\n    fc: 3,\n    address: 1,\n    unitid: 1,\n    quantity: 10,\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2580,
        "wires": [
            [
                "602c2fb9189b3c62"
            ]
        ]
    },
    {
        "id": "167f353c05c28461",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2560,
        "wires": []
    },
    {
        "id": "5e8844296c95858c",
        "type": "modbus-flex-connector",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "ebeab3422d31a778",
        "x": 630,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "de343ff69f1f4da3",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "Device port 502",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 2700,
        "wires": [
            [
                "b8f8914c9d5d69ae"
            ]
        ]
    },
    {
        "id": "cd1baf7d357f6329",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "Device port 503",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 2780,
        "wires": [
            [
                "a46d180a4664a236"
            ]
        ]
    },
    {
        "id": "b8f8914c9d5d69ae",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "func": "msg.payload = {\n    'connectorType': 'TCP',\n    'tcpHost': '192.168.0.66',\n    'tcpPort': '502',\n    'unitId': 1\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2700,
        "wires": [
            [
                "5e8844296c95858c"
            ]
        ]
    },
    {
        "id": "a46d180a4664a236",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "",
        "func": "msg.payload = {\n    'connectorType': 'TCP',\n    'tcpHost': '192.168.0.66',\n    'tcpPort': '503',\n    'unitId': 1\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2780,
        "wires": [
            [
                "5e8844296c95858c"
            ]
        ]
    },
    {
        "id": "b90d7f7951814165",
        "type": "comment",
        "z": "c00c7edc48758726",
        "g": "539804e1d61a4508",
        "name": "Change Mod. Config Settings",
        "info": "",
        "x": 660,
        "y": 2680,
        "wires": []
    },
    {
        "id": "985ca53c6207bad5",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1940,
        "wires": []
    },
    {
        "id": "59077e97b5911ea2",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Device port 502",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 2080,
        "wires": [
            [
                "7a1951f37f3deaeb"
            ]
        ]
    },
    {
        "id": "7a1951f37f3deaeb",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "",
        "func": "msg.payload = {\n    'connectorType': 'TCP',\n    'tcpHost': '192.168.101.244'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2080,
        "wires": [
            [
                "a3fbd75c5726d20e"
            ]
        ]
    },
    {
        "id": "a3fbd75c5726d20e",
        "type": "modbus-flex-connector",
        "z": "c00c7edc48758726",
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "54dde46e.53267c",
        "x": 510,
        "y": 2120,
        "wires": [
            [
                "bbf53e7043d2608b"
            ]
        ]
    },
    {
        "id": "293ab64379871fa6",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "",
        "func": "msg.payload = {\n    'connectorType': 'TCP',\n    'tcpHost': '192.168.101.245'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2160,
        "wires": [
            [
                "a3fbd75c5726d20e"
            ]
        ]
    },
    {
        "id": "6368357ee9c94e28",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Device port 503",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 2160,
        "wires": [
            [
                "293ab64379871fa6"
            ]
        ]
    },
    {
        "id": "bbf53e7043d2608b",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 295",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2080,
        "wires": []
    },
    {
        "id": "92f5701c80548e83",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 296",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1940,
        "wires": []
    },
    {
        "id": "70595127d71c3b0d",
        "type": "subflow:ec74dd5cee732abd",
        "z": "c00c7edc48758726",
        "name": "",
        "x": 1480,
        "y": 480,
        "wires": [
            [
                "2b3321063561d884"
            ],
            [
                "a33bd1d2c3900b0b"
            ]
        ]
    },
    {
        "id": "2b3321063561d884",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 297",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 440,
        "wires": []
    },
    {
        "id": "a33bd1d2c3900b0b",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 298",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 500,
        "wires": []
    },
    {
        "id": "c1a97fb354b3d443",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1280,
        "y": 480,
        "wires": [
            [
                "70595127d71c3b0d"
            ]
        ]
    },
    {
        "id": "38c5b77acb14dc9a",
        "type": "comment",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "PLC Write",
        "info": "Currently disconnected",
        "x": 1900,
        "y": 60,
        "wires": []
    },
    {
        "id": "cf9c4a7080dfbd5e",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1940,
        "y": 200,
        "wires": [
            [
                "95595f4fbfdee98f"
            ]
        ]
    },
    {
        "id": "95595f4fbfdee98f",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Testing",
        "func": "msg.payload = flow.get(\"writeData\");\n\nlet data = msg.payload;\n// Basic\n// Set x2\nlet sa = 0, // Set Starting register for PLC writing\n    entryRegisterLength = 2, //Num of registers used per entry (because type is float)\n    values = [],\n    i = 0;\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nmsg.check = {\n    basicKeys: basicKeys,\n    values: values\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 200,
        "wires": [
            [
                "9161d0a7fda2def9",
                "948d8df774b8c958"
            ]
        ]
    },
    {
        "id": "9161d0a7fda2def9",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Testing recipe",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2300,
        "y": 140,
        "wires": []
    },
    {
        "id": "948d8df774b8c958",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Set Data",
        "func": "let data = msg.payload;\nlet sa, // Starting register for PLC writing\n    keys = Object.keys(data.parameterData),\n    i,\n    entryCount = 20, // Total possible entry cound of the extra ParameterData\n    entryRegisterLength,\n    values = [];\n\n\n// Basic\n// Set x2\nsa = 0, // Set Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry (because type is float)\nvalues = [];\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += basicCount * entryRegisterLength;\n\n// Values\n// Set x2\n//sa = 100, // Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].value);\n}\nlet msgValues = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// Names\n//sa = 0, // Starting register for PLC writing\nentryRegisterLength = 10;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].name);\n}\nlet msgNames = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// instructions\n//sa = 120, // Starting register for PLC writing\nentryRegisterLength = 25;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].instructions);\n}\nlet msgInstructions = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\nreturn [msgBasic, msgValues, msgNames, msgInstructions];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 260,
        "wires": [
            [
                "874bdaad96171add",
                "677bd563ce9ca164"
            ],
            [
                "b631b5fbf3c2b52b",
                "874bdaad96171add"
            ],
            [
                "8f10c3d9a5533e50",
                "874bdaad96171add"
            ],
            [
                "3f06d61a64506ac6",
                "874bdaad96171add"
            ]
        ]
    },
    {
        "id": "874bdaad96171add",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Load to PLC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 100,
        "wires": []
    },
    {
        "id": "677bd563ce9ca164",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Float 2W",
        "func": "//Par.Basic\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 140,
        "wires": [
            [
                "7b9ab9a85bf8b121"
            ]
        ]
    },
    {
        "id": "b631b5fbf3c2b52b",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Float 2W",
        "func": "//Par.Values\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 220,
        "wires": [
            [
                "2c4473ebc154fc97",
                "6a60a7604f75eba9"
            ]
        ]
    },
    {
        "id": "8f10c3d9a5533e50",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Reg as Char",
        "func": "//Par.Names\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 300,
        "wires": [
            [
                "8459fcb3ab783bf4",
                "a7c171c540aa6b41"
            ]
        ]
    },
    {
        "id": "3f06d61a64506ac6",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Reg as Char",
        "func": "//Par.instructions\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 200, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 300, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 400, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 380,
        "wires": [
            [
                "1366b07d65e1958a",
                "ea3db8512464c32e"
            ]
        ]
    },
    {
        "id": "7b9ab9a85bf8b121",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2770,
        "y": 140,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2c4473ebc154fc97",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Float Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 180,
        "wires": []
    },
    {
        "id": "6a60a7604f75eba9",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2770,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8459fcb3ab783bf4",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 260,
        "wires": []
    },
    {
        "id": "a7c171c540aa6b41",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2790,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1366b07d65e1958a",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 340,
        "wires": []
    },
    {
        "id": "ea3db8512464c32e",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2790,
        "y": 380,
        "wires": [
            [],
            []
        ]
    }
]