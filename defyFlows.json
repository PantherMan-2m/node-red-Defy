[
    {
        "id": "6c2dfeb262f54a31",
        "type": "tab",
        "label": "Recipes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "31496c5ec25fc448",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90f171682dfc3f42",
        "type": "tab",
        "label": "Dashboard  Login things",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c00c7edc48758726",
        "type": "tab",
        "label": "Testing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9d61395e.8839f8",
        "type": "tab",
        "label": "Files",
        "disabled": false,
        "info": ""
    },
    {
        "id": "731de46a.7645fc",
        "type": "tab",
        "label": "Modbus -video Flow 1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "dd749ff055035503",
        "type": "tab",
        "label": "ModBus Video2",
        "disabled": true,
        "info": ""
    },
    {
        "id": "daaea0a7a0d2dd9e",
        "type": "tab",
        "label": "Workshop PLC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "17fd6e0f1c66137c",
        "type": "tab",
        "label": "Tested",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9b30030f667a40d7",
        "type": "tab",
        "label": "Dashboard v1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e28943498755ce53",
        "type": "tab",
        "label": "Not Used but dev",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3bab716a8a493dbf",
        "type": "subflow",
        "name": "HumidUI (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "37193b5976b8907d"
                    },
                    {
                        "id": "8343c4742146fe3f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "2197f9b20e245122",
        "type": "subflow",
        "name": "TempUI (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 249,
                "wires": [
                    {
                        "id": "b8f1f2881f690446"
                    },
                    {
                        "id": "b7cc2d5e27f8b491"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "c7f701c7168b803a",
        "type": "subflow",
        "name": "HumidUI (2) (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "decd3404fa48ec62"
                    },
                    {
                        "id": "190d4f9e06f71b90"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "61787a96e3740b32",
        "type": "subflow",
        "name": "TempUI (2) (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 249,
                "wires": [
                    {
                        "id": "a0e5a87e15d32bb8"
                    },
                    {
                        "id": "8f05bbe874f46dfc"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "deviceID",
                "type": "dev",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "type": "input",
                    "opts": {
                        "types": [
                            "dev",
                            "file",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_chart.png"
    },
    {
        "id": "c175c2ec63061429",
        "type": "group",
        "z": "17fd6e0f1c66137c",
        "name": "Line Chart",
        "style": {
            "label": true
        },
        "nodes": [
            "bef8cd8183ccd367",
            "1b86a4eacafb44ae",
            "c2d2a42515cd83f5",
            "a5091a6dbe21da16",
            "c82014019da70fca",
            "08f3035389cc43c5",
            "3a520ee0804eb844",
            "895a68a939600cd5",
            "58979c15d4747672",
            "9a11a81f559f9515",
            "82d9a6e4b26e5770",
            "266342b044b0d117",
            "18c978471dd15c23",
            "792687aae52e49e8",
            "856635bb1d42d6e0",
            "e05136bb7c2f2859",
            "3deb96c2e41d4b0a",
            "b9fc73066d698417",
            "00fe1687539e4acb"
        ],
        "x": 14,
        "y": 579
    },
    {
        "id": "663028f8b8ccf169",
        "type": "group",
        "z": "17fd6e0f1c66137c",
        "name": "Mass Data Gen",
        "style": {
            "label": true
        },
        "nodes": [
            "3abb3d519f8ecb18",
            "780466eb4ff31394",
            "048dce9438eace53",
            "e0d38fade5125d03",
            "a0e10bd14e50d18b",
            "14bb9badb25845de",
            "6c7aab8c807c9d17",
            "ed0293b1f59a8397",
            "55f606f7c312d466",
            "d44d5cbb68c05a77",
            "021e22b49c5da8c9",
            "0a3eaaa2cca098b4",
            "ddecf906a80322c7",
            "abfba6236acc5841"
        ],
        "x": 14,
        "y": 819
    },
    {
        "id": "0e3e8448ad30ad11",
        "type": "group",
        "z": "17fd6e0f1c66137c",
        "name": "Flow Par",
        "style": {
            "label": true
        },
        "nodes": [
            "ae5b6eb3b2a087ca",
            "ff7371fa9417502f",
            "454265f986e3d018"
        ],
        "x": 14,
        "y": 399
    },
    {
        "id": "51589d74d611689a",
        "type": "group",
        "z": "e28943498755ce53",
        "name": "IGNORE",
        "style": {
            "label": true
        },
        "nodes": [
            "d9ed99f65a21484b",
            "d0b113538530fc21",
            "2fee471ee603747b",
            "cd57cc93f40b33bf",
            "77d280335ca415c3",
            "8e31874de854de58",
            "72791997b670114d",
            "29b0db1a3a02d679",
            "1b7ec13bb2727fe8",
            "99b26f3bee3c8bd5",
            "403b2c84a44e5503",
            "5163250ad99982c8",
            "bfc72059ee745baa",
            "2f44c5c9d96f49e7",
            "e9626d92f1c4231c",
            "acbff347f607370d",
            "62e165e9060a41ac",
            "2975bbf63abefb31",
            "f13ad1d7d973c746",
            "4b5f00d0a1bfd552",
            "7c84fe6a6006617d",
            "a034bf3851442046",
            "add178ce8930c5d9",
            "7d9ab4d0eeef884b",
            "6a907c09d1641af6",
            "cd82a8f17ec4b36e",
            "576da4fa9da47ac8",
            "a6e30f8019df8026"
        ],
        "x": 94,
        "y": 519
    },
    {
        "id": "92aa249eaec5de7d",
        "type": "group",
        "z": "e28943498755ce53",
        "name": "Futer Ideas",
        "style": {
            "label": true
        },
        "nodes": [
            "1fcb8b4e0bff81c3",
            "93aa61cd40a2a05f",
            "4d5d223efefabfeb",
            "6334e8f34d05c806",
            "fd343ce4ae3d1a43",
            "df0eff99c8cbad90",
            "e7c021dfc1971e2e",
            "80a942296819bcdc",
            "a654ab45d04ab0b9",
            "5da371c76d4aab6e",
            "716168c41cf7544f",
            "5111957458f23474",
            "68659c7fb211728a",
            "0cd61d0848ae8bdf",
            "9bf5c57d16b62e7f",
            "ce1b494cb98de31c",
            "c778681fbb1d003f",
            "0c1e38ad95a4438c",
            "53309bd334780b7f",
            "17563d9d9242889a",
            "727e73e098c75b22",
            "b50b59519fa68022",
            "a390fd7a79f04326"
        ],
        "x": 134,
        "y": 1019
    },
    {
        "id": "a6f0ad5143b4c699",
        "type": "group",
        "z": "e28943498755ce53",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6e07a07f802f2a18",
            "80700e9d52863dfb",
            "6b5314cf87f51ec2",
            "a05bb29ac91da80e",
            "3659caf0d0ab8711",
            "c03c046254fa6da6",
            "c12b02288b168f4c",
            "e329c67db7a52247",
            "fdbf6524f3d4f24a",
            "e4862fd17c621ed5",
            "da9d3c5816598d49",
            "a8ceb766fa76166e"
        ],
        "x": 134,
        "y": 1519
    },
    {
        "id": "2663679731c67ef4",
        "type": "group",
        "z": "90f171682dfc3f42",
        "name": "CSV writing",
        "style": {
            "label": true
        },
        "nodes": [
            "db18064496eb1045",
            "09db46c303ad458b",
            "e8f798d63887473a",
            "3ff6da50a90b1209",
            "d74926522ac62fc7",
            "4d2d050d952c2953",
            "c9090c3541f99cd1",
            "530ad2be100739a1",
            "9fe4c37df7d8eb60",
            "ca0ba3a7db614a3b",
            "1efd318461f8e65b",
            "6086a09a605eaa1d",
            "7f9568011153ca1d",
            "ab01de66fe06bf74",
            "dfb9fb4ec30d51fd",
            "872ae3d460dd78b6",
            "d3c5eb6a6d538c5b",
            "14b4f15e7efa6d9f",
            "174d49da1c5a3a71"
        ],
        "x": 504,
        "y": 799
    },
    {
        "id": "43df61af7b7b9663",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37e5e1cf05f04932",
            "d749b9f44a2a2ba1",
            "1de9dfdf901990fa",
            "756ee76f9ccadbd8",
            "4f48d873ac6baeca",
            "7c1e899a2651d759",
            "b6bd57aa234737be",
            "a405fda7c0517634",
            "1edb47acfa9dbac7",
            "cb07a673fdfc2653",
            "8dc188d1df343704",
            "859e77fbb03e40f0",
            "337b76a428a81ab5"
        ],
        "x": 34,
        "y": 919,
        "w": 902,
        "h": 322
    },
    {
        "id": "8f1040046006e799",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3dab220221184841",
            "c9b3c81e660b8022",
            "f4ea55515c41729c",
            "23281f6c705311eb",
            "8de91a6651268b8a",
            "a9c4c3a2c9488c0e",
            "848a99fa27c2e22f",
            "ce067e37168e1d33",
            "ddf28fd3e1968054",
            "a8817387335deec3",
            "113479bbc86295a4",
            "486fec372f572af9",
            "a513364e1951fda6",
            "b84b6732efebeca7"
        ],
        "x": 34,
        "y": 1279,
        "w": 972,
        "h": 302
    },
    {
        "id": "e4bfc074446708e2",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6af32e127a95b37c",
            "ae6730362411cdc5",
            "ad9a723bcdb4d50b"
        ],
        "x": 34,
        "y": 1639,
        "w": 372,
        "h": 142
    },
    {
        "id": "10237157f7ec9d83",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "57b8c369402f86ee",
            "43ce6fa4c644f3f3",
            "0f712ca3bb59a557",
            "b4b222f939895c2c",
            "4571c934cd47a965",
            "d6300eb99d1c25a1",
            "98e14c7df7492fd7",
            "5e66d4669da59098",
            "c7a80db6e1441f4f"
        ],
        "x": 34,
        "y": 1819,
        "w": 672,
        "h": 282
    },
    {
        "id": "f8a4ead61d3610ae",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37d487ac91b0fdce",
            "e4883f4f01d94855",
            "3d7f076cfd4e4c32",
            "d7c06429fe49a7d8",
            "9cf37f99d9c46dd7",
            "c20be865f12bee03",
            "a65d5a57aa1aa5e4"
        ],
        "x": 764,
        "y": 1819,
        "w": 862,
        "h": 262
    },
    {
        "id": "2fd3eb0fbfec960e",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4877bfd005f45419",
            "ec0a5242c10cd615",
            "8fbf19989e9ada84",
            "fea68f0b27b3b0b6",
            "ae1be5dc38f60c0b",
            "3a63fa4f796bd032",
            "06167b8a190b1ed6",
            "76426b623e4f601c",
            "b9156f78ebf3843b",
            "cb690a9660cf7c8a",
            "c8ca4022d0d77e22",
            "34c7ab41bb4b3dd7",
            "64d6fcd6ed4fe465",
            "2cc3c524ed5f4e18",
            "9ff3e803ce53cc13",
            "0f6a62d428984bc7",
            "393a717ce46b9361",
            "364a72862b9511e5",
            "c8aea7f920176540",
            "686eb83bad60e464",
            "60f28e5f05f78a6d",
            "20a3eb8c1e03d0e2",
            "0150faf44d6b43a0",
            "849918d9f4b0d272"
        ],
        "x": 1194,
        "y": 899,
        "w": 1252,
        "h": 422
    },
    {
        "id": "ac5ddaede4537b72",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b281e8db5682cef0",
            "72055df34f3ff6d0",
            "35cd53f851e1a767",
            "6674d2d95cae619d",
            "714536eb9bff0bd0",
            "626e278e4cf58f5b",
            "7c1dcedbb4597942",
            "935d68cf5f9462a7",
            "542df5ca2e58aa34",
            "da79b47bea4f8cd0",
            "b39f59f963f517e4",
            "25997782b99a6130",
            "993a9b001a357c8c",
            "7cf0eb5e4d7af7a5",
            "96b36f22a6198df9",
            "da2edc16fc7322a7",
            "717877cb82065dc3",
            "d5a6b4aa8c3d3543"
        ],
        "x": 34,
        "y": 2459,
        "w": 1513,
        "h": 302
    },
    {
        "id": "578d44d18df9e87c",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c8c71e527a7dcceb",
            "ac2e0223ada93d3b",
            "4a3942a5d1cee888",
            "7b0410e1a51fa4cf",
            "ef386ef09874169f",
            "5491c556639992d7",
            "38ff2dcc2e41b6fa",
            "69c370a5e4e9a882",
            "d2cab525d55aed4c",
            "6c98d771a755222f",
            "dc1518dfe85bb897",
            "4a831eb513b40b2a",
            "ec50e4bd721ed7c0",
            "a46910031a3f1d1c",
            "44dbecae4687566e",
            "67bfbb724ce329bc",
            "215838f219a62175",
            "1ea3b76c92b8cd98"
        ],
        "x": 1194,
        "y": 1339,
        "w": 1292,
        "h": 342
    },
    {
        "id": "e6bcc5d10479e867",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc71860e04ee28f1",
            "c1090410677ed7cf",
            "39bdfdf6150306a8",
            "aa7b8f253ea918f7",
            "8bfd37949c01c861"
        ],
        "x": 34,
        "y": 739,
        "w": 692,
        "h": 142
    },
    {
        "id": "dcaa9a10e243e078",
        "type": "group",
        "z": "17fd6e0f1c66137c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "cd9dfcba13049524",
            "5ddde787aa186512",
            "c519c9bb07743518",
            "baa6c2563f8b404d",
            "5dbb16cc67f26efc",
            "79a03bb1edba6504",
            "6380ab3c4bd62f4c",
            "c0036b48afca50e1",
            "dc3acc2a853dcfc1",
            "71d365f28ff1a7cd",
            "78b8807e55a0f71b",
            "1cbdd1443dca930a",
            "d551cba248b0b7c0",
            "02ad3b1deba152a0",
            "b84e5668733433cb",
            "97d64d656ed62a0b",
            "09a21d2c08dd04bf",
            "61d298b5cfa3e96e",
            "a021812f258db7c8"
        ],
        "x": 34,
        "y": 1359
    },
    {
        "id": "664234c9f7128797",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "52fb7c8c7dcbe77e",
            "5f858caa962e998c",
            "bf6864ec2d7a5b95",
            "33c974f546e17556",
            "2d41696a18e88a01",
            "35e0776ee3d875af",
            "f44b2641331a775c",
            "bc1527f0658c3745",
            "674bdf8dd88a2f92",
            "07e2b42143d640d9",
            "083c7d8a391fde5e",
            "2be4d373775ce795",
            "79f57fb83796d203",
            "5295bb96ba9d5449",
            "2f58cbe080870585",
            "7ceec3956a7dd616",
            "302dc2211d42de0e",
            "f1d50dd15d94069a",
            "623845cff6af01b9",
            "175c729c01f2cfbd",
            "9f962157dbb6d25e",
            "345bb44f70f03eb7",
            "413d54f4b5d93ff2",
            "116e4541601aeeab",
            "584ae33d92cddd1e",
            "a2edcd5fcd18c313",
            "a0de533effc5e97a",
            "25752892c649c6ef",
            "5a1aa2cf708531e2",
            "a0e48396595f0b35",
            "fcb4484315826ecd",
            "7193f4f49117ee08",
            "c77e73b050df7609",
            "df7bed9d57e1e061",
            "666e0a81ae995c72",
            "2bbb7773229710e0",
            "cb14a2cccdac1bc3",
            "797b5c9a9c6ad7b8",
            "da75d8cd36b0d376",
            "4b28ff99955b02d3",
            "5276a44f13b2ac4a",
            "14d5ef8a8368fcf9",
            "4bf3fc9956a31dd3",
            "0e2055f1de766c7f",
            "ceb27c5af4f2ec19",
            "22a8c8bc6b6eb29e",
            "2e8743f7b80084b4"
        ],
        "x": 2134,
        "y": 4519,
        "w": 2852,
        "h": 467
    },
    {
        "id": "acca45aca7d162a9",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d7861c4242485729",
            "f3242e7aa08bbe15",
            "71740d665d2b24ce",
            "21a6805e17ec8f57",
            "99276769c25c9fee",
            "2b4327fa36f4764a",
            "8c4d5f66a4a69ab8"
        ],
        "x": 74,
        "y": 3639,
        "w": 772,
        "h": 202
    },
    {
        "id": "dae082823c9d1d01",
        "type": "group",
        "z": "c00c7edc48758726",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c891a63d83380320",
            "9c33923ae87f26b0",
            "c7a93f48424e91c8",
            "5827a37590da09cb",
            "263d72c49c8806ed",
            "9ec52cf046598a9a",
            "088efd7a54561a7c",
            "b71de4744c0474cc",
            "19d8d9e7b119b01e",
            "11b11b037d3e51ed",
            "997df50f70c549a9",
            "3a33f18d1fd31730",
            "38d6434be758d0a7",
            "e83f27a0af8dab0f",
            "0247aee91f6bd7f5",
            "f6448b5a5e0363a9"
        ],
        "x": 24,
        "y": 19
    },
    {
        "id": "e54de4b4f52cafbd",
        "type": "group",
        "z": "c00c7edc48758726",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "38c5b77acb14dc9a",
            "cf9c4a7080dfbd5e",
            "95595f4fbfdee98f",
            "9161d0a7fda2def9",
            "948d8df774b8c958",
            "874bdaad96171add",
            "677bd563ce9ca164",
            "b631b5fbf3c2b52b",
            "8f10c3d9a5533e50",
            "3f06d61a64506ac6",
            "7b9ab9a85bf8b121",
            "2c4473ebc154fc97",
            "6a60a7604f75eba9",
            "8459fcb3ab783bf4",
            "a7c171c540aa6b41",
            "1366b07d65e1958a",
            "ea3db8512464c32e"
        ],
        "x": 34,
        "y": 4559
    },
    {
        "id": "807ab1f8485a35d8",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4447ccc91c15c26d",
            "dc9c85c407d1c0ab",
            "afb8f594f1e07231",
            "2ffd48c752714782",
            "dacc99015ddc50b4",
            "ce9e314b2ee5db14",
            "f3faffe6a0f822d1",
            "3b96d386eb8e1a7a"
        ],
        "x": 34,
        "y": 3939,
        "w": 1152,
        "h": 162
    },
    {
        "id": "6d9335c36df82f31",
        "type": "group",
        "z": "17fd6e0f1c66137c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b1e93749b898e1cd",
            "ea3d50acec45b528",
            "96da9698be2926c7",
            "4c381b6d6088854f",
            "e8d8027e0af3652b",
            "3c3eb43ff3652887",
            "67b6664c1ee448c3",
            "a7063568ee0b8aa2",
            "95d2c53831906210",
            "ee25133f74c52f83",
            "29bf804888c0480a",
            "cfe7d6c08b973d74",
            "291078668f656c38",
            "693856d17e139421",
            "6e74e3f6fe50f0f4",
            "d7cb686e295eb9ce",
            "b851dc944aae0069"
        ],
        "x": 34,
        "y": 1739
    },
    {
        "id": "70592e241de32532",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "79439506b1a6acc3",
            "c1e62858976a3769",
            "517b54151287feac",
            "d1d3234b068b85f6",
            "b3fc76dda4049346",
            "77c1c19ba436284e",
            "dcdc69295a6f5f76",
            "c00ecaddc6014250",
            "a93080aeaf3c5e79",
            "b10bca5a4658bf5c",
            "9ecb940b93d33cdf",
            "9b41e9467bf30ec0",
            "cff7a763597986a2",
            "6a9e30f65e495bca",
            "b9fe3a978a99d255",
            "306199d1b0477757",
            "d235074ffad9a339",
            "fb7182813481b720",
            "95d97aea64d77131",
            "60c34f98e1e26dba",
            "9434a0f72f5dcdb1",
            "40226ce37f97e01d",
            "071e0510fb46c738",
            "c08febe6a2ea67d1",
            "e65f384ee41cf598",
            "899982ab2aee5dab",
            "03d1c3ba697c94e4",
            "b19f1d350c2fabd7",
            "039d4dbe4e2b78e1",
            "fc30dfd1f0cc21cf",
            "3590ea7d7ffab34f",
            "a4a78451414d1f34",
            "b7d078ea7c3f821e",
            "73d41cef94786e51",
            "d74b12cee713ed7e",
            "a5d2df37afae85ec",
            "3156f4f0d86003a5",
            "8210bc989146b289",
            "5da121824d3a508a",
            "fa9015a8110bfeda",
            "099c81c6e9517cfb",
            "bf90850384938521",
            "8a84e81f560c21e0",
            "a5f50c3adfd68f30"
        ],
        "x": 2774,
        "y": 19,
        "w": 2172,
        "h": 702
    },
    {
        "id": "760cf0eee010fae5",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "309e371ea5373261",
            "b1f56dbf284db42e",
            "e6ded747053a525e",
            "18ef3063a91b0ba8",
            "3ab7a5e711325c2e",
            "c99ab709f0aeb3be",
            "edbf85be7b2663c8",
            "9b169584105c42ae",
            "3c8c2f3578771f8f",
            "100dd1dd8d73c3d6",
            "b6bbc5fd8357f0bb",
            "5526bcc863448d40",
            "0652b1ce7a1ae425",
            "d6f5acf9b6c7cbbd",
            "2776f1bd6caf4f04",
            "7a88a2c1bd9c33c1",
            "61562372903424fa",
            "b17f1329fe4eb1f6",
            "6305b62164d35915",
            "9b4223a62058e709",
            "b727df08d51ce066",
            "037034079127a2b0",
            "3585927da5c2d263",
            "f0a095a16bd8acb5",
            "01f9c38589ef10f1",
            "84b144a77fa389fe",
            "c7af44a4842f543f",
            "e52a6e51884177a5",
            "a10f8c330901fc44",
            "a5666c7649242d4f",
            "19f24296f18b84c4",
            "2bfbf1dbbfa6f0a6",
            "3a8f56f6eb310b3b",
            "2ba36142dd3baeab",
            "3837f6a169b6cd56",
            "a8e5f3f5a672fcf8",
            "ccad83bb76ebd6a9",
            "d2d3c9f3627c99b0",
            "e76f71d55ab65754",
            "ade580ca5b8b58f0",
            "ac6684d79d22ae33",
            "2d7feff547a33376",
            "b31412089034c789",
            "5264d7e2ca566dcf",
            "f57cc8249de60113",
            "177d8ca509d3e8da",
            "80287a3f8934bb43",
            "ea0b6d6475bef53a",
            "080dbc43c1b1c668",
            "84760a90b7ac38c7",
            "b9acca6b22c29ab1",
            "1ad87887b9330cad",
            "15f475f32ba820a2",
            "544c45314c1ead12",
            "163e77f08a68ed7e",
            "68b4c19da3cd9290",
            "3ab9beb02c6621f3",
            "58c8c6c012950093",
            "27c206d53df70f8d",
            "e9276d9ce84d5d22",
            "c2ad3e23c37606a8",
            "ac75047116a5c9de",
            "3f842e07c134f5bc",
            "6d95a3aed47bc361",
            "55ecdd8765548580",
            "2b84fd28a5fb4c36",
            "e7ed824ee232956c",
            "65c938305b84de19",
            "59fbdca9f4a1e0c6",
            "529a5066396a3e35",
            "25801c5089c5b1ce",
            "c202f860f300dd1c",
            "632af3e981c92951",
            "5359eaba19c58239",
            "1fd9ff0c92ddb561",
            "ee95a66edfc95802",
            "78756f98cc3c8f5c",
            "0e6c49b076b012bc",
            "395a1fe5558000fe",
            "616cdb8b4a91f8d0",
            "15055cf5c0c97871",
            "9531ac04bcd23625",
            "09ff067d6f4d65b7",
            "fd2a3ef97a49072e",
            "233a5c903ad58318",
            "9ab08412c6e74e58",
            "92d20d4da091f095",
            "4ddd0b8db61e74a2",
            "2253e279b393c8e5",
            "c98e11288469df69",
            "95a390cccc91bb4f",
            "7baa406586600e21",
            "7dfd882a19890d6c",
            "cefe53cbb9e1e213",
            "fc019687c92b6315",
            "1d9b742629050d78",
            "f6c30290139cc733",
            "45b5ae5b0e7f3f32",
            "2b7ac366f673910f",
            "66f0a0394b718051",
            "4a8f6d813f9bbf97",
            "a086fbebea3be518",
            "a779c9927e54a2e5",
            "7921f6a6311ffe60",
            "82878728d1ca889f",
            "5b676dccce7cc180",
            "864a66d89248da13",
            "f4ace34ae4baba5f",
            "6af3ccde3386b3a5",
            "b550b5e3643a081e",
            "56ce44966ecffab9",
            "b2be7fdf0830b5ac",
            "93e854174c788a2a",
            "4549fa812981801e",
            "554e8bba05d3b1d4",
            "c022faba4aae56dc",
            "32f3c5ef39f690c5",
            "a48296d1c2eee765",
            "c79e87694ef20557",
            "5713ed8acde2508f",
            "892578186178d380",
            "66f4e57cab3a54de",
            "f525a67cb53102dc",
            "84e3122bd7d94d3a",
            "92a1b526c8b8e651",
            "5752124f7c0d3f97",
            "80eeda88e946f498",
            "1dbea0024fdf969d",
            "4bea9a6f9c5d4bcd",
            "90e9360c28ab605c",
            "03d90c3c5d9a62ed",
            "beea7dabdd3b8661",
            "2b658bb77470155b",
            "31ef4fbb3bc35718",
            "eac559097244d2a7",
            "f5cf3fe9bbef9a7e",
            "41e4e173c28980d6",
            "5a8aa79393110ddd",
            "198c0eb1f776eb78",
            "f16f50ffa5e5acec",
            "ef823f960f974c3e",
            "1fdf309fe588d243",
            "cf8f491ae800493c",
            "c289d7a115bdf3fb",
            "4402e0e618574f5e",
            "7eb78ec4d5138153",
            "6d59e76b86be0a28",
            "8e421bd7fb91a283",
            "63edeb66626d8730",
            "e32fe70e08233950",
            "f9a5c6aa0d5f1f34",
            "83381a9440f7d473",
            "261b15e381f744a0",
            "f7c0c07f0f304c41",
            "d621e9465ea398a9",
            "d021957cd0b22183",
            "321f6e44d6ee13fa",
            "0861c7fe61c6e97e",
            "c48c4676e563826c",
            "af9c8519b05c1256",
            "6641b0ca1fa79c40",
            "4bfa9843befe2354",
            "602ee0125a53ecbc",
            "2973a2e9f4fdaaec",
            "e34666708236a0b2",
            "d028f35cdd094cdc",
            "8efb05d5a8158ef4",
            "03eefb5aab06decf",
            "a3c86839d53f05ed",
            "7f6b3e9b0dcd801d",
            "5e46214c6c8b4ad1",
            "5f829afab5a23b18",
            "27b9bf8332f35605",
            "335532f4665b13f3",
            "d2eaed159558c4a1",
            "3349a5b0860abb2c",
            "4f37728f34a31d94",
            "c62fb7bf6a40d9f7",
            "efaa861fcf7780df",
            "5d41aec97a8898b4",
            "fe59b8c4701a5213",
            "e25725d354b268fc",
            "96586ba7c7018640",
            "cc6c54cfb8954c4b",
            "877a44dd24e924c1",
            "69d627f7fb70d0d8",
            "af82125b0a5951e0",
            "87d9557dc8c8d386",
            "3fc93505fc164a58",
            "ce4ffc901a2768a2",
            "f975f0ca02f042d7",
            "fc9c4e5f3bec7d30",
            "760861ebeac0ea7a",
            "061ba122cc75dfe2",
            "7e20ef25a84e7025",
            "7e71a7d70b7c2843",
            "10f86b39506d14ad",
            "2e1c04a97ffec243",
            "38df7cb9fbec84fe",
            "8a10678b9b80319b",
            "9af59a3c970227de",
            "28a5b0dc0e856696",
            "efcd345f1308ba4c",
            "4253c18f63848489",
            "5e4a0bb75bf79d66",
            "6d0249cd813c006a",
            "3580d16a8bbd7c8f",
            "680eef63014783bd",
            "c485e9d42574985a",
            "b9a95d5903b771fb",
            "515b4e28efec9631",
            "125f6e9b9782fa0f",
            "e3afdabecfeaae99",
            "e536fc03ac4e3630",
            "a4ffb21e50c6ac22",
            "60a158e0a8e6881d",
            "794d86be1f167840",
            "0bfd7e5a3fc79cda",
            "ad8f6b08149b3f56",
            "268e17dc1e5ccfe6",
            "51030e7351e9c9b4",
            "c42a7599eccd1dc3",
            "79d9a91def69164b",
            "07defb8f1c691501",
            "3c9d5c86dd964b4c",
            "30b35ab770244a68",
            "f7084112be474de3",
            "e851b130bad134b6",
            "f0e56ce48b2963ce",
            "f3c31e45b921299e",
            "3d3486882a87c0e7",
            "1ecbe77e34c76305",
            "0e6ff6ed37dcca98",
            "bddb69069124ce54",
            "07f800f16a283fd2",
            "0bb4d49c38aa1e10",
            "d8164feaa301566a",
            "eef7f518d7f2cae2",
            "ea02d56dee4cb533",
            "022e727137b9ba68",
            "9a15b7619385df35",
            "73b6fa388b6cd3e7",
            "a17e05e6ac20b63f",
            "f4876d9ec4cc8a5f",
            "5e8df6073c539c38",
            "36a4e1c737f877d6",
            "0e914a89c710b8cd",
            "ea27e7384fa0b53f",
            "1b3888d8c3eacabf",
            "7af5741f6443a920",
            "26369ddcdabd3cf3",
            "4238f3f2469daba9",
            "9b366a6038c2ca09",
            "2ba09767fc893bb6",
            "bab0609bea1707c5",
            "c647b8d2dae95959",
            "839ac2acffaca9e8",
            "79a0341524a1a633",
            "b05fa90c1bfc46c7",
            "34654ee5b65b8c22",
            "073866f80c85c3e3",
            "0af18686a7b7dcd7",
            "dcf466f03f5477b0",
            "8a8772ec6df948b4",
            "43fa69ea62eb0aa5",
            "e38a9fd07b2fc80c",
            "974154b029cd8916",
            "422193937b3ea29f",
            "64294cfa1daf8f09",
            "444c48bacec16fa8",
            "8a71fb62beac5e53",
            "db9f5ba9bbd91c30",
            "694f94158c677cd6",
            "72f78fc2712029e8",
            "649205784033e081",
            "3d640d1a9087f153",
            "4112bea69fc78e5f",
            "73f2233f11e04a87",
            "82a83f4a48030b23",
            "37a523ac432e0d6b",
            "96a583357f096554",
            "9e937f47df2abe53",
            "122bca42c0dad41f",
            "d3d9847c7a50a19d",
            "0bd567f1fc88482e",
            "b3e761c2effb7f3d",
            "d266b35bbc25032f",
            "084617eda1b22a5b",
            "c9d917bc3167530b"
        ],
        "x": 1544,
        "y": 2784,
        "w": 3442,
        "h": 1697
    },
    {
        "id": "0b9482d917fa354c",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4952dd022abb75ad",
            "0a8ed61e867f56ed",
            "f5ad7a146a77eea2",
            "9059f5fd97c87d09",
            "a63ee866d1d3340b",
            "4eceb11fa41fb864",
            "ed9e10d9c22c547c",
            "12e8cfd55bd6f932",
            "df6da89a12f26db4",
            "4ea21dda80af99ec",
            "a41742725ab5987b",
            "fbe9023f2366e5bb",
            "2afb31f338f918e7",
            "38374f02c85e3efa",
            "c0eed8ccb5e34a3c",
            "b49c91e11fc35baa",
            "cb8d00cf3af12820",
            "a94da27ee4dd7d33",
            "e0e063d64010d657",
            "464136f77820a240",
            "036712fa2b497dae",
            "34b0b3a03033e594",
            "35ef6d9691bad31b",
            "ce1b26d50834a0ff"
        ],
        "x": 14,
        "y": 2759,
        "w": 1032,
        "h": 462
    },
    {
        "id": "6cedbe20f6116441",
        "type": "group",
        "z": "6c2dfeb262f54a31",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e92d85f0a4cc45e0",
            "051a2227bc7c22da",
            "6faf52c7c703e7f7"
        ],
        "x": 74,
        "y": 139,
        "w": 382,
        "h": 142
    },
    {
        "id": "9a043224f1e79f2a",
        "type": "junction",
        "z": "9d61395e.8839f8",
        "x": 640,
        "y": 780,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "dde9d9bfd0ec2a3e",
        "type": "junction",
        "z": "9d61395e.8839f8",
        "x": 840,
        "y": 420,
        "wires": [
            [
                "a1387674cb6e8ae5",
                "ad86ee7a847580f6"
            ]
        ]
    },
    {
        "id": "91e8f1a1d18f8bfa",
        "type": "junction",
        "z": "9d61395e.8839f8",
        "x": 1800,
        "y": 420,
        "wires": [
            [
                "162e1dce9af55f43"
            ]
        ]
    },
    {
        "id": "9d6c93586cba78c9",
        "type": "junction",
        "z": "9d61395e.8839f8",
        "x": 1700,
        "y": 1080,
        "wires": [
            [
                "20a37dd7cb985d7b"
            ]
        ]
    },
    {
        "id": "c23a481b84c0659b",
        "type": "junction",
        "z": "9d61395e.8839f8",
        "x": 520,
        "y": 1040,
        "wires": [
            [
                "3847a9f8f48d1d61"
            ]
        ]
    },
    {
        "id": "8fbf19989e9ada84",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "x": 1320,
        "y": 1220,
        "wires": [
            [
                "ae1be5dc38f60c0b",
                "ec0a5242c10cd615"
            ]
        ]
    },
    {
        "id": "113479bbc86295a4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 320,
        "y": 1460,
        "wires": [
            [
                "486fec372f572af9"
            ]
        ]
    },
    {
        "id": "872ae3d460dd78b6",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "x": 1530,
        "y": 920,
        "wires": [
            [
                "6086a09a605eaa1d"
            ]
        ]
    },
    {
        "id": "30b771718c579dd1",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 1440,
        "y": 1420,
        "wires": [
            [
                "8dfa706e5138ec4d"
            ]
        ]
    },
    {
        "id": "486fec372f572af9",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "23281f6c705311eb"
            ]
        ]
    },
    {
        "id": "a513364e1951fda6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "x": 340,
        "y": 1400,
        "wires": [
            [
                "ce067e37168e1d33"
            ]
        ]
    },
    {
        "id": "b84e5668733433cb",
        "type": "junction",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "x": 480,
        "y": 1580,
        "wires": [
            [
                "c519c9bb07743518"
            ]
        ]
    },
    {
        "id": "97d64d656ed62a0b",
        "type": "junction",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "x": 420,
        "y": 1580,
        "wires": [
            [
                "b84e5668733433cb"
            ]
        ]
    },
    {
        "id": "09a21d2c08dd04bf",
        "type": "junction",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "x": 440,
        "y": 1500,
        "wires": [
            [
                "dc3acc2a853dcfc1"
            ]
        ]
    },
    {
        "id": "9f962157dbb6d25e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 3640,
        "y": 4960,
        "wires": [
            [
                "25752892c649c6ef"
            ]
        ]
    },
    {
        "id": "25752892c649c6ef",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 3940,
        "y": 4960,
        "wires": [
            [
                "fcb4484315826ecd"
            ]
        ]
    },
    {
        "id": "413d54f4b5d93ff2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 3880,
        "y": 4700,
        "wires": [
            [
                "5a1aa2cf708531e2"
            ]
        ]
    },
    {
        "id": "7193f4f49117ee08",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 4280,
        "y": 4700,
        "wires": [
            [
                "2bbb7773229710e0"
            ]
        ]
    },
    {
        "id": "da75d8cd36b0d376",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 4580,
        "y": 4900,
        "wires": [
            [
                "14d5ef8a8368fcf9"
            ]
        ]
    },
    {
        "id": "5276a44f13b2ac4a",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 4600,
        "y": 4760,
        "wires": [
            [
                "14d5ef8a8368fcf9"
            ]
        ]
    },
    {
        "id": "79f57fb83796d203",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "x": 3280,
        "y": 4900,
        "wires": [
            [
                "2f58cbe080870585"
            ]
        ]
    },
    {
        "id": "f975f0ca02f042d7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3240,
        "wires": [
            [
                "2ba09767fc893bb6"
            ]
        ]
    },
    {
        "id": "2ba09767fc893bb6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3240,
        "wires": [
            [
                "0e6ff6ed37dcca98"
            ]
        ]
    },
    {
        "id": "839ac2acffaca9e8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3300,
        "wires": [
            [
                "07f800f16a283fd2"
            ]
        ]
    },
    {
        "id": "e3afdabecfeaae99",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3300,
        "wires": [
            [
                "839ac2acffaca9e8"
            ]
        ]
    },
    {
        "id": "79a0341524a1a633",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3360,
        "wires": [
            [
                "0bb4d49c38aa1e10"
            ]
        ]
    },
    {
        "id": "e536fc03ac4e3630",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3360,
        "wires": [
            [
                "79a0341524a1a633"
            ]
        ]
    },
    {
        "id": "b05fa90c1bfc46c7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3420,
        "wires": [
            [
                "d8164feaa301566a"
            ]
        ]
    },
    {
        "id": "a4ffb21e50c6ac22",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3420,
        "wires": [
            [
                "b05fa90c1bfc46c7"
            ]
        ]
    },
    {
        "id": "34654ee5b65b8c22",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3480,
        "wires": [
            [
                "eef7f518d7f2cae2"
            ]
        ]
    },
    {
        "id": "60a158e0a8e6881d",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3480,
        "wires": [
            [
                "34654ee5b65b8c22"
            ]
        ]
    },
    {
        "id": "073866f80c85c3e3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3540,
        "wires": [
            [
                "ea02d56dee4cb533"
            ]
        ]
    },
    {
        "id": "794d86be1f167840",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3540,
        "wires": [
            [
                "073866f80c85c3e3"
            ]
        ]
    },
    {
        "id": "0af18686a7b7dcd7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3600,
        "wires": [
            [
                "022e727137b9ba68"
            ]
        ]
    },
    {
        "id": "0bfd7e5a3fc79cda",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3600,
        "wires": [
            [
                "0af18686a7b7dcd7"
            ]
        ]
    },
    {
        "id": "dcf466f03f5477b0",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3660,
        "wires": [
            [
                "9a15b7619385df35"
            ]
        ]
    },
    {
        "id": "ad8f6b08149b3f56",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3660,
        "wires": [
            [
                "dcf466f03f5477b0"
            ]
        ]
    },
    {
        "id": "8a8772ec6df948b4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3720,
        "wires": [
            [
                "73b6fa388b6cd3e7"
            ]
        ]
    },
    {
        "id": "268e17dc1e5ccfe6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3720,
        "wires": [
            [
                "8a8772ec6df948b4"
            ]
        ]
    },
    {
        "id": "43fa69ea62eb0aa5",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3780,
        "wires": [
            [
                "a17e05e6ac20b63f"
            ]
        ]
    },
    {
        "id": "51030e7351e9c9b4",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3780,
        "wires": [
            [
                "43fa69ea62eb0aa5"
            ]
        ]
    },
    {
        "id": "e38a9fd07b2fc80c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3880,
        "wires": [
            [
                "f4876d9ec4cc8a5f"
            ]
        ]
    },
    {
        "id": "c42a7599eccd1dc3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3880,
        "wires": [
            [
                "e38a9fd07b2fc80c"
            ]
        ]
    },
    {
        "id": "974154b029cd8916",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 3940,
        "wires": [
            [
                "5e8df6073c539c38"
            ]
        ]
    },
    {
        "id": "79d9a91def69164b",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 3940,
        "wires": [
            [
                "974154b029cd8916"
            ]
        ]
    },
    {
        "id": "422193937b3ea29f",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4000,
        "wires": [
            [
                "36a4e1c737f877d6"
            ]
        ]
    },
    {
        "id": "07defb8f1c691501",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4000,
        "wires": [
            [
                "422193937b3ea29f"
            ]
        ]
    },
    {
        "id": "64294cfa1daf8f09",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4060,
        "wires": [
            [
                "0e914a89c710b8cd"
            ]
        ]
    },
    {
        "id": "3c9d5c86dd964b4c",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4060,
        "wires": [
            [
                "64294cfa1daf8f09"
            ]
        ]
    },
    {
        "id": "444c48bacec16fa8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4120,
        "wires": [
            [
                "ea27e7384fa0b53f"
            ]
        ]
    },
    {
        "id": "30b35ab770244a68",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4120,
        "wires": [
            [
                "444c48bacec16fa8"
            ]
        ]
    },
    {
        "id": "8a71fb62beac5e53",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4180,
        "wires": [
            [
                "1b3888d8c3eacabf"
            ]
        ]
    },
    {
        "id": "f7084112be474de3",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4180,
        "wires": [
            [
                "8a71fb62beac5e53"
            ]
        ]
    },
    {
        "id": "db9f5ba9bbd91c30",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4240,
        "wires": [
            [
                "7af5741f6443a920"
            ]
        ]
    },
    {
        "id": "e851b130bad134b6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4240,
        "wires": [
            [
                "db9f5ba9bbd91c30"
            ]
        ]
    },
    {
        "id": "694f94158c677cd6",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4300,
        "wires": [
            [
                "26369ddcdabd3cf3"
            ]
        ]
    },
    {
        "id": "f0e56ce48b2963ce",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4300,
        "wires": [
            [
                "694f94158c677cd6"
            ]
        ]
    },
    {
        "id": "72f78fc2712029e8",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4360,
        "wires": [
            [
                "4238f3f2469daba9"
            ]
        ]
    },
    {
        "id": "f3c31e45b921299e",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4360,
        "wires": [
            [
                "72f78fc2712029e8"
            ]
        ]
    },
    {
        "id": "649205784033e081",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3640,
        "y": 4420,
        "wires": [
            [
                "9b366a6038c2ca09"
            ]
        ]
    },
    {
        "id": "3d3486882a87c0e7",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "x": 3580,
        "y": 4420,
        "wires": [
            [
                "649205784033e081"
            ]
        ]
    },
    {
        "id": "cff7a763597986a2",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "x": 3980,
        "y": 640,
        "wires": [
            [
                "517b54151287feac"
            ]
        ]
    },
    {
        "id": "60c34f98e1e26dba",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "x": 3420,
        "y": 640,
        "wires": [
            [
                "cff7a763597986a2",
                "a4a78451414d1f34"
            ]
        ]
    },
    {
        "id": "c08febe6a2ea67d1",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "x": 4420,
        "y": 240,
        "wires": [
            [
                "a5d2df37afae85ec"
            ]
        ]
    },
    {
        "id": "8210bc989146b289",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "x": 3100,
        "y": 640,
        "wires": [
            [
                "3590ea7d7ffab34f"
            ]
        ]
    },
    {
        "id": "4b4e2f01c9257cc0",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1960,
        "y": 1940,
        "wires": [
            [
                "31e3351497920e04"
            ]
        ]
    },
    {
        "id": "6734f2d9539c62ce",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 840,
        "y": 2000,
        "wires": [
            [
                "7ce425fd6f0879fc"
            ]
        ]
    },
    {
        "id": "7ce425fd6f0879fc",
        "type": "junction",
        "z": "90f171682dfc3f42",
        "x": 1400,
        "y": 2000,
        "wires": [
            [
                "20eb7ca2f9e89045",
                "acb1cef1e87b991e"
            ]
        ]
    },
    {
        "id": "e70117d17e776031",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 880,
        "y": 4740,
        "wires": [
            [
                "66599bbdc0cbe8eb"
            ]
        ]
    },
    {
        "id": "66599bbdc0cbe8eb",
        "type": "junction",
        "z": "6c2dfeb262f54a31",
        "x": 1180,
        "y": 4740,
        "wires": [
            [
                "d56be15d3b11433f"
            ]
        ]
    },
    {
        "id": "aca8e25181d21be7",
        "type": "modbus-client",
        "name": "WorkshopPLC",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "54dde46e.53267c",
        "type": "modbus-client",
        "name": "local",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.101.251",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "b7548bf37471dcfe",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#3981b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3987b8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#3987b8",
                    "value": "#3987b8",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#363636",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#6caad1",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#f7effb",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#3987b8",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f8bf0aa358206776",
        "type": "ui_tab",
        "name": "Modbus",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f743a2bb7d3e825e",
        "type": "ui_group",
        "name": "Control",
        "tab": "f8bf0aa358206776",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e6fc6bb3d2df4abd",
        "type": "ui_group",
        "name": "Display",
        "tab": "f8bf0aa358206776",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a649fab2.daf3d8",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "75e4e587.f4c0ac",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "75e4e587.f4c0ac",
        "type": "ui_tab",
        "name": "Files",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad6dcc65156dd01c",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "50a66416164a879c",
        "type": "ui_tab",
        "name": "Test",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1b8e2c970a49e110",
        "type": "ui_group",
        "d": true,
        "name": "Control",
        "tab": "50a66416164a879c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8bb4869336244573",
        "type": "ui_group",
        "d": true,
        "name": "Display",
        "tab": "50a66416164a879c",
        "order": 2,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7b22ef26c4fd9ba",
        "type": "ui_tab",
        "name": "Workshop PLC",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3d695ddc4ae8ac52",
        "type": "ui_group",
        "name": "Control",
        "tab": "e7b22ef26c4fd9ba",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f328fb03c98744c",
        "type": "ui_group",
        "name": "Graph",
        "tab": "e7b22ef26c4fd9ba",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "923b03fe8d0c014b",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "1b8e2c970a49e110",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "5188a4cc66916299",
        "type": "ui_group",
        "z": "3bab716a8a493dbf",
        "name": "Humidity",
        "tab": "e078c6b.429dd38",
        "order": 3,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1b078c3d9f60dd3",
        "type": "ui_group",
        "z": "2197f9b20e245122",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78467dade0c57cfb",
        "type": "ui_group",
        "z": "2197f9b20e245122",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e078c6b.429dd38",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "fingerprint",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "210b3638edc51bb5",
        "type": "ui_group",
        "name": "Table",
        "tab": "e078c6b.429dd38",
        "order": 4,
        "disp": true,
        "width": "19",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c1e6de0d4d0c97f8",
        "type": "ui_group",
        "name": "Heading",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": false,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7fcbba22c7457906",
        "type": "ui_spacer",
        "z": "9b30030f667a40d7",
        "name": "spacer",
        "group": "c1e6de0d4d0c97f8",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "221aaafd01c2d7fb",
        "type": "ui_spacer",
        "z": "9b30030f667a40d7",
        "name": "spacer",
        "group": "c1e6de0d4d0c97f8",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "MSSQL",
        "server": "GIOVANNI\\SQLEXPRESS",
        "encyption": false,
        "database": "NodeRed"
    },
    {
        "id": "712b53e5.990dfc",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "usetls": false,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8eaf36042374305d",
        "type": "ui_tab",
        "name": "Recipes",
        "icon": "accessible",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0465010f96f3dad5",
        "type": "ui_group",
        "name": "Test Name",
        "tab": "8eaf36042374305d",
        "order": 1,
        "disp": true,
        "width": 29,
        "collapse": false,
        "className": ""
    },
    {
        "id": "53037fcbd25f4f9d",
        "type": "ui_group",
        "name": "Parameter Names 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5fcb0776.c461c8",
        "type": "ui_group",
        "name": "Control",
        "tab": "7dfaf7ff.8d5ae",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "fc657953.1b728",
        "type": "ui_group",
        "name": "admin1",
        "tab": "7dfaf7ff.8d5ae",
        "order": 3,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "7f74a584.dea814",
        "type": "ui_group",
        "name": "admin2",
        "tab": "7dfaf7ff.8d5ae",
        "order": 4,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "f033628c.9c7ce",
        "type": "ui_group",
        "name": "Change Tabs",
        "tab": "7dfaf7ff.8d5ae",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7dfaf7ff.8d5ae",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f24d9462b2c2f4ce",
        "type": "ui_group",
        "name": "Parameter Values 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "218e00eac196634f",
        "type": "ui_group",
        "name": "Basic Tests",
        "tab": "8eaf36042374305d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "422e58defd5a9006",
        "type": "ui_group",
        "name": "Parameter Names 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 8,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d53c3b4207d65609",
        "type": "ui_group",
        "name": "Parameter Values 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 9,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad102eceaed0af1f",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Names 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e2096695d7852db",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Values 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 13,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad3c4128defb0956",
        "type": "ui_group",
        "name": "Parameter Instructions 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d0276f15a55c5b4",
        "type": "ui_group",
        "name": "Parameter Instructions 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 10,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0106dea0f6c9ae8",
        "type": "ui_group",
        "d": true,
        "name": "Parameter Instructions 21 - 30",
        "tab": "8eaf36042374305d",
        "order": 14,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "49dde31fc8e43fb9",
        "type": "ui_tab",
        "name": "Registration",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "41add6d3ba5596df",
        "type": "ui_group",
        "name": "Login",
        "tab": "49dde31fc8e43fb9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "login"
    },
    {
        "id": "37cb5eb849cdba88",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ba12de27dc123ba",
        "type": "ui_group",
        "name": "Registration",
        "tab": "37cb5eb849cdba88",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e76e570168f2dca",
        "type": "ui_group",
        "name": "Update Password",
        "tab": "37cb5eb849cdba88",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a5680e46e5f9771",
        "type": "ui_group",
        "name": "User database",
        "tab": "37cb5eb849cdba88",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f808231901c3caf8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "93c16b2960c7118e",
        "type": "ui_group",
        "z": "c7f701c7168b803a",
        "name": "Humidity",
        "tab": "e078c6b.429dd38",
        "order": 3,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "12f4f83a3e9bbadc",
        "type": "ui_group",
        "z": "61787a96e3740b32",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "63bd7a9185936c92",
        "type": "ui_group",
        "z": "61787a96e3740b32",
        "name": "Temperature",
        "tab": "e078c6b.429dd38",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "778aba04212433f7",
        "type": "ui_group",
        "name": "Stop On Fail 1 - 10",
        "tab": "8eaf36042374305d",
        "order": 7,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b4b99bf40ea5d2e",
        "type": "ui_group",
        "name": "Stop On Fail 11 - 20",
        "tab": "8eaf36042374305d",
        "order": 11,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "05bf051581f2da76",
        "type": "ftp",
        "host": "192.168.101.251",
        "port": "21",
        "secureOptions": "",
        "user": "user",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "7415190bef9e3adb",
        "type": "ftp",
        "host": "192.168.1.7",
        "port": "",
        "secureOptions": "",
        "user": "ateka1",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "da9fe7a69397cf03",
        "type": "modbus-client",
        "name": "Defy Panel 1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.6",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "51ce6aa1.620754",
        "type": "ui_group",
        "name": "ui_control",
        "tab": "3b08fac0.8f06b6",
        "order": 1,
        "disp": true,
        "width": "22",
        "collapse": false
    },
    {
        "id": "3b08fac0.8f06b6",
        "type": "ui_tab",
        "name": "Home",
        "icon": "track_changes",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "571a38b1.5e3638",
        "type": "ui_group",
        "name": "Richer Table",
        "tab": "29ec6908.552b36",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "29ec6908.552b36",
        "type": "ui_tab",
        "name": "Home",
        "icon": "track_changes",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a5ff21f0e205051c",
        "type": "ui_spacer",
        "z": "90f171682dfc3f42",
        "name": "spacer",
        "group": "9a5680e46e5f9771",
        "order": 3,
        "width": "",
        "height": ""
    },
    {
        "id": "941f87740df6aa34",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "e2f7a7441fa038c4",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "1b91692fe65ea5b2",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "902714c1148197bd",
        "type": "ui_spacer",
        "z": "6c2dfeb262f54a31",
        "name": "spacer",
        "group": "0465010f96f3dad5",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "37193b5976b8907d",
        "type": "ui_gauge",
        "z": "3bab716a8a493dbf",
        "name": "Humid Gauge",
        "group": "5188a4cc66916299",
        "order": 1,
        "width": 9,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": "60",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "92",
        "className": "",
        "x": 440,
        "y": 260,
        "wires": []
    },
    {
        "id": "8343c4742146fe3f",
        "type": "ui_chart",
        "z": "3bab716a8a493dbf",
        "name": "Humidity Chart",
        "group": "5188a4cc66916299",
        "order": 2,
        "width": 10,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b8f1f2881f690446",
        "type": "ui_gauge",
        "z": "2197f9b20e245122",
        "name": "TempGauge",
        "group": "78467dade0c57cfb",
        "order": 1,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "C",
        "format": "{{value | number:1}}",
        "min": "40",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "56",
        "className": "",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "b7cc2d5e27f8b491",
        "type": "ui_chart",
        "z": "2197f9b20e245122",
        "name": "Temp Chart",
        "group": "78467dade0c57cfb",
        "order": 2,
        "width": 11,
        "height": 4,
        "label": "Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "chart",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "decd3404fa48ec62",
        "type": "ui_gauge",
        "z": "c7f701c7168b803a",
        "name": "Humid Gauge",
        "group": "93c16b2960c7118e",
        "order": 1,
        "width": 9,
        "height": 4,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": "60",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "92",
        "className": "",
        "x": 440,
        "y": 260,
        "wires": []
    },
    {
        "id": "190d4f9e06f71b90",
        "type": "ui_chart",
        "z": "c7f701c7168b803a",
        "name": "Humidity Chart",
        "group": "93c16b2960c7118e",
        "order": 2,
        "width": 10,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a0e5a87e15d32bb8",
        "type": "ui_gauge",
        "z": "61787a96e3740b32",
        "name": "TempGauge",
        "group": "63bd7a9185936c92",
        "order": 1,
        "width": 8,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "C",
        "format": "{{value | number:1}}",
        "min": "40",
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "56",
        "className": "",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "8f05bbe874f46dfc",
        "type": "ui_chart",
        "z": "61787a96e3740b32",
        "name": "Temp Chart",
        "group": "63bd7a9185936c92",
        "order": 2,
        "width": 11,
        "height": 4,
        "label": "Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "20",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "chart",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0d9323d2167a831c",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "name": "Recipes",
        "info": "",
        "x": 100,
        "y": 720,
        "wires": []
    },
    {
        "id": "6af32e127a95b37c",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "e4bfc074446708e2",
        "group": "0465010f96f3dad5",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "User",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 330,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b550b5e3643a081e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 1: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3260,
        "wires": [
            [
                "a5666c7649242d4f"
            ]
        ]
    },
    {
        "id": "93e854174c788a2a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 2: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3320,
        "wires": [
            [
                "beea7dabdd3b8661"
            ]
        ]
    },
    {
        "id": "4549fa812981801e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 3: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3380,
        "wires": [
            [
                "2b658bb77470155b"
            ]
        ]
    },
    {
        "id": "554e8bba05d3b1d4",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 4: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3440,
        "wires": [
            [
                "31ef4fbb3bc35718"
            ]
        ]
    },
    {
        "id": "c022faba4aae56dc",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 5: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3500,
        "wires": [
            [
                "eac559097244d2a7"
            ]
        ]
    },
    {
        "id": "3ab7a5e711325c2e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3260,
        "wires": [
            [
                "b1f56dbf284db42e"
            ]
        ]
    },
    {
        "id": "2bfbf1dbbfa6f0a6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3320,
        "wires": [
            [
                "25801c5089c5b1ce"
            ]
        ]
    },
    {
        "id": "3a8f56f6eb310b3b",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3380,
        "wires": [
            [
                "632af3e981c92951"
            ]
        ]
    },
    {
        "id": "2ba36142dd3baeab",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3440,
        "wires": [
            [
                "1fd9ff0c92ddb561"
            ]
        ]
    },
    {
        "id": "3837f6a169b6cd56",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3500,
        "wires": [
            [
                "78756f98cc3c8f5c"
            ]
        ]
    },
    {
        "id": "ec0a5242c10cd615",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "After Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1160,
        "wires": []
    },
    {
        "id": "32f3c5ef39f690c5",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 7: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3620,
        "wires": [
            [
                "41e4e173c28980d6"
            ]
        ]
    },
    {
        "id": "a48296d1c2eee765",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 8: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par08",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3680,
        "wires": [
            [
                "5a8aa79393110ddd"
            ]
        ]
    },
    {
        "id": "c79e87694ef20557",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 9: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par09",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3740,
        "wires": [
            [
                "198c0eb1f776eb78"
            ]
        ]
    },
    {
        "id": "5713ed8acde2508f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 10: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par10",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 3800,
        "wires": [
            [
                "f16f50ffa5e5acec"
            ]
        ]
    },
    {
        "id": "892578186178d380",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 6: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2130,
        "y": 3560,
        "wires": [
            [
                "f5cf3fe9bbef9a7e"
            ]
        ]
    },
    {
        "id": "a8e5f3f5a672fcf8",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3560,
        "wires": [
            [
                "395a1fe5558000fe"
            ]
        ]
    },
    {
        "id": "ccad83bb76ebd6a9",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3620,
        "wires": [
            [
                "15055cf5c0c97871"
            ]
        ]
    },
    {
        "id": "d2d3c9f3627c99b0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par08",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3680,
        "wires": [
            [
                "09ff067d6f4d65b7"
            ]
        ]
    },
    {
        "id": "e76f71d55ab65754",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par09",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3740,
        "wires": [
            [
                "233a5c903ad58318"
            ]
        ]
    },
    {
        "id": "ade580ca5b8b58f0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": " Upper Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 19,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par10",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3800,
        "wires": [
            [
                "92d20d4da091f095"
            ]
        ]
    },
    {
        "id": "66f4e57cab3a54de",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 11: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par11",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 3900,
        "wires": [
            [
                "ef823f960f974c3e"
            ]
        ]
    },
    {
        "id": "f525a67cb53102dc",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 12: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par12",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 3960,
        "wires": [
            [
                "1fdf309fe588d243"
            ]
        ]
    },
    {
        "id": "84e3122bd7d94d3a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 13: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par13",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4020,
        "wires": [
            [
                "cf8f491ae800493c"
            ]
        ]
    },
    {
        "id": "92a1b526c8b8e651",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 14: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par14",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4080,
        "wires": [
            [
                "c289d7a115bdf3fb"
            ]
        ]
    },
    {
        "id": "5752124f7c0d3f97",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 15: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par15",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4140,
        "wires": [
            [
                "4402e0e618574f5e"
            ]
        ]
    },
    {
        "id": "80eeda88e946f498",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 16: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par16",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4200,
        "wires": [
            [
                "7eb78ec4d5138153"
            ]
        ]
    },
    {
        "id": "1dbea0024fdf969d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 17: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par17",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4260,
        "wires": [
            [
                "6d59e76b86be0a28"
            ]
        ]
    },
    {
        "id": "4bea9a6f9c5d4bcd",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 18: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par18",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4320,
        "wires": [
            [
                "8e421bd7fb91a283"
            ]
        ]
    },
    {
        "id": "90e9360c28ab605c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 19: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par19",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4380,
        "wires": [
            [
                "63edeb66626d8730"
            ]
        ]
    },
    {
        "id": "03d90c3c5d9a62ed",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 20: Name",
        "tooltip": "",
        "group": "422e58defd5a9006",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par20",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2120,
        "y": 4440,
        "wires": [
            [
                "e32fe70e08233950"
            ]
        ]
    },
    {
        "id": "ac6684d79d22ae33",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par11",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3900,
        "wires": [
            [
                "2253e279b393c8e5"
            ]
        ]
    },
    {
        "id": "2d7feff547a33376",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par12",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 3960,
        "wires": [
            [
                "95a390cccc91bb4f"
            ]
        ]
    },
    {
        "id": "b31412089034c789",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par13",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4020,
        "wires": [
            [
                "7dfd882a19890d6c"
            ]
        ]
    },
    {
        "id": "5264d7e2ca566dcf",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par14",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4080,
        "wires": [
            [
                "fc019687c92b6315"
            ]
        ]
    },
    {
        "id": "f57cc8249de60113",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par15",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4140,
        "wires": [
            [
                "f6c30290139cc733"
            ]
        ]
    },
    {
        "id": "177d8ca509d3e8da",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par16",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4200,
        "wires": [
            [
                "2b7ac366f673910f"
            ]
        ]
    },
    {
        "id": "80287a3f8934bb43",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par17",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4260,
        "wires": [
            [
                "4a8f6d813f9bbf97"
            ]
        ]
    },
    {
        "id": "ea0b6d6475bef53a",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par18",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4320,
        "wires": [
            [
                "a779c9927e54a2e5"
            ]
        ]
    },
    {
        "id": "080dbc43c1b1c668",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par19",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4380,
        "wires": [
            [
                "82878728d1ca889f"
            ]
        ]
    },
    {
        "id": "84760a90b7ac38c7",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Upper Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 19,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par20",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2470,
        "y": 4440,
        "wires": [
            [
                "864a66d89248da13"
            ]
        ]
    },
    {
        "id": "bab0609bea1707c5",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Par01",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par02",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par03",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par05",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par06",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par07",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par08",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par09",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par15",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par17",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par18",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par19",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par20",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 20,
        "x": 1670,
        "y": 3540,
        "wires": [
            [
                "fc9c4e5f3bec7d30"
            ],
            [
                "061ba122cc75dfe2"
            ],
            [
                "7e20ef25a84e7025"
            ],
            [
                "7e71a7d70b7c2843"
            ],
            [
                "10f86b39506d14ad"
            ],
            [
                "28a5b0dc0e856696"
            ],
            [
                "2e1c04a97ffec243"
            ],
            [
                "38df7cb9fbec84fe"
            ],
            [
                "8a10678b9b80319b"
            ],
            [
                "9af59a3c970227de"
            ],
            [
                "efcd345f1308ba4c"
            ],
            [
                "4253c18f63848489"
            ],
            [
                "5e4a0bb75bf79d66"
            ],
            [
                "6d0249cd813c006a"
            ],
            [
                "3580d16a8bbd7c8f"
            ],
            [
                "680eef63014783bd"
            ],
            [
                "c485e9d42574985a"
            ],
            [
                "b9a95d5903b771fb"
            ],
            [
                "515b4e28efec9631"
            ],
            [
                "125f6e9b9782fa0f"
            ]
        ]
    },
    {
        "id": "b9156f78ebf3843b",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "write settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1790,
        "y": 1220,
        "wires": [
            [
                "9ff3e803ce53cc13"
            ]
        ]
    },
    {
        "id": "fc9c4e5f3bec7d30",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3260,
        "wires": [
            [
                "b550b5e3643a081e",
                "c647b8d2dae95959"
            ]
        ]
    },
    {
        "id": "a5666c7649242d4f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3260,
        "wires": [
            [
                "3ab7a5e711325c2e",
                "56ce44966ecffab9"
            ]
        ]
    },
    {
        "id": "061ba122cc75dfe2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3320,
        "wires": [
            [
                "93e854174c788a2a"
            ]
        ]
    },
    {
        "id": "7e20ef25a84e7025",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3380,
        "wires": [
            [
                "4549fa812981801e"
            ]
        ]
    },
    {
        "id": "7e71a7d70b7c2843",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3440,
        "wires": [
            [
                "554e8bba05d3b1d4"
            ]
        ]
    },
    {
        "id": "10f86b39506d14ad",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3500,
        "wires": [
            [
                "c022faba4aae56dc"
            ]
        ]
    },
    {
        "id": "28a5b0dc0e856696",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3560,
        "wires": [
            [
                "892578186178d380"
            ]
        ]
    },
    {
        "id": "2e1c04a97ffec243",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3620,
        "wires": [
            [
                "32f3c5ef39f690c5"
            ]
        ]
    },
    {
        "id": "38df7cb9fbec84fe",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3680,
        "wires": [
            [
                "a48296d1c2eee765"
            ]
        ]
    },
    {
        "id": "8a10678b9b80319b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3740,
        "wires": [
            [
                "c79e87694ef20557"
            ]
        ]
    },
    {
        "id": "9af59a3c970227de",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3800,
        "wires": [
            [
                "5713ed8acde2508f"
            ]
        ]
    },
    {
        "id": "efcd345f1308ba4c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3900,
        "wires": [
            [
                "66f4e57cab3a54de"
            ]
        ]
    },
    {
        "id": "4253c18f63848489",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 3960,
        "wires": [
            [
                "f525a67cb53102dc"
            ]
        ]
    },
    {
        "id": "5e4a0bb75bf79d66",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4020,
        "wires": [
            [
                "84e3122bd7d94d3a"
            ]
        ]
    },
    {
        "id": "6d0249cd813c006a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4080,
        "wires": [
            [
                "92a1b526c8b8e651"
            ]
        ]
    },
    {
        "id": "3580d16a8bbd7c8f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4140,
        "wires": [
            [
                "5752124f7c0d3f97"
            ]
        ]
    },
    {
        "id": "680eef63014783bd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4200,
        "wires": [
            [
                "80eeda88e946f498"
            ]
        ]
    },
    {
        "id": "c485e9d42574985a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4260,
        "wires": [
            [
                "1dbea0024fdf969d"
            ]
        ]
    },
    {
        "id": "b9a95d5903b771fb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4320,
        "wires": [
            [
                "4bea9a6f9c5d4bcd"
            ]
        ]
    },
    {
        "id": "515b4e28efec9631",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4380,
        "wires": [
            [
                "90e9360c28ab605c"
            ]
        ]
    },
    {
        "id": "125f6e9b9782fa0f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 4440,
        "wires": [
            [
                "03d90c3c5d9a62ed"
            ]
        ]
    },
    {
        "id": "beea7dabdd3b8661",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3320,
        "wires": [
            [
                "2bfbf1dbbfa6f0a6"
            ]
        ]
    },
    {
        "id": "2b658bb77470155b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3380,
        "wires": [
            [
                "3a8f56f6eb310b3b"
            ]
        ]
    },
    {
        "id": "31ef4fbb3bc35718",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3440,
        "wires": [
            [
                "2ba36142dd3baeab"
            ]
        ]
    },
    {
        "id": "eac559097244d2a7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3500,
        "wires": [
            [
                "3837f6a169b6cd56"
            ]
        ]
    },
    {
        "id": "f5cf3fe9bbef9a7e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3560,
        "wires": [
            [
                "a8e5f3f5a672fcf8"
            ]
        ]
    },
    {
        "id": "41e4e173c28980d6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3620,
        "wires": [
            [
                "ccad83bb76ebd6a9"
            ]
        ]
    },
    {
        "id": "5a8aa79393110ddd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3680,
        "wires": [
            [
                "d2d3c9f3627c99b0"
            ]
        ]
    },
    {
        "id": "198c0eb1f776eb78",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3740,
        "wires": [
            [
                "e76f71d55ab65754"
            ]
        ]
    },
    {
        "id": "f16f50ffa5e5acec",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3800,
        "wires": [
            [
                "ade580ca5b8b58f0"
            ]
        ]
    },
    {
        "id": "ef823f960f974c3e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3900,
        "wires": [
            [
                "ac6684d79d22ae33"
            ]
        ]
    },
    {
        "id": "1fdf309fe588d243",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3960,
        "wires": [
            [
                "2d7feff547a33376"
            ]
        ]
    },
    {
        "id": "cf8f491ae800493c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4020,
        "wires": [
            [
                "b31412089034c789"
            ]
        ]
    },
    {
        "id": "c289d7a115bdf3fb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4080,
        "wires": [
            [
                "5264d7e2ca566dcf"
            ]
        ]
    },
    {
        "id": "4402e0e618574f5e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4140,
        "wires": [
            [
                "f57cc8249de60113"
            ]
        ]
    },
    {
        "id": "7eb78ec4d5138153",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4200,
        "wires": [
            [
                "177d8ca509d3e8da"
            ]
        ]
    },
    {
        "id": "6d59e76b86be0a28",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4260,
        "wires": [
            [
                "80287a3f8934bb43"
            ]
        ]
    },
    {
        "id": "8e421bd7fb91a283",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4320,
        "wires": [
            [
                "ea0b6d6475bef53a"
            ]
        ]
    },
    {
        "id": "63edeb66626d8730",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4380,
        "wires": [
            [
                "080dbc43c1b1c668"
            ]
        ]
    },
    {
        "id": "e32fe70e08233950",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_H == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_H;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 4440,
        "wires": [
            [
                "84760a90b7ac38c7"
            ]
        ]
    },
    {
        "id": "e52a6e51884177a5",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 1: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3260,
        "wires": [
            [
                "6af3ccde3386b3a5"
            ]
        ]
    },
    {
        "id": "b9acca6b22c29ab1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 2: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3320,
        "wires": [
            [
                "f9a5c6aa0d5f1f34"
            ]
        ]
    },
    {
        "id": "1ad87887b9330cad",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 3: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3380,
        "wires": [
            [
                "83381a9440f7d473"
            ]
        ]
    },
    {
        "id": "15f475f32ba820a2",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 4: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3440,
        "wires": [
            [
                "261b15e381f744a0"
            ]
        ]
    },
    {
        "id": "544c45314c1ead12",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 5: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3500,
        "wires": [
            [
                "f7c0c07f0f304c41"
            ]
        ]
    },
    {
        "id": "163e77f08a68ed7e",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 6: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3560,
        "wires": [
            [
                "d621e9465ea398a9"
            ]
        ]
    },
    {
        "id": "68b4c19da3cd9290",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 7: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3620,
        "wires": [
            [
                "d021957cd0b22183"
            ]
        ]
    },
    {
        "id": "3ab9beb02c6621f3",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 8: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par08",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3680,
        "wires": [
            [
                "321f6e44d6ee13fa"
            ]
        ]
    },
    {
        "id": "58c8c6c012950093",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 9: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par09",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3210,
        "y": 3740,
        "wires": [
            [
                "0861c7fe61c6e97e"
            ]
        ]
    },
    {
        "id": "27c206d53df70f8d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 10: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par10",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3220,
        "y": 3800,
        "wires": [
            [
                "c48c4676e563826c"
            ]
        ]
    },
    {
        "id": "e9276d9ce84d5d22",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 11: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par11",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3190,
        "y": 3900,
        "wires": [
            [
                "af9c8519b05c1256"
            ]
        ]
    },
    {
        "id": "c2ad3e23c37606a8",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 12: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par12",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 3960,
        "wires": [
            [
                "6641b0ca1fa79c40"
            ]
        ]
    },
    {
        "id": "ac75047116a5c9de",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 13: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par13",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4020,
        "wires": [
            [
                "4bfa9843befe2354"
            ]
        ]
    },
    {
        "id": "3f842e07c134f5bc",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 14: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par14",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4080,
        "wires": [
            [
                "602ee0125a53ecbc"
            ]
        ]
    },
    {
        "id": "6d95a3aed47bc361",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 15: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par15",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4140,
        "wires": [
            [
                "2973a2e9f4fdaaec"
            ]
        ]
    },
    {
        "id": "55ecdd8765548580",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 16: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par16",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4200,
        "wires": [
            [
                "e34666708236a0b2"
            ]
        ]
    },
    {
        "id": "2b84fd28a5fb4c36",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 17: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par17",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4260,
        "wires": [
            [
                "d028f35cdd094cdc"
            ]
        ]
    },
    {
        "id": "e7ed824ee232956c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 18: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par18",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4320,
        "wires": [
            [
                "8efb05d5a8158ef4"
            ]
        ]
    },
    {
        "id": "65c938305b84de19",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 19: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par19",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4380,
        "wires": [
            [
                "03eefb5aab06decf"
            ]
        ]
    },
    {
        "id": "59fbdca9f4a1e0c6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Parameter 20: Instructions",
        "tooltip": "",
        "group": "6d0276f15a55c5b4",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par20",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3200,
        "y": 4440,
        "wires": [
            [
                "a3c86839d53f05ed"
            ]
        ]
    },
    {
        "id": "18ef3063a91b0ba8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3260,
        "wires": [
            [
                "e52a6e51884177a5",
                "a10f8c330901fc44"
            ]
        ]
    },
    {
        "id": "b2be7fdf0830b5ac",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Clear",
        "func": "msg.data = { \n    \"name\": \"\", \n    \"value_H\": \"\", \n    \"value_L\": \"\", \n    \"instructions\": \"\" ,\n    \"ifTestFailStop\": false\n    };\nmsg.complete = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3140,
        "wires": [
            [
                "19f24296f18b84c4"
            ]
        ]
    },
    {
        "id": "0e6ff6ed37dcca98",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3260,
        "wires": [
            [
                "3d640d1a9087f153",
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "c202f860f300dd1c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3320,
        "wires": [
            [
                "b9acca6b22c29ab1"
            ]
        ]
    },
    {
        "id": "5359eaba19c58239",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3380,
        "wires": [
            [
                "1ad87887b9330cad"
            ]
        ]
    },
    {
        "id": "ee95a66edfc95802",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3440,
        "wires": [
            [
                "15f475f32ba820a2"
            ]
        ]
    },
    {
        "id": "0e6c49b076b012bc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3500,
        "wires": [
            [
                "544c45314c1ead12"
            ]
        ]
    },
    {
        "id": "616cdb8b4a91f8d0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3560,
        "wires": [
            [
                "163e77f08a68ed7e"
            ]
        ]
    },
    {
        "id": "9531ac04bcd23625",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3620,
        "wires": [
            [
                "68b4c19da3cd9290"
            ]
        ]
    },
    {
        "id": "fd2a3ef97a49072e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3680,
        "wires": [
            [
                "3ab9beb02c6621f3"
            ]
        ]
    },
    {
        "id": "9ab08412c6e74e58",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3740,
        "wires": [
            [
                "58c8c6c012950093"
            ]
        ]
    },
    {
        "id": "4ddd0b8db61e74a2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3800,
        "wires": [
            [
                "27c206d53df70f8d"
            ]
        ]
    },
    {
        "id": "c98e11288469df69",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3900,
        "wires": [
            [
                "e9276d9ce84d5d22"
            ]
        ]
    },
    {
        "id": "7baa406586600e21",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 3960,
        "wires": [
            [
                "c2ad3e23c37606a8"
            ]
        ]
    },
    {
        "id": "cefe53cbb9e1e213",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4020,
        "wires": [
            [
                "ac75047116a5c9de"
            ]
        ]
    },
    {
        "id": "1d9b742629050d78",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4080,
        "wires": [
            [
                "3f842e07c134f5bc"
            ]
        ]
    },
    {
        "id": "45b5ae5b0e7f3f32",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4140,
        "wires": [
            [
                "6d95a3aed47bc361"
            ]
        ]
    },
    {
        "id": "66f0a0394b718051",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4200,
        "wires": [
            [
                "55ecdd8765548580"
            ]
        ]
    },
    {
        "id": "a086fbebea3be518",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4260,
        "wires": [
            [
                "2b84fd28a5fb4c36"
            ]
        ]
    },
    {
        "id": "7921f6a6311ffe60",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4320,
        "wires": [
            [
                "e7ed824ee232956c"
            ]
        ]
    },
    {
        "id": "5b676dccce7cc180",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4380,
        "wires": [
            [
                "65c938305b84de19"
            ]
        ]
    },
    {
        "id": "f4ace34ae4baba5f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "func": "if (msg.data != undefined) {\n    if (msg.data.instructions == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.instructions;\n    }\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value_L = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 4440,
        "wires": [
            [
                "59fbdca9f4a1e0c6"
            ]
        ]
    },
    {
        "id": "0f712ca3bb59a557",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "save",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 1980,
        "wires": [
            [
                "43ce6fa4c644f3f3"
            ]
        ]
    },
    {
        "id": "ae6730362411cdc5",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "e4bfc074446708e2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Mr Guy",
        "payloadType": "str",
        "x": 160,
        "y": 1740,
        "wires": [
            [
                "6af32e127a95b37c"
            ]
        ]
    },
    {
        "id": "43ce6fa4c644f3f3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Trigger buffer",
        "func": "msg.complete = \"\";\nmsg.lineFlag = \"save\";\nlet send = []\n\n//Need to save the button push event into join nodes to know\n//if join dump occured from save. \nmsg.topic = \"save\";\nmsg.payload = \"saved from button\" // I'm certain a payload isn't necessary\n\n//if (flow.get(\"basicFormCheck\") && flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\nif (flow.get(\"fileCodeCheck\") && flow.get(\"filenameCheck\")) {\n    send = [msg, { payload: \"Recipe is being saved\" }]\n} else {\n    let text = \"\";\n    //(flow.get(\"basicFormCheck\")) ? null : text += \"|| Basic form is not filled in \";\n    (flow.get(\"fileCodeCheck\")) ? null : text += \"|| File Code is not filled in \";\n    (flow.get(\"filenameCheck\")) ? null : text += \"|| File Name is not filled in \"\n    text += \"||\"\n    send = [, {payload: text}]\n}\n\nreturn send;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            [
                "b4b222f939895c2c",
                "4571c934cd47a965"
            ],
            [
                "d6300eb99d1c25a1",
                "98e14c7df7492fd7",
                "4571c934cd47a965"
            ]
        ]
    },
    {
        "id": "3d640d1a9087f153",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 3160,
        "wires": []
    },
    {
        "id": "d266b35bbc25032f",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Parameter join out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 4825,
        "y": 3260,
        "wires": []
    },
    {
        "id": "fea68f0b27b3b0b6",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "final join in",
        "links": [
            "79a03bb1edba6504",
            "d266b35bbc25032f",
            "a405fda7c0517634",
            "a9c4c3a2c9488c0e",
            "753803a76c1e9e13",
            "03d1c3ba697c94e4",
            "71740d665d2b24ce"
        ],
        "x": 1255,
        "y": 1180,
        "wires": [
            [
                "8fbf19989e9ada84"
            ]
        ]
    },
    {
        "id": "b3e761c2effb7f3d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Del empties",
        "func": "msg.topic = \"parameterData\"; //Set topic\n\nif (msg.payload != undefined) {\n    delete msg.data; // Just no need for this\n    delete msg.payload.save; //Needed this to put lineflag in as member\n\n    let output = {},\n        len = Object.keys(msg.payload).length,\n        keys = Object.keys(msg.payload);\n\n    keys.sort((a, b) => {// sort the keys out to be in order\n        //Each element looks like \"Par##\"\n        const lastA = parseInt(a.slice(3)); // Extract the last two digits of 'a' and convert them to a number\n        const lastB = parseInt(b.slice(3)); // Extract the last two digits of 'b' and convert them to a number\n\n        return lastA - lastB; // Compare the last two digits in ascending order\n    });\n\n    for (let i = 0; i < len; i++) {\n        if ((msg.payload[keys[i]] != null) && (msg.payload[keys[i]].name != \"\") && (msg.payload[keys[i]].value != \"\") && (msg.payload[keys[i]] != \"\")) {\n            output[keys[i]] = msg.payload[keys[i]];\n        }\n    }\n    msg.payload = output;\n}\n\n/*\nmsg.test = {\n    \"length\": len,\n    \"msg.payload\": msg.payload,\n    \"Payload[0]\": msg.payload[keys[0]],\n    \"count\": count,\n    \"output\": output\n}\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4710,
        "y": 3260,
        "wires": [
            [
                "d266b35bbc25032f",
                "084617eda1b22a5b"
            ]
        ]
    },
    {
        "id": "c647b8d2dae95959",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 3200,
        "wires": []
    },
    {
        "id": "ae1be5dc38f60c0b",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1410,
        "y": 1220,
        "wires": [
            [
                "3a63fa4f796bd032",
                "06167b8a190b1ed6",
                "76426b623e4f601c"
            ]
        ]
    },
    {
        "id": "b4b222f939895c2c",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Trigger out",
        "mode": "link",
        "links": [
            "6a9e30f65e495bca"
        ],
        "x": 485,
        "y": 1980,
        "wires": []
    },
    {
        "id": "37a523ac432e0d6b",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Trigger in",
        "links": [
            "c20be865f12bee03",
            "b19f1d350c2fabd7"
        ],
        "x": 4235,
        "y": 3200,
        "wires": [
            [
                "4112bea69fc78e5f",
                "0bd567f1fc88482e"
            ]
        ]
    },
    {
        "id": "3a63fa4f796bd032",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Final Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1160,
        "wires": []
    },
    {
        "id": "06167b8a190b1ed6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Write",
        "func": "if (msg.lineFlag == \"save\") {\n    //msg.filename = msg.payload.fileLocation; //used to write to local file\n    msg.filename = flow.get('recipeJSONlocation') + msg.payload.filename + ' (' + msg.payload.File_Code + ').json';\n    msg.payload = {\n        \"File_Code\": msg.payload.File_Code,\n        \"File_Name\": msg.payload.filename,\n        \"Powered_Inspection\": msg.payload.poweredInspection || false,\n        \"parameterData\": msg.payload.parameterData,\n        \"basic\": msg.payload.basic\n    }\n    //DELETE\n    flow.set(\"writeData\", msg.payload);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1220,
        "wires": [
            [
                "cb690a9660cf7c8a",
                "b9156f78ebf3843b",
                "34c7ab41bb4b3dd7"
            ]
        ]
    },
    {
        "id": "cb690a9660cf7c8a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "25997782b99a6130",
        "type": "ui_dropdown",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "label": "Select file",
        "tooltip": "",
        "place": "Select option",
        "group": "0465010f96f3dad5",
        "order": 10,
        "width": 9,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1121,
        "y": 2640,
        "wires": [
            [
                "96b36f22a6198df9",
                "da2edc16fc7322a7"
            ]
        ]
    },
    {
        "id": "935d68cf5f9462a7",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 530,
        "y": 2640,
        "wires": [
            [
                "7c1dcedbb4597942"
            ]
        ]
    },
    {
        "id": "da79b47bea4f8cd0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Set options",
        "func": "msg.fullOptions = {};\nmsg.options = [];\nlet obj = {},\n    search = msg.search;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    obj[msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')] = msg.payload[i].name;\n}\n\nfor (const [key, value] of Object.entries(obj)) { // Only want JSON files\n    if (key.includes('.json')) {\n\n    } else {\n        delete obj[key];\n    }\n}\n\nmsg.options = []\n\nif (search != undefined) {\n    for (const [key, value] of Object.entries(obj)) {\n        if (key.includes(search)) {\n            let temp = {};\n            temp[key] = value;\n            msg.options.push(temp);\n        }\n    }\n} else {\n    for (const [key, value] of Object.entries(obj)) {\n        let temp = {};\n        temp[key] = value;\n        msg.options.push(temp);\n    }\n}\n\nmsg.check = {\n    \"Obj\": obj\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 951,
        "y": 2640,
        "wires": [
            [
                "25997782b99a6130",
                "993a9b001a357c8c"
            ]
        ]
    },
    {
        "id": "96b36f22a6198df9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 2580,
        "wires": []
    },
    {
        "id": "7c1dcedbb4597942",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "start": "C:\\Users\\User\\Documents\\Coding\\Node Red\\Recipes",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 781,
        "y": 2640,
        "wires": [
            [
                "da79b47bea4f8cd0",
                "b39f59f963f517e4"
            ]
        ]
    },
    {
        "id": "b39f59f963f517e4",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "file listener",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2580,
        "wires": []
    },
    {
        "id": "993a9b001a357c8c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Options",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1081,
        "y": 2580,
        "wires": []
    },
    {
        "id": "6674d2d95cae619d",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "label": "Search ",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "Search",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 380,
        "y": 2700,
        "wires": [
            [
                "714536eb9bff0bd0"
            ]
        ]
    },
    {
        "id": "542df5ca2e58aa34",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 620,
        "y": 2540,
        "wires": [
            [
                "7c1dcedbb4597942"
            ]
        ]
    },
    {
        "id": "626e278e4cf58f5b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Search",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2700,
        "wires": []
    },
    {
        "id": "714536eb9bff0bd0",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "search",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 2700,
        "wires": [
            [
                "626e278e4cf58f5b",
                "7c1dcedbb4597942"
            ]
        ]
    },
    {
        "id": "717877cb82065dc3",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "selected file out",
        "mode": "link",
        "links": [
            "3d7f076cfd4e4c32"
        ],
        "x": 1406,
        "y": 2640,
        "wires": []
    },
    {
        "id": "da2edc16fc7322a7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Set tags",
        "func": "msg.filename = msg.payload;\n//This part has become redundant, I use the existence of this member as a check somewhere in the code. Should get rewritten\nmsg.filenameShort = msg.payload.replace(/^.*(\\\\|\\/|\\:)/, '');\nmsg.filenameShort = msg.filenameShort.toString().substring(0, msg.filenameShort.lastIndexOf('.'));\nif (msg.filenameShort.indexOf('(') != -1) { //checks to see if there is a bracket in the filename, if there is, deletes it\n    //node.warn(\"Filename: \" + msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()); \n    msg.filenameShort = msg.filenameShort.substring(0, msg.filenameShort.indexOf('(')).trim()\n}\n\nflow.set(\"filenameShort\");\nmsg.lineFlag = \"fileSelected\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1281,
        "y": 2640,
        "wires": [
            [
                "717877cb82065dc3",
                "d5a6b4aa8c3d3543"
            ]
        ]
    },
    {
        "id": "d5a6b4aa8c3d3543",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1441,
        "y": 2600,
        "wires": []
    },
    {
        "id": "72055df34f3ff6d0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Blocker",
        "func": "if (msg.filename == undefined) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2700,
        "wires": [
            [
                "6674d2d95cae619d"
            ]
        ]
    },
    {
        "id": "686eb83bad60e464",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "FileSelected out",
        "mode": "link",
        "links": [
            "a46910031a3f1d1c"
        ],
        "x": 1975,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4571c934cd47a965",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1920,
        "wires": []
    },
    {
        "id": "084617eda1b22a5b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Save check1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4870,
        "y": 3180,
        "wires": []
    },
    {
        "id": "96a583357f096554",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Save check2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4530,
        "y": 3180,
        "wires": []
    },
    {
        "id": "57b8c369402f86ee",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2060,
        "wires": [
            [
                "43ce6fa4c644f3f3"
            ]
        ]
    },
    {
        "id": "9e937f47df2abe53",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Set trigger / dump",
        "func": "msg.complete = \"\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 3260,
        "wires": [
            [
                "b3e761c2effb7f3d"
            ]
        ]
    },
    {
        "id": "56ce44966ecffab9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values_H",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 3200,
        "wires": []
    },
    {
        "id": "a10f8c330901fc44",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Instructions",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 3200,
        "wires": []
    },
    {
        "id": "76426b623e4f601c",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "",
        "property": "lineFlag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "save",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fileSelected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1590,
        "y": 1100,
        "wires": [
            [
                "64d6fcd6ed4fe465"
            ],
            [
                "2cc3c524ed5f4e18"
            ]
        ]
    },
    {
        "id": "c8aea7f920176540",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Switch to clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 980,
        "wires": []
    },
    {
        "id": "2cc3c524ed5f4e18",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set fileSelected",
        "func": "if (msg.topic != 'clear') {\n    return {\n        filename: msg.filename,\n        filenameShort: msg.filenameShort\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1100,
        "wires": [
            [
                "686eb83bad60e464",
                "849918d9f4b0d272"
            ]
        ]
    },
    {
        "id": "364a72862b9511e5",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Clear from Save out",
        "mode": "link",
        "links": [
            "3d7f076cfd4e4c32"
        ],
        "x": 1995,
        "y": 1040,
        "wires": []
    },
    {
        "id": "64d6fcd6ed4fe465",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set Clear from Save",
        "func": "return {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1040,
        "wires": [
            [
                "364a72862b9511e5",
                "c8aea7f920176540"
            ]
        ]
    },
    {
        "id": "760861ebeac0ea7a",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Clear Parameters in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 1615,
        "y": 3140,
        "wires": [
            [
                "b2be7fdf0830b5ac"
            ]
        ]
    },
    {
        "id": "7cf0eb5e4d7af7a5",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Select File in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 986,
        "y": 2700,
        "wires": [
            [
                "25997782b99a6130"
            ]
        ]
    },
    {
        "id": "35cd53f851e1a767",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Search in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 105,
        "y": 2720,
        "wires": [
            [
                "72055df34f3ff6d0"
            ]
        ]
    },
    {
        "id": "c8ca4022d0d77e22",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Check Entry",
        "func": "//Incomplete: Headers can be set somewhere else\nlet tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nmsg.data = msg.payload;\n//let values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nmsg.payload = \"select * from [NodeRed].[dbo].[Recipes] with (updlock,serializable) where File_Code = \" + msg.payload.File_Code;\n\n/*\n//if file exists\nmsg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n\n//if file doesn't exist\nmsg.payload = \"INSERT INTO \" + tableName + \" (\" +\n    headers.toString() + \") VALUES ( \" + values + \"') \" +\n    \"on duplicate File_Code update \" +\n    \"File_Code = \" + obj.File_Code + \" File_Name = \" + obj.File_Name + \" JSON_Data = \" + JSON.stringify(obj) ;\nmsg.check = {\n    obj : obj,\n    values : values\n} \n*/\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1280,
        "wires": [
            [
                "0f6a62d428984bc7",
                "393a717ce46b9361"
            ]
        ]
    },
    {
        "id": "20a3eb8c1e03d0e2",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 1220,
        "wires": []
    },
    {
        "id": "0f6a62d428984bc7",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1940,
        "y": 1280,
        "wires": [
            [
                "60f28e5f05f78a6d"
            ]
        ]
    },
    {
        "id": "60f28e5f05f78a6d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Insert / Update MSSQL",
        "func": "let tableName = '[NodeRed].[dbo].[Recipes]';\nlet headers = [\"File_Code\", \"File_Name\", \"JSON_Data\"];\nlet obj = msg.data;\nlet values = [obj.File_Code, \"'\" + obj.File_Name + \"'\", \"'\" + JSON.stringify(obj)];//.toString();\n\nif (msg.payload.length == 0) { // checks if file exists\n    msg.payload = \"INSERT INTO \" + tableName + \" (\" +\n        headers.toString() + \") VALUES ( \" + values + \"') \";\n    msg.check = {\n        obj: obj,\n        values: values\n    } \n} else { // runs if entry does not exist\n    msg.payload = \"update \" + tableName + \" set File_Name = '\" + obj.File_Name + \"', JSON_Data = '\" + JSON.stringify(obj) +\n        \"' where File_Code = \" + obj.File_Code;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1280,
        "wires": [
            [
                "20a3eb8c1e03d0e2",
                "0150faf44d6b43a0"
            ]
        ]
    },
    {
        "id": "0150faf44d6b43a0",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2340,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff3e803ce53cc13",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "After Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1180,
        "wires": []
    },
    {
        "id": "37e5e1cf05f04932",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "",
        "label": "File Name",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "filename",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "1de9dfdf901990fa",
                "859e77fbb03e40f0"
            ]
        ]
    },
    {
        "id": "d749b9f44a2a2ba1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Checking",
        "func": "if (msg.lineFlag == \"fileSelected\") {\n    msg.payload = msg.filenameShort;\n    return msg;\n} else if (msg.lineFlag == \"SQL\") {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.lineFlag == 'JSONdata') {\n    msg.payload = msg.payload.File_Name;\n} else if (msg.topic == 'clear') {\n    msg.payload = \"\";\n} else {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "37e5e1cf05f04932",
                "4f48d873ac6baeca",
                "7c1e899a2651d759",
                "859e77fbb03e40f0"
            ]
        ]
    },
    {
        "id": "1de9dfdf901990fa",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Set Par Flow",
        "func": "msg.topic = \"filename\";\n\nif (msg.filenameShort != undefined) { //Checks if the filename has been loaded from a database\n    node.send({ topic: \"filename\", payload: msg.filenameShort });\n    //node.send({ topic: \"fileLocation\", payload: msg.filename });\n    return null;\n} else { // Or any other message that gets received\n    node.send({ topic: \"filename\", payload: msg.payload })\n    //node.send({ topic: \"fileLocation\", payload: flow.get('recipeJSONlocation') + msg.payload + '.json' });\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "b6bd57aa234737be",
                "a405fda7c0517634"
            ]
        ]
    },
    {
        "id": "756ee76f9ccadbd8",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename in",
        "links": [
            "38ff2dcc2e41b6fa",
            "5491c556639992d7",
            "c20be865f12bee03"
        ],
        "x": 105,
        "y": 1140,
        "wires": [
            [
                "d749b9f44a2a2ba1",
                "1edb47acfa9dbac7"
            ]
        ]
    },
    {
        "id": "4f48d873ac6baeca",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "fileSelected",
        "func": "if (msg.filenameShort != undefined) {\n    return msg;\n} else if (msg.lineFlag == \"SQL\") {\n    return {\n        payload: msg.payload\n    };\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1200,
        "wires": [
            [
                "1de9dfdf901990fa",
                "cb07a673fdfc2653"
            ]
        ]
    },
    {
        "id": "7c1e899a2651d759",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b6bd57aa234737be",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a405fda7c0517634",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Filename out",
        "mode": "link",
        "links": [
            "2fb51950723c283f",
            "fea68f0b27b3b0b6"
        ],
        "x": 725,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1edb47acfa9dbac7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 1100,
        "wires": []
    },
    {
        "id": "cb07a673fdfc2653",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8dc188d1df343704",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "File Name",
        "info": "",
        "x": 120,
        "y": 960,
        "wires": []
    },
    {
        "id": "3dab220221184841",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "",
        "label": "File Code",
        "tooltip": "",
        "group": "0465010f96f3dad5",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "23281f6c705311eb",
                "ce067e37168e1d33",
                "ddf28fd3e1968054"
            ]
        ]
    },
    {
        "id": "c9b3c81e660b8022",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.File_Code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1500,
        "wires": [
            [
                "3dab220221184841",
                "113479bbc86295a4",
                "a8817387335deec3",
                "a513364e1951fda6"
            ]
        ]
    },
    {
        "id": "f4ea55515c41729c",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code Clear in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 255,
        "y": 1540,
        "wires": [
            [
                "3dab220221184841",
                "a513364e1951fda6",
                "b84b6732efebeca7"
            ]
        ]
    },
    {
        "id": "23281f6c705311eb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Set topic",
        "func": "msg.topic = \"File_Code\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1500,
        "wires": [
            [
                "a9c4c3a2c9488c0e"
            ]
        ]
    },
    {
        "id": "8de91a6651268b8a",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code in",
        "links": [
            "5491c556639992d7"
        ],
        "x": 85,
        "y": 1540,
        "wires": [
            [
                "c9b3c81e660b8022"
            ]
        ]
    },
    {
        "id": "a9c4c3a2c9488c0e",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 660,
        "y": 1460,
        "wires": []
    },
    {
        "id": "848a99fa27c2e22f",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "File Code",
        "info": "",
        "x": 120,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ad9a723bcdb4d50b",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "e4bfc074446708e2",
        "name": "User",
        "info": "",
        "x": 110,
        "y": 1680,
        "wires": []
    },
    {
        "id": "34c7ab41bb4b3dd7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Set write out",
        "mode": "link",
        "links": [
            "11ec4762c9588644",
            "bf6864ec2d7a5b95",
            "de8e36bcb8f76462"
        ],
        "x": 1725,
        "y": 1180,
        "wires": []
    },
    {
        "id": "393a717ce46b9361",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d6300eb99d1c25a1",
        "type": "ui_text",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "group": "0465010f96f3dad5",
        "order": 16,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "statuss",
        "x": 490,
        "y": 2040,
        "wires": []
    },
    {
        "id": "98e14c7df7492fd7",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "HMIalert",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "859e77fbb03e40f0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "Save check Filename",
        "func": "let check = flow.get(\"filenameCheck\");\nif (check == undefined) {\n    context.set(\"filenameCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"filenameCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"filenameCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "337b76a428a81ab5"
            ]
        ]
    },
    {
        "id": "337b76a428a81ab5",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "43df61af7b7b9663",
        "name": "debug 95",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 980,
        "wires": []
    },
    {
        "id": "ce067e37168e1d33",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Save check File Code",
        "func": "let check = flow.get(\"fileCodeCheck\");\nif (check == undefined) {\n    context.set(\"fileCodeCheck\", false);\n    check = false;\n}\n if (msg.payload == \"\") { // clear means the join node lacks basic form data\n    check = false;\n} else { // save meanse the join node lacks basic form data\n    check = true;\n}\nflow.set(\"fileCodeCheck\", check);\nmsg = {\n    payload : check,\n    topic: \"fileCodeCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1400,
        "wires": [
            [
                "ddf28fd3e1968054"
            ]
        ]
    },
    {
        "id": "ddf28fd3e1968054",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "Save check File Code",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1400,
        "wires": []
    },
    {
        "id": "a8817387335deec3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "debug 96",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5e66d4669da59098",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Save",
        "info": "",
        "x": 110,
        "y": 1860,
        "wires": []
    },
    {
        "id": "37d487ac91b0fdce",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Cancel / Clear",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Clear",
        "topicType": "str",
        "x": 1100,
        "y": 1980,
        "wires": [
            [
                "d7c06429fe49a7d8"
            ]
        ]
    },
    {
        "id": "e4883f4f01d94855",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 900,
        "y": 1980,
        "wires": [
            [
                "37d487ac91b0fdce"
            ]
        ]
    },
    {
        "id": "3d7f076cfd4e4c32",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear in",
        "links": [
            "717877cb82065dc3",
            "364a72862b9511e5"
        ],
        "x": 955,
        "y": 1920,
        "wires": [
            [
                "37d487ac91b0fdce"
            ]
        ]
    },
    {
        "id": "d7c06429fe49a7d8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Set Clear line",
        "func": "if (msg.lineFlag == undefined) {\n    msg.lineFlag = \"clear\";\n}\n\nmsg.complete = \"\";\nmsg.topic = \"clear\"\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1980,
        "wires": [
            [
                "9cf37f99d9c46dd7",
                "c20be865f12bee03"
            ]
        ]
    },
    {
        "id": "9cf37f99d9c46dd7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c20be865f12bee03",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Clear out",
        "mode": "link",
        "links": [
            "37a523ac432e0d6b",
            "6380ab3c4bd62f4c",
            "756ee76f9ccadbd8",
            "760861ebeac0ea7a",
            "7cf0eb5e4d7af7a5",
            "35cd53f851e1a767",
            "f4ea55515c41729c",
            "c7a80db6e1441f4f",
            "fa9015a8110bfeda",
            "21a6805e17ec8f57",
            "2fb51950723c283f"
        ],
        "x": 1445,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a65d5a57aa1aa5e4",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "f8a4ead61d3610ae",
        "name": "Cancel / Clear",
        "info": "",
        "x": 860,
        "y": 1860,
        "wires": []
    },
    {
        "id": "4877bfd005f45419",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "Final Buffer + Set Write",
        "info": "",
        "x": 1320,
        "y": 940,
        "wires": []
    },
    {
        "id": "82a83f4a48030b23",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Paramater data in",
        "links": [
            "44dbecae4687566e"
        ],
        "x": 1585,
        "y": 3580,
        "wires": [
            [
                "bab0609bea1707c5"
            ]
        ]
    },
    {
        "id": "b281e8db5682cef0",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "ac5ddaede4537b72",
        "name": "Select File",
        "info": "",
        "x": 120,
        "y": 2500,
        "wires": []
    },
    {
        "id": "c8c71e527a7dcceb",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Input Read Data out",
        "info": "",
        "x": 1310,
        "y": 1380,
        "wires": []
    },
    {
        "id": "ac2e0223ada93d3b",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select JSON_Data from [NodeRed].[dbo].[Recipes] where File_Code = 14635",
        "payloadType": "str",
        "x": 1330,
        "y": 1520,
        "wires": [
            [
                "4a3942a5d1cee888"
            ]
        ]
    },
    {
        "id": "4a3942a5d1cee888",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1460,
        "y": 1520,
        "wires": [
            [
                "7b0410e1a51fa4cf"
            ]
        ]
    },
    {
        "id": "7b0410e1a51fa4cf",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Set parsed json data",
        "func": "msg.payload = JSON.parse(msg.payload[0][\"JSON_Data\"]);\nmsg.lineFlag = \"SQL\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1520,
        "wires": [
            [
                "ef386ef09874169f",
                "5491c556639992d7",
                "38ff2dcc2e41b6fa",
                "69c370a5e4e9a882"
            ]
        ]
    },
    {
        "id": "ef386ef09874169f",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.parameterData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 1580,
        "wires": [
            [
                "6c98d771a755222f"
            ]
        ]
    },
    {
        "id": "5491c556639992d7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Read file data out",
        "mode": "link",
        "links": [
            "039d4dbe4e2b78e1",
            "21a6805e17ec8f57",
            "756ee76f9ccadbd8",
            "8de91a6651268b8a",
            "baa6c2563f8b404d"
        ],
        "x": 1915,
        "y": 1520,
        "wires": []
    },
    {
        "id": "38ff2dcc2e41b6fa",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "MSSQL out",
        "mode": "link",
        "links": [
            "756ee76f9ccadbd8"
        ],
        "x": 1915,
        "y": 1480,
        "wires": []
    },
    {
        "id": "69c370a5e4e9a882",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "SQL Test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d2cab525d55aed4c",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1730,
        "y": 1580,
        "wires": [
            [
                "215838f219a62175",
                "1ea3b76c92b8cd98"
            ]
        ]
    },
    {
        "id": "6c98d771a755222f",
        "type": "split",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 2210,
        "y": 1580,
        "wires": [
            [
                "ec50e4bd721ed7c0"
            ]
        ]
    },
    {
        "id": "dc1518dfe85bb897",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Read settings.json",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1570,
        "y": 1580,
        "wires": [
            [
                "d2cab525d55aed4c"
            ]
        ]
    },
    {
        "id": "4a831eb513b40b2a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 1500,
        "wires": []
    },
    {
        "id": "ec50e4bd721ed7c0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Data = Pay",
        "func": "msg.data = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1580,
        "wires": [
            [
                "44dbecae4687566e"
            ]
        ]
    },
    {
        "id": "a46910031a3f1d1c",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Selected file in",
        "links": [
            "686eb83bad60e464"
        ],
        "x": 1415,
        "y": 1620,
        "wires": [
            [
                "dc1518dfe85bb897",
                "67bfbb724ce329bc"
            ]
        ]
    },
    {
        "id": "44dbecae4687566e",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Parameter data out",
        "mode": "link",
        "links": [
            "82a83f4a48030b23"
        ],
        "x": 2445,
        "y": 1540,
        "wires": []
    },
    {
        "id": "67bfbb724ce329bc",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1640,
        "wires": []
    },
    {
        "id": "4952dd022abb75ad",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 25, //Number of registers allowed per instance\n    offset = 0;\n\n/*Del\nnode.send({ \"payload\" : {\n    data : msg.payload.data.length,\n    buffer: msg.payload.buffer.length\n}});*/\n\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nmsg.check = {\n    output: output,\n    test: String.fromCharCode(83, 116),\n    check: msg.payload.data.length / entryRegisterLength\n};\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2860,
        "wires": [
            [
                "a63ee866d1d3340b"
            ]
        ]
    },
    {
        "id": "0a8ed61e867f56ed",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 2860,
        "wires": [
            [],
            [
                "4952dd022abb75ad",
                "4eceb11fa41fb864"
            ]
        ]
    },
    {
        "id": "f5ad7a146a77eea2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Read Reg",
        "func": "var fc=3;\nvar sa=260;\nvar addresses=100; //Set\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2860,
        "wires": [
            [
                "0a8ed61e867f56ed"
            ]
        ]
    },
    {
        "id": "9059f5fd97c87d09",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2860,
        "wires": [
            [
                "f5ad7a146a77eea2"
            ]
        ]
    },
    {
        "id": "a63ee866d1d3340b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2820,
        "wires": []
    },
    {
        "id": "4eceb11fa41fb864",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2820,
        "wires": []
    },
    {
        "id": "ed9e10d9c22c547c",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "PLC Read DEVELOPMENT",
        "info": "",
        "x": 160,
        "y": 2800,
        "wires": []
    },
    {
        "id": "c7a80db6e1441f4f",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "10237157f7ec9d83",
        "name": "Status in",
        "links": [
            "c20be865f12bee03",
            "d3d9847c7a50a19d",
            "a5f50c3adfd68f30"
        ],
        "x": 365,
        "y": 2060,
        "wires": [
            [
                "d6300eb99d1c25a1"
            ]
        ]
    },
    {
        "id": "215838f219a62175",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "Line Flag",
        "func": "msg.lineFlag = \"JSONdata\";\n\n//Set: I'm sleepy, this is so that the data that I know should be numbers gets converted to numbers\nlet keys = Object.keys(msg.payload.parameterData);\nfor (let i = 0; i < keys.length; i++) {\n    msg.payload.parameterData[keys[i]].value_H = parseFloat(msg.payload.parameterData[keys[i]].value_H);\n    msg.payload.parameterData[keys[i]].value_L = parseFloat(msg.payload.parameterData[keys[i]].value_L);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1580,
        "wires": [
            [
                "4a831eb513b40b2a",
                "ef386ef09874169f",
                "5491c556639992d7"
            ]
        ]
    },
    {
        "id": "0e2055f1de766c7f",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Wite to HMI CSV",
        "info": "",
        "x": 2240,
        "y": 4560,
        "wires": []
    },
    {
        "id": "cc71860e04ee28f1",
        "type": "ui_dropdown",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Parameter Count",
        "group": "0465010f96f3dad5",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "Parameters 1 - 10",
                "type": "str"
            },
            {
                "label": "",
                "value": "Parameters 11 - 20",
                "type": "str"
            },
            {
                "label": "",
                "value": "Parameters 21 - 30",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 160,
        "y": 840,
        "wires": [
            [
                "39bdfdf6150306a8"
            ]
        ]
    },
    {
        "id": "c1090410677ed7cf",
        "type": "ui_ui_control",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "events": "all",
        "x": 640,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "39bdfdf6150306a8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "Set ui control",
        "func": " /*Realised that a switch isn't really needed if the tab \n    name is the same as the group name*/\n\nswitch (msg.payload) {\n    case \"Parameters 1 - 10\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\"]}}';\n        break;\n\n    case \"Parameters 11 - 20\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"],\"show\":[\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"]}}';\n        break;\n\n    case \"Parameters 21 - 30\":\n        msg.payload = '{\"group\":{\"hide\":[\"Recipes_Parameter_Names_1_-_10\",\"Recipes_Parameter_Values_1_-_10\",\"Recipes_Parameter_Instructions_1_-_10\",\"Recipes_Stop_On_Fail_1_-_10\",\"Recipes_Parameter_Names_11_-_20\",\"Recipes_Parameter_Values_11_-_20\",\"Recipes_Parameter_Instructions_11_-_20\",\"Recipes_Stop_On_Fail_11_-_20\"],\"show\":[\"Recipes_Parameter_Names_21_-_30\",\"Recipes_Parameter_Values_21_-_30\",\"Recipes_Parameter_Instructions_21_-_30\"]}}';\n        break;\n}\n\n/*\nlet groups = [\"Recipes_Stove 1\", \"Recipes_Stove 2\", \"Recipes_Stove 3\"];\n\nmsg.payload = \"Recipes_\" + msg.payload;\nlet index = groups.indexOf(msg.payload);\nlet pickedOption = groups.splice(index, 1);\nfor (let i = 0; i < groups.length; i++) {\n    groups[i] = '\"' + groups[i].toString().replace(/ /g, \"_\") + '\"';\n}\npickedOption = pickedOption.toString().replace(/ /g, \"_\");\nmsg.payload = '{\"group\":{\"hide\":[' + groups.toString() + '],\"show\":[\"' + pickedOption+'\"]}}';\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            [
                "aa7b8f253ea918f7"
            ]
        ]
    },
    {
        "id": "aa7b8f253ea918f7",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 840,
        "wires": [
            [
                "c1090410677ed7cf"
            ]
        ]
    },
    {
        "id": "8bfd37949c01c861",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "e6bcc5d10479e867",
        "name": "Dropdown Parameters",
        "info": "",
        "x": 160,
        "y": 780,
        "wires": []
    },
    {
        "id": "54429a976120698f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined) {\n    msg.payload = context.get('buffer');\n    return msg;\n}\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Add the incoming message payload and topic to the buffer\nbuffer[msg.topic] = msg.payload;\n\n// Set the buffer array back to context\ncontext.set('buffer', buffer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 600,
        "wires": [
            []
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "6af3ccde3386b3a5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3260,
        "wires": [
            [
                "ce4ffc901a2768a2",
                "f975f0ca02f042d7"
            ],
            [
                "7f6b3e9b0dcd801d"
            ]
        ]
    },
    {
        "id": "7f6b3e9b0dcd801d",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par01",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3260,
        "wires": [
            [
                "0e6ff6ed37dcca98",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "19f24296f18b84c4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Name clear",
        "func": "msg.payload = msg.data.name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 3140,
        "wires": [
            [
                "b550b5e3643a081e",
                "93e854174c788a2a",
                "4549fa812981801e",
                "554e8bba05d3b1d4",
                "c022faba4aae56dc",
                "32f3c5ef39f690c5",
                "a48296d1c2eee765",
                "c79e87694ef20557",
                "5713ed8acde2508f",
                "892578186178d380",
                "66f4e57cab3a54de",
                "f525a67cb53102dc",
                "84e3122bd7d94d3a",
                "92a1b526c8b8e651",
                "5752124f7c0d3f97",
                "80eeda88e946f498",
                "1dbea0024fdf969d",
                "4bea9a6f9c5d4bcd",
                "90e9360c28ab605c",
                "03d90c3c5d9a62ed",
                "edbf85be7b2663c8"
            ]
        ]
    },
    {
        "id": "edbf85be7b2663c8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values Clear",
        "func": "msg.payload = msg.data.value_H;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 3140,
        "wires": [
            [
                "3ab7a5e711325c2e",
                "2bfbf1dbbfa6f0a6",
                "3a8f56f6eb310b3b",
                "2ba36142dd3baeab",
                "3837f6a169b6cd56",
                "a8e5f3f5a672fcf8",
                "ccad83bb76ebd6a9",
                "d2d3c9f3627c99b0",
                "e76f71d55ab65754",
                "ade580ca5b8b58f0",
                "ac6684d79d22ae33",
                "2d7feff547a33376",
                "b31412089034c789",
                "5264d7e2ca566dcf",
                "f57cc8249de60113",
                "177d8ca509d3e8da",
                "80287a3f8934bb43",
                "ea0b6d6475bef53a",
                "080dbc43c1b1c668",
                "84760a90b7ac38c7",
                "e6ded747053a525e"
            ]
        ]
    },
    {
        "id": "9b169584105c42ae",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values Clear",
        "func": "msg.payload = msg.data.instructions;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 3140,
        "wires": [
            [
                "e52a6e51884177a5",
                "b9acca6b22c29ab1",
                "1ad87887b9330cad",
                "15f475f32ba820a2",
                "544c45314c1ead12",
                "163e77f08a68ed7e",
                "68b4c19da3cd9290",
                "3ab9beb02c6621f3",
                "58c8c6c012950093",
                "27c206d53df70f8d",
                "e9276d9ce84d5d22",
                "c2ad3e23c37606a8",
                "ac75047116a5c9de",
                "3f842e07c134f5bc",
                "6d95a3aed47bc361",
                "55ecdd8765548580",
                "2b84fd28a5fb4c36",
                "e7ed824ee232956c",
                "65c938305b84de19",
                "59fbdca9f4a1e0c6",
                "529a5066396a3e35"
            ]
        ]
    },
    {
        "id": "529a5066396a3e35",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop Clear",
        "func": "msg.payload = msg.data.ifTestFailStop;\nmsg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 3140,
        "wires": [
            [
                "7f6b3e9b0dcd801d",
                "5e46214c6c8b4ad1",
                "5f829afab5a23b18",
                "27b9bf8332f35605",
                "335532f4665b13f3",
                "d2eaed159558c4a1",
                "3349a5b0860abb2c",
                "4f37728f34a31d94",
                "c62fb7bf6a40d9f7",
                "efaa861fcf7780df",
                "5d41aec97a8898b4",
                "fe59b8c4701a5213",
                "e25725d354b268fc",
                "96586ba7c7018640",
                "cc6c54cfb8954c4b",
                "877a44dd24e924c1",
                "69d627f7fb70d0d8",
                "af82125b0a5951e0",
                "87d9557dc8c8d386",
                "3fc93505fc164a58"
            ]
        ]
    },
    {
        "id": "5e46214c6c8b4ad1",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par02",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3320,
        "wires": [
            [
                "07f800f16a283fd2",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "5f829afab5a23b18",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par03",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3380,
        "wires": [
            [
                "0bb4d49c38aa1e10",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "27b9bf8332f35605",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par04",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3440,
        "wires": [
            [
                "d8164feaa301566a",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "335532f4665b13f3",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par05",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3500,
        "wires": [
            [
                "eef7f518d7f2cae2",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "d2eaed159558c4a1",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par06",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3560,
        "wires": [
            [
                "ea02d56dee4cb533",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "3349a5b0860abb2c",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par07",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3620,
        "wires": [
            [
                "022e727137b9ba68",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "4f37728f34a31d94",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par08",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3680,
        "wires": [
            [
                "9a15b7619385df35",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "c62fb7bf6a40d9f7",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par09",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3740,
        "wires": [
            [
                "73b6fa388b6cd3e7",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "efaa861fcf7780df",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "778aba04212433f7",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par10",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3800,
        "wires": [
            [
                "a17e05e6ac20b63f",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "5d41aec97a8898b4",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par11",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3900,
        "wires": [
            [
                "f4876d9ec4cc8a5f",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "fe59b8c4701a5213",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par12",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 3960,
        "wires": [
            [
                "5e8df6073c539c38",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "e25725d354b268fc",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par13",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4020,
        "wires": [
            [
                "36a4e1c737f877d6",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "96586ba7c7018640",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par14",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4080,
        "wires": [
            [
                "0e914a89c710b8cd",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "cc6c54cfb8954c4b",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par15",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4140,
        "wires": [
            [
                "ea27e7384fa0b53f",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "877a44dd24e924c1",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par16",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4200,
        "wires": [
            [
                "1b3888d8c3eacabf",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "69d627f7fb70d0d8",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par17",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4260,
        "wires": [
            [
                "7af5741f6443a920",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "af82125b0a5951e0",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par18",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4320,
        "wires": [
            [
                "26369ddcdabd3cf3",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "87d9557dc8c8d386",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par19",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4380,
        "wires": [
            [
                "4238f3f2469daba9",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "3fc93505fc164a58",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "{{msg.label}}",
        "tooltip": "",
        "group": "4b4b99bf40ea5d2e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Par20",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3610,
        "y": 4440,
        "wires": [
            [
                "9b366a6038c2ca09",
                "bddb69069124ce54"
            ]
        ]
    },
    {
        "id": "07f800f16a283fd2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3320,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "0bb4d49c38aa1e10",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3380,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "d8164feaa301566a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3440,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "eef7f518d7f2cae2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3500,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "ea02d56dee4cb533",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3560,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "022e727137b9ba68",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3620,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "9a15b7619385df35",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3680,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "73b6fa388b6cd3e7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3740,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "a17e05e6ac20b63f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3800,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "f4876d9ec4cc8a5f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3900,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "5e8df6073c539c38",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3960,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "36a4e1c737f877d6",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4020,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "0e914a89c710b8cd",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4080,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "ea27e7384fa0b53f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4140,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "1b3888d8c3eacabf",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4200,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "7af5741f6443a920",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3752.5625,
        "y": 4261.888916015625,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "26369ddcdabd3cf3",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4320,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "4238f3f2469daba9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4380,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "9b366a6038c2ca09",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value_H\": \"\",\n        \"value_L\": \"\",\n        \"instructions\": \"\",\n        \"ifTestFailStop\": false\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    if (msg.payload != undefined)\n        msg.store.ifTestFailStop = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\" && msg.value != \"\") {\n    msg.payload = msg.data;\n    context.set(\"Stored\", msg.data);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 4440,
        "wires": [
            [
                "4112bea69fc78e5f"
            ]
        ]
    },
    {
        "id": "bc1527f0658c3745",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 2980,
        "y": 4720,
        "wires": [
            [
                "674bdf8dd88a2f92",
                "07e2b42143d640d9"
            ]
        ],
        "info": "Looking for the HMI Recipe CSV"
    },
    {
        "id": "2d41696a18e88a01",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Config FL Set Par",
        "func": "msg.data = msg.payload; // Data that will be written to the csv\n\n\n//Set: filename for HMI csv\nmsg.data.shortFilename = flow.get('HMIrecipeName') // Note: Might want to dynamically set this\nmsg.data.fileLocation = flow.get('HMIcsvLocation'); // Not the whole path + filename\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: msg.data.fileLocation,\n    pattern: msg.data.shortFilename \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 4720,
        "wires": [
            [
                "bc1527f0658c3745",
                "2e8743f7b80084b4"
            ]
        ]
    },
    {
        "id": "674bdf8dd88a2f92",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 119",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3130,
        "y": 4680,
        "wires": []
    },
    {
        "id": "07e2b42143d640d9",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3150,
        "y": 4720,
        "wires": [
            [
                "083c7d8a391fde5e",
                "2be4d373775ce795"
            ],
            [
                "79f57fb83796d203"
            ]
        ]
    },
    {
        "id": "2f58cbe080870585",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Config Read file",
        "func": "//Also used for config write\nmsg.payload = {};\n// Set\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; \n// Settings things up for the bypass\nmsg.payload.text = msg.data.text;\nmsg.payload.filename = msg.filename;\nmsg.payload.recipeIdentity = msg.recipeIdentity;\nmsg.topic = \"bypass\";\ndelete msg.filename\n\n\nreturn [{filename: msg.payload.filename}, msg];\n\n//would be used with the line by line file read\nflow.set(\"newFilename\", msg.filename.substr(0, msg.filename.lastIndexOf(\".\")) + \"NEW\" + msg.filename.substr(msg.filename.lastIndexOf(\".\"), msg.filename.length));\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 4900,
        "wires": [
            [
                "f1d50dd15d94069a",
                "623845cff6af01b9"
            ],
            [
                "175c729c01f2cfbd",
                "9f962157dbb6d25e"
            ]
        ]
    },
    {
        "id": "f1d50dd15d94069a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 120",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3690,
        "y": 4860,
        "wires": []
    },
    {
        "id": "623845cff6af01b9",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3700,
        "y": 4900,
        "wires": [
            [
                "a2edcd5fcd18c313",
                "a0de533effc5e97a"
            ]
        ]
    },
    {
        "id": "175c729c01f2cfbd",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Bypass Recipe File Exists",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3740,
        "y": 4940,
        "wires": []
    },
    {
        "id": "a2edcd5fcd18c313",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 122",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 4860,
        "wires": []
    },
    {
        "id": "a0de533effc5e97a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set topic",
        "func": "msg.topic = \"fileData\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 4900,
        "wires": [
            [
                "fcb4484315826ecd"
            ]
        ]
    },
    {
        "id": "fcb4484315826ecd",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4020,
        "y": 4900,
        "wires": [
            [
                "df7bed9d57e1e061",
                "666e0a81ae995c72"
            ]
        ]
    },
    {
        "id": "df7bed9d57e1e061",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 123",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4160,
        "y": 4860,
        "wires": []
    },
    {
        "id": "666e0a81ae995c72",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "buffer (csv parts reading)",
        "func": "/*//In the process, if file gets read in line by line\nlet update = context.get(\"update\");\nif (update == undefined) {\n    update = \"\";\n}\n\nif (msg.payload.fileData.indexOf(\"BAA\") == 0) {\n    let msg1 = {\n        payload: \"Check 1\",\n        position: msg.payload.fileData.indexOf(\"BAA\")\n    },\n        msg2 = {\n            payload: \"Check 2\"\n        }\n    return [msg1, msg]\n}\n*/\n\n// reading the file as a whole batch\n\nlet startIndex = msg.payload.fileData.indexOf(msg.payload.bypass.recipeIdentity); //Finds the unique key\nmsg.look = {\n    startIndex: startIndex,\n    search: msg.payload.bypass.recipeIdentity,\n    check: msg.payload.fileData.indexOf(msg.payload.bypass.recipeIdentity)\n}\nif (startIndex != -1) {\n    let end1 = \"\\r\\n\\r\\n\", // Finds the double new line (end of section)\n        end2 = \"\\n\\n\",\n        endIndex = -1;\n    if (msg.payload.fileData.indexOf(end1, startIndex) == -1) {\n        if (msg.payload.fileData.indexOf(end2, startIndex) == -1) {\n            node.warn('Cannot find end of index insert into HMI Recipe csv');\n        } else {\n            endIndex = msg.payload.fileData.indexOf(end2, startIndex);\n        }\n    } else {\n        endIndex = msg.payload.fileData.indexOf(end1, startIndex) + 2;\n    }\n        \n        //foundSection = msg.payload.fileData.slice(startIndex, endIndex);\n    msg.filename = msg.payload.bypass.filename;\n\n    msg.check = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        firstPart: msg.payload.fileData.slice(0, startIndex),\n        insert: msg.payload.bypass.text,\n        lastPart: msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length)\n\n    };\n\n    //Delete and insert\n    msg.payload = msg.payload.fileData.slice(0, startIndex) + msg.payload.bypass.text + msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length);\n} else {\n    msg.payload = msg.payload.fileData + msg.payload.bypass.text;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4230,
        "y": 4900,
        "wires": [
            [
                "797b5c9a9c6ad7b8",
                "da75d8cd36b0d376"
            ]
        ]
    },
    {
        "id": "797b5c9a9c6ad7b8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write Recipe File Exist",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4460,
        "y": 4840,
        "wires": []
    },
    {
        "id": "14d5ef8a8368fcf9",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4720,
        "y": 4900,
        "wires": [
            [
                "4bf3fc9956a31dd3"
            ]
        ]
    },
    {
        "id": "4bf3fc9956a31dd3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 125",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4870,
        "y": 4860,
        "wires": []
    },
    {
        "id": "5f858caa962e998c",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2360,
        "y": 4720,
        "wires": [
            [
                "52fb7c8c7dcbe77e"
            ]
        ]
    },
    {
        "id": "52fb7c8c7dcbe77e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set write -> HMI CSV",
        "func": "msg.payload = flow.get(\"writeData\");\n\n//Set\n\nlet data = msg.payload,\n    parKeys = Object.keys(data.parameterData),\n    basKey = Object.keys(data.basic),\n    names = [],\n    values = [],\n    instructions = [],\n    output = [],\n    parameterCount = 20, // Set\n    basicCount = basKey.length,\n    totalCount = 35, //basicCount + parameterCount;\n    count = 1;\n\nmsg.recipeIdentity = data.File_Code;\n// First part is mostly hard coded parameters\noutput.push([data.File_Code, 5, totalCount, , , ,],\n            [8, 20, 0, 0, , ,],\n            [5, 2, 4, 2, , ,],\n            [5, 2, 4, 2, , ,],\n            [0, 1, 0, 0, , ,],\n            [8, 25, 0, 0, , ,]);\n\n//First line of data is special\noutput.push([count++, data.File_Name, 0, 0, + data.Powered_Inspection, ,]);\n\n//del\nlet basicHeaders = [\"Ground Bond\", \"ACW Test\", \"Insulation Resistance\", \"Earth Leakage\"],\n    j = 0,\n    i = 0;\n\nfor(i = 0; i < basicCount - 1; i++) {\n    output.push([count++, basicHeaders[j++], data.basic[basKey[i++]], data.basic[basKey[i]], 0, ,]);\n}\noutput.push([count++, basicHeaders[j++], data.basic[basKey[i]], 0, 0, ,])\n\n//Incomplete: Assumption 1 that the length of incoming Parameter data is < \nfor (let i = 0; i < parKeys.length; i++) {/*\n    names.push(data.parameterData[parKeys[i]].name);\n    values.push(data.parameterData[parKeys[i]].value);\n    instructions.push(data.parameterData[parKeys[i]].instructions);*/\n    output.push([count++, data.parameterData[parKeys[i]].name.substring(0, 40), data.parameterData[parKeys[i]].value_H, data.parameterData[parKeys[i]].value_L, + data.parameterData[parKeys[i]].ifTestFailStop, data.parameterData[parKeys[i]].instructions.substring(0, 50)]);\n}/*\nfor (let i = basicCount + parKeys.length; i < totalCount - 1; i++) {// adds the zeros in using Assumption 1\n    output.push([count++, , 0, 0, 0,\"\"]);\n}*/\nwhile (count <= totalCount) {\n    output.push([count++, , 0, 0, 0, \"\"]);\n}\nlet text = \"\";\n//del\nnode.send([, {output: output}]);\n//\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    text += output[i].toString() + \"\\r\\n\";\n}\n\ntext += '\\r\\n';\n\nmsg.payload = {\n//    output: output,\n    text: text\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 4720,
        "wires": [
            [
                "33c974f546e17556",
                "2d41696a18e88a01"
            ],
            [
                "35e0776ee3d875af"
            ]
        ]
    },
    {
        "id": "33c974f546e17556",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Testing recipe",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2780,
        "y": 4680,
        "wires": []
    },
    {
        "id": "083c7d8a391fde5e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 126",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3310,
        "y": 4680,
        "wires": []
    },
    {
        "id": "bf6864ec2d7a5b95",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write to HMI CSV",
        "links": [
            "34c7ab41bb4b3dd7"
        ],
        "x": 2365,
        "y": 4640,
        "wires": [
            [
                "f44b2641331a775c",
                "52fb7c8c7dcbe77e"
            ]
        ]
    },
    {
        "id": "f44b2641331a775c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 112",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 4680,
        "wires": []
    },
    {
        "id": "ce4ffc901a2768a2",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3640,
        "y": 3160,
        "wires": []
    },
    {
        "id": "73e98307bfe33bc0",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "Start-Up",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "ca4e8d0a05d1833c"
            ]
        ]
    },
    {
        "id": "ca4e8d0a05d1833c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Start up Flow Variables",
        "func": "\n\nflow.set('recipeJSONlocation', \"C:/Users/User/Documents/Coding/Node Red/Recipes/\"); // Note that this ends with a /\nflow.set('HMIcsvLocation', \"C:/Users/User/Documents/Coding/Node Red/Recipes/\");\nflow.set('HMIrecipeName', 'NewEnRcp.csv');\nglobal.set('userCredentialsLocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/CSVs/');\nglobal.set('userCredentialsFilename', 'userCredentials.csv');\nif (flow.get('testResultID') == undefined) {\n    flow.set('testResultID', 236);\n}\nflow.set('stepResultsCSVlocation', 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/CSVs/')\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2be4d373775ce795",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Create First section of HMI csv",
        "func": "\n\nmsg.payload = { // Used for File Lister node\n    start: global.get('userCredentialsLocation'),\n    //Set: name of file with user names and passwords\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 4720,
        "wires": [
            [
                "5295bb96ba9d5449",
                "ceb27c5af4f2ec19"
            ]
        ]
    },
    {
        "id": "5295bb96ba9d5449",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 3620,
        "y": 4720,
        "wires": [
            [
                "7ceec3956a7dd616",
                "302dc2211d42de0e"
            ]
        ],
        "info": "Looking for the Operator credentials csv"
    },
    {
        "id": "7ceec3956a7dd616",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 127",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3790,
        "y": 4680,
        "wires": []
    },
    {
        "id": "302dc2211d42de0e",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3770,
        "y": 4720,
        "wires": [
            [
                "345bb44f70f03eb7",
                "413d54f4b5d93ff2"
            ],
            [
                "116e4541601aeeab",
                "584ae33d92cddd1e"
            ]
        ]
    },
    {
        "id": "345bb44f70f03eb7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Credential File Not Exist",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 4660,
        "wires": []
    },
    {
        "id": "116e4541601aeeab",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Credential File Exists",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3980,
        "y": 4800,
        "wires": []
    },
    {
        "id": "a0e48396595f0b35",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 4100,
        "y": 4760,
        "wires": [
            [
                "c77e73b050df7609"
            ]
        ]
    },
    {
        "id": "c77e73b050df7609",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4250,
        "y": 4760,
        "wires": [
            [
                "cb14a2cccdac1bc3",
                "2bbb7773229710e0"
            ]
        ]
    },
    {
        "id": "584ae33d92cddd1e",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set Filename",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3930,
        "y": 4760,
        "wires": [
            [
                "a0e48396595f0b35"
            ]
        ]
    },
    {
        "id": "cb14a2cccdac1bc3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "CSV output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4430,
        "y": 4720,
        "wires": []
    },
    {
        "id": "2bbb7773229710e0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set write -> HMI CSV",
        "func": "\nmsg.data.usernames = [];\nmsg.data.passwords = [];\n\nlet count = 1;\nlet output = [];\n\noutput.push(\n    ['ENRCP-4.0', , , , , , ],\n    ['Operator', 3, 30, , , , ],\n    [8, 20, 0, 0, , , ],\n    [8, 20, 0, 0, , , ],\n    [2, 1, 0, 0, , ,]);\n\n// Set: set the number of possible credential entries\nlet operatorCount = 30;\n\n//Set: The credential character limit\nlet credCharLimit = 40;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    msg.data.usernames.push(isNaN(msg.payload[i].username) ? msg.payload[i].username.substring(0, credCharLimit) : msg.payload[i].username.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be username\n    msg.data.passwords.push(msg.payload[i].password.toString().substring(0, credCharLimit)); // Hardcoded. The header for the csv has to be password\n}\n\nif (msg.data.usernames.length < operatorCount) { // Checks to make sure list of operators isn't longer than allowed count\nlet i = count; // Count is set to 1\n    for (i ; i <= msg.data.usernames.length; i++, count++) { // count and i start at 1 here for the ID / count column\n        output.push([count, msg.data.usernames[i-1], msg.data.passwords[i-1], 0, , , ]) // pushes in user row count, username and user ID\n    }\n\n    for (i; i <= operatorCount; i++, count++) {\n        output.push([count,'','', 0, , , ]);\n    }\n} else {\n    // Error handling for having more operators than will be loaded onto the PLCs\n    // Else the first 20 entries will be loaded in\n    for (let i = count; i <= operatorCount; i++, count++) {\n        output.push([count, msg.data.usernames[i - 1], msg.data.passwords[i - 1]]) // pushes in user row count, username and user ID\n    }\n}\n\n\nlet text = \"\";\nfor (let i = 0; i < output.length; i++) { // Putting it all into text format\n    text += output[i].toString() + \"\\r\\n\";\n}\ntext += '\\r\\n';\n\n//Setting up config for write file node\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; // This should be defined in 'Config FL Set Par' node\nmsg.payload = text + msg.data.text;\n\nmsg.check = {\n    output: output,\n    text: text\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4460,
        "y": 4760,
        "wires": [
            [
                "4b28ff99955b02d3",
                "5276a44f13b2ac4a"
            ]
        ]
    },
    {
        "id": "4b28ff99955b02d3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Write Recipe Initial Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4710,
        "y": 4720,
        "wires": []
    },
    {
        "id": "5a1aa2cf708531e2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Set Payload",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 4700,
        "wires": [
            [
                "7193f4f49117ee08"
            ]
        ]
    },
    {
        "id": "35e0776ee3d875af",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 128",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2800,
        "y": 4800,
        "wires": []
    },
    {
        "id": "d7861c4242485729",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Set Label",
        "func": "// Uncomplete: ACTIVE Need to make check for if test mode hasn't been changed\nif (msg.topic == 'clear') {\n    msg.payload = false;\n    return msg\n} else if (msg.payload != undefined) {\n    msg.payload = msg.payload.Powered_Inspection;\n}\nmsg.topic = \"poweredInspection\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 3760,
        "wires": [
            [
                "f3242e7aa08bbe15",
                "2b4327fa36f4764a"
            ]
        ]
    },
    {
        "id": "f3242e7aa08bbe15",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "debug 129",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 3720,
        "wires": []
    },
    {
        "id": "71740d665d2b24ce",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 805,
        "y": 3700,
        "wires": []
    },
    {
        "id": "21a6805e17ec8f57",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode in",
        "links": [
            "5491c556639992d7",
            "c20be865f12bee03"
        ],
        "x": 265,
        "y": 3800,
        "wires": [
            [
                "d7861c4242485729",
                "8c4d5f66a4a69ab8"
            ]
        ]
    },
    {
        "id": "99276769c25c9fee",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "Test Mode Switch",
        "info": "",
        "x": 180,
        "y": 3680,
        "wires": []
    },
    {
        "id": "4b2b22c5d0a6f485",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "4aa1750b24b81f9a"
            ]
        ]
    },
    {
        "id": "4aa1750b24b81f9a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "confid Read",
        "func": "msg.filename = 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/sampleStepResults1.csv';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 180,
        "wires": [
            [
                "2a1e58aec39be6fd"
            ]
        ]
    },
    {
        "id": "2a1e58aec39be6fd",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1370,
        "y": 180,
        "wires": [
            [
                "09e27bcf278552bf"
            ]
        ]
    },
    {
        "id": "09e27bcf278552bf",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1550,
        "y": 180,
        "wires": [
            [
                "9763d85265458477",
                "a6f71a0b8281dc24"
            ]
        ]
    },
    {
        "id": "9763d85265458477",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Select Data",
        "func": "let output = [],\n    temp = [],\n    headers = [\n        'Step_Number',\n        'Step_Start',\n        'Step_Stop',\n        'Measurement',\n        'Max_Allowed',\n        'Min_Allowed',\n        'Result',\n        'Test_Type',\n        'Comparison',\n        'Step_Name',\n    ];\n    \n    msg.sql = {\n        headers: headers\n    };\nfor (let i = 0; i < msg.payload.length; i++){\n    temp.push(msg.payload[i].Step_Number);\n    temp.push(msg.payload[i].Step_Start);\n    temp.push(msg.payload[i].Step_Stop);\n    temp.push(msg.payload[i].Measurement);\n    temp.push(msg.payload[i].Max);\n    temp.push(msg.payload[i].Min);\n    temp.push(msg.payload[i].Result);\n    temp.push(msg.payload[i].Test_Type); // Ours is test name\n    temp.push(msg.payload[i].Comparison);\n    temp.push(msg.payload[i].Step_Name);\n\n    output.push(temp);\n    temp = [];\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 180,
        "wires": [
            [
                "7818f055fa547e34",
                "7b8e21c6cb507ef4"
            ]
        ]
    },
    {
        "id": "a6f71a0b8281dc24",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 130",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 100,
        "wires": []
    },
    {
        "id": "7b8e21c6cb507ef4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Statement",
        "func": "// Insert statement\nlet task = \"INSERT INTO \",\n    tableName = \"[NodeRed].[dbo].[DefyTestResults] \",\n    headers = \"( \" + msg.sql.headers.toString() + \" )\",\n    valueText = \"\",\n    values = [];\n;\nmsg.payload.forEach((array) => {\n\n    // Some are numbers, some are text. For loop is eaasier to catch those\n    let i = 0; // Count of i will be kept\n    valueText += array[i++].toString(); // First instance put in so the comma insert works\n\n    for (i; i <= 5; i++) { // Adds up the numbers\n        valueText += \", \" + array[i].toString();\n    }\n\n    for (i; i <= 9; i++) { // Catching the text fields\n        valueText += \", '\" + array[i] + \"'\"; \n    }\n\n    valueText = \" VALUES ( \" + valueText + \" ) \";\n    node.send({ \n        payload: task + tableName + headers + valueText,\n        topic: array[0] // Using the Step number to define each, should use unique ID\n        });\n    values.push(valueText);\n\n    valueText = \"\";\n});\n\n/* //del\nlet sqlStatement = task + tableName + headers;// NOt being used\nmsg.payload = sqlStatement + values[0];\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 180,
        "wires": [
            [
                "1fe255fa2794954c"
            ]
        ]
    },
    {
        "id": "7818f055fa547e34",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 120,
        "wires": []
    },
    {
        "id": "3bb7698b3e5ec4af",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2370,
        "y": 180,
        "wires": [
            [
                "190d0e831d8fc1a3",
                "e0b08af5f1ae6196"
            ]
        ]
    },
    {
        "id": "190d0e831d8fc1a3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 132",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2580,
        "y": 120,
        "wires": []
    },
    {
        "id": "1fe255fa2794954c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 133",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 120,
        "wires": []
    },
    {
        "id": "d4035602d8249960",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 180,
        "wires": [
            [
                "48455d087a4e0b9d",
                "3bb7698b3e5ec4af"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "48455d087a4e0b9d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 120,
        "wires": []
    },
    {
        "id": "e0b08af5f1ae6196",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 180,
        "wires": [
            [
                "223476e9236b84c1",
                "d4035602d8249960"
            ]
        ]
    },
    {
        "id": "223476e9236b84c1",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 135",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 140,
        "wires": []
    },
    {
        "id": "b3dc63baf9eada1f",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1019.0000839233398,
        "y": 241.00002098083496,
        "wires": [
            [
                "ecfca275bcbbfedc"
            ]
        ]
    },
    {
        "id": "ecfca275bcbbfedc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "confid Read",
        "func": "msg.filename = 'C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/sampleStepResults2.csv';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1199.0000839233398,
        "y": 241.00002098083496,
        "wires": [
            [
                "2a1e58aec39be6fd"
            ]
        ]
    },
    {
        "id": "c19459db7cfff34a",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DELETE FROM [NodeRed].[dbo].[DefyTestResults] WHERE Step_Result_ID > 785;",
        "payloadType": "str",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "5e254dc64b4d544c"
            ]
        ]
    },
    {
        "id": "5e254dc64b4d544c",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "dc80075d0a09fb0a"
            ]
        ]
    },
    {
        "id": "dc80075d0a09fb0a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 280,
        "wires": []
    },
    {
        "id": "aa780d419e8f6b42",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "3fca0b21b8accf41"
            ]
        ]
    },
    {
        "id": "3fca0b21b8accf41",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Select Test_Result_ID",
        "func": "msg.payload = \"SELECT Test_Result_ID FROM [NodeRed].[dbo].[DefyTestResults] WHERE Step_Result_ID = 785\";\nlet bypass = {\n    payload:  \"Beep beep boo pah\",\n    topic: 'delay',\n    lineFlag: 'delay'\n}\nreturn [msg, bypass];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "3aa23e148834c839"
            ],
            [
                "9959ae60b0a3a77b"
            ]
        ]
    },
    {
        "id": "3aa23e148834c839",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "51bb1227a8ba604c",
                "d34d1e5d368a93f2"
            ]
        ]
    },
    {
        "id": "51bb1227a8ba604c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 137",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 300,
        "wires": []
    },
    {
        "id": "d34d1e5d368a93f2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check MSQL request (single)",
        "func": "let clearNotifications = {\n    payload: \"\"\n};\n\nlet buffer = context.get('buffer')\nif ((msg.topic ==  \"\") && (buffer == undefined)) { // checks if messae is from msql node and if the delay message hasn't arived yet\n    context.set('buffer', 'defined')\n    return [msg, clearNotifications];\n} else if ((msg.topic == 'delay') && (buffer == undefined)) {\n    msg.lineFlag = 'failed'\n    return[msg, {\n        payload: 'Unable to connect to MSQL'\n    }]\n} else if ((msg.topic == 'delay') && (buffer = 'defined')) {\n    context.set('buffer', undefined);\n    return [ , clearNotifications];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 360,
        "wires": [
            [
                "c734afdff48ba802"
            ],
            [
                "fd75bdd415f1305b"
            ]
        ]
    },
    {
        "id": "c734afdff48ba802",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 300,
        "wires": []
    },
    {
        "id": "9959ae60b0a3a77b",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 420,
        "wires": [
            [
                "2592de2ae30cd15a",
                "d34d1e5d368a93f2"
            ]
        ]
    },
    {
        "id": "b1f56dbf284db42e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3260,
        "wires": [
            [
                "309e371ea5373261",
                "c99ab709f0aeb3be"
            ]
        ]
    },
    {
        "id": "309e371ea5373261",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3260,
        "wires": [
            [
                "18ef3063a91b0ba8"
            ]
        ]
    },
    {
        "id": "e6ded747053a525e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values Clear",
        "func": "msg.payload = msg.data.value_L;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 3140,
        "wires": [
            [
                "9b169584105c42ae",
                "309e371ea5373261",
                "3c8c2f3578771f8f",
                "100dd1dd8d73c3d6",
                "b6bbc5fd8357f0bb",
                "5526bcc863448d40",
                "0652b1ce7a1ae425",
                "d6f5acf9b6c7cbbd",
                "2776f1bd6caf4f04",
                "7a88a2c1bd9c33c1",
                "61562372903424fa",
                "b17f1329fe4eb1f6",
                "6305b62164d35915",
                "9b4223a62058e709",
                "b727df08d51ce066",
                "037034079127a2b0",
                "3585927da5c2d263",
                "f0a095a16bd8acb5",
                "01f9c38589ef10f1",
                "84b144a77fa389fe",
                "c7af44a4842f543f"
            ]
        ]
    },
    {
        "id": "c99ab709f0aeb3be",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Value_L",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 3200,
        "wires": []
    },
    {
        "id": "c9d917bc3167530b",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Comment Notes",
        "info": "Make sure values and names are filled in with pop up",
        "x": 2880,
        "y": 3100,
        "wires": []
    },
    {
        "id": "25801c5089c5b1ce",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3320,
        "wires": [
            [
                "3c8c2f3578771f8f"
            ]
        ]
    },
    {
        "id": "3c8c2f3578771f8f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3320,
        "wires": [
            [
                "c202f860f300dd1c"
            ]
        ]
    },
    {
        "id": "632af3e981c92951",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3380,
        "wires": [
            [
                "100dd1dd8d73c3d6"
            ]
        ]
    },
    {
        "id": "100dd1dd8d73c3d6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3380,
        "wires": [
            [
                "5359eaba19c58239"
            ]
        ]
    },
    {
        "id": "1fd9ff0c92ddb561",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3440,
        "wires": [
            [
                "b6bbc5fd8357f0bb"
            ]
        ]
    },
    {
        "id": "b6bbc5fd8357f0bb",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3440,
        "wires": [
            [
                "ee95a66edfc95802"
            ]
        ]
    },
    {
        "id": "5526bcc863448d40",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3500,
        "wires": [
            [
                "0e6c49b076b012bc"
            ]
        ]
    },
    {
        "id": "78756f98cc3c8f5c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3500,
        "wires": [
            [
                "5526bcc863448d40"
            ]
        ]
    },
    {
        "id": "395a1fe5558000fe",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3560,
        "wires": [
            [
                "0652b1ce7a1ae425"
            ]
        ]
    },
    {
        "id": "0652b1ce7a1ae425",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3560,
        "wires": [
            [
                "616cdb8b4a91f8d0"
            ]
        ]
    },
    {
        "id": "15055cf5c0c97871",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3620,
        "wires": [
            [
                "d6f5acf9b6c7cbbd"
            ]
        ]
    },
    {
        "id": "d6f5acf9b6c7cbbd",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3620,
        "wires": [
            [
                "9531ac04bcd23625"
            ]
        ]
    },
    {
        "id": "09ff067d6f4d65b7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3680,
        "wires": [
            [
                "2776f1bd6caf4f04"
            ]
        ]
    },
    {
        "id": "2776f1bd6caf4f04",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par08",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3680,
        "wires": [
            [
                "fd2a3ef97a49072e"
            ]
        ]
    },
    {
        "id": "233a5c903ad58318",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3740,
        "wires": [
            [
                "7a88a2c1bd9c33c1"
            ]
        ]
    },
    {
        "id": "7a88a2c1bd9c33c1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par09",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3740,
        "wires": [
            [
                "9ab08412c6e74e58"
            ]
        ]
    },
    {
        "id": "92d20d4da091f095",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3800,
        "wires": [
            [
                "61562372903424fa"
            ]
        ]
    },
    {
        "id": "61562372903424fa",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 20,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par10",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3800,
        "wires": [
            [
                "4ddd0b8db61e74a2"
            ]
        ]
    },
    {
        "id": "2253e279b393c8e5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3900,
        "wires": [
            [
                "b17f1329fe4eb1f6"
            ]
        ]
    },
    {
        "id": "95a390cccc91bb4f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3960,
        "wires": [
            [
                "6305b62164d35915"
            ]
        ]
    },
    {
        "id": "7dfd882a19890d6c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4020,
        "wires": [
            [
                "9b4223a62058e709"
            ]
        ]
    },
    {
        "id": "fc019687c92b6315",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4080,
        "wires": [
            [
                "b727df08d51ce066"
            ]
        ]
    },
    {
        "id": "f6c30290139cc733",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4140,
        "wires": [
            [
                "037034079127a2b0"
            ]
        ]
    },
    {
        "id": "2b7ac366f673910f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4200,
        "wires": [
            [
                "3585927da5c2d263"
            ]
        ]
    },
    {
        "id": "4a8f6d813f9bbf97",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4260,
        "wires": [
            [
                "f0a095a16bd8acb5"
            ]
        ]
    },
    {
        "id": "a779c9927e54a2e5",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4320,
        "wires": [
            [
                "01f9c38589ef10f1"
            ]
        ]
    },
    {
        "id": "82878728d1ca889f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4380,
        "wires": [
            [
                "84b144a77fa389fe"
            ]
        ]
    },
    {
        "id": "864a66d89248da13",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    if (msg.data.value_L == \"\") { // Undefined payload will move message along this chain\n        msg.payload = undefined;\n    } else {\n        msg.payload = msg.data.value_L;\n    };\n} else {\n    if (msg.store == undefined) { // Store is used for input coming from the dashboard\n        msg.store = {};\n    }\n    msg.store.value_H = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 4440,
        "wires": [
            [
                "c7af44a4842f543f"
            ]
        ]
    },
    {
        "id": "b17f1329fe4eb1f6",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par11",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3900,
        "wires": [
            [
                "c98e11288469df69"
            ]
        ]
    },
    {
        "id": "6305b62164d35915",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par12",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 3960,
        "wires": [
            [
                "7baa406586600e21"
            ]
        ]
    },
    {
        "id": "9b4223a62058e709",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par13",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4020,
        "wires": [
            [
                "cefe53cbb9e1e213"
            ]
        ]
    },
    {
        "id": "b727df08d51ce066",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par14",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4080,
        "wires": [
            [
                "1d9b742629050d78"
            ]
        ]
    },
    {
        "id": "037034079127a2b0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par15",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4140,
        "wires": [
            [
                "45b5ae5b0e7f3f32"
            ]
        ]
    },
    {
        "id": "3585927da5c2d263",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par16",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4200,
        "wires": [
            [
                "66f0a0394b718051"
            ]
        ]
    },
    {
        "id": "f0a095a16bd8acb5",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par17",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4260,
        "wires": [
            [
                "a086fbebea3be518"
            ]
        ]
    },
    {
        "id": "01f9c38589ef10f1",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par18",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4320,
        "wires": [
            [
                "7921f6a6311ffe60"
            ]
        ]
    },
    {
        "id": "84b144a77fa389fe",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par19",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4380,
        "wires": [
            [
                "5b676dccce7cc180"
            ]
        ]
    },
    {
        "id": "c7af44a4842f543f",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "label": "Lower Limit",
        "tooltip": "",
        "group": "d53c3b4207d65609",
        "order": 20,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Par20",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2810,
        "y": 4440,
        "wires": [
            [
                "f4ace34ae4baba5f"
            ]
        ]
    },
    {
        "id": "1ecbe77e34c76305",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Par01",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par02",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par03",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par05",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par06",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par07",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par08",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par09",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par12",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par13",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par14",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par15",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par17",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par18",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par19",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Par20",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 20,
        "x": 3430,
        "y": 2960,
        "wires": [
            [
                "7f6b3e9b0dcd801d"
            ],
            [
                "5e46214c6c8b4ad1"
            ],
            [
                "5f829afab5a23b18"
            ],
            [
                "27b9bf8332f35605"
            ],
            [
                "335532f4665b13f3"
            ],
            [
                "d2eaed159558c4a1"
            ],
            [
                "3349a5b0860abb2c"
            ],
            [
                "4f37728f34a31d94"
            ],
            [
                "c62fb7bf6a40d9f7"
            ],
            [
                "efaa861fcf7780df"
            ],
            [
                "5d41aec97a8898b4"
            ],
            [
                "fe59b8c4701a5213"
            ],
            [
                "e25725d354b268fc"
            ],
            [
                "96586ba7c7018640"
            ],
            [
                "cc6c54cfb8954c4b"
            ],
            [
                "877a44dd24e924c1"
            ],
            [
                "69d627f7fb70d0d8"
            ],
            [
                "af82125b0a5951e0"
            ],
            [
                "87d9557dc8c8d386"
            ],
            [
                "3fc93505fc164a58"
            ]
        ]
    },
    {
        "id": "bddb69069124ce54",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Set Label",
        "func": "msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 2960,
        "wires": [
            [
                "73f2233f11e04a87",
                "1ecbe77e34c76305"
            ]
        ]
    },
    {
        "id": "73f2233f11e04a87",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "debug 146",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4020,
        "y": 2880,
        "wires": []
    },
    {
        "id": "4112bea69fc78e5f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Buffer",
        "func": "let clearNotifications = {\n    payload: \"\"\n};\n\n// Check for trigger\nif (msg.lineFlag == \"clear\") {\n    context.set('buffer', undefined);\n    return [null, ];\n    \n} else if  (msg.complete != undefined) {\n    msg.payload = context.get('buffer');\n\n    //Checks\n    let errorChecks = false,\n        errorText1 = \"\",\n        errorText2 = \"\";\n\n    for (const key in msg.payload) {\n        if (((msg.payload[key].name == \"\") || (msg.payload[key].value_H == \"\") || (msg.payload[key].value_L == \"\")) && msg.payload[key].instructions) { // If either name or values are kept empty\n            errorChecks = true;\n            errorText1 = 'Rows that have values must have both Parameter Name and Parameter sections filled \\n';\n\n        } else if (msg.payload[key].value_L > msg.payload[key].value_H) { // If lower limit > upper limit\n            errorChecks = true;\n             errorText2 = 'Upper limits cannot be smaller than lower limits. Please check values.';\n\n        } \n    };\n    //\n    if (errorChecks) {\n        return [ ,{\n            payload : errorText1 + errorText2\n        }]\n    } else {\n        return [msg, clearNotifications];\n    } \n    return [msg, ];\n}\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Add the incoming message payload and topic to the buffer\nbuffer[msg.topic] = msg.payload;\n\n// Set the buffer array back to context\ncontext.set('buffer', buffer);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 3380,
        "wires": [
            [
                "96a583357f096554",
                "9e937f47df2abe53"
            ],
            [
                "122bca42c0dad41f",
                "d3d9847c7a50a19d"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "0bd567f1fc88482e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "debug 147",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4370,
        "y": 3100,
        "wires": []
    },
    {
        "id": "1ea3b76c92b8cd98",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "578d44d18df9e87c",
        "name": "debug 148",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 1640,
        "wires": []
    },
    {
        "id": "f9a5c6aa0d5f1f34",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg,];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3320,
        "wires": [
            [
                "e3afdabecfeaae99"
            ],
            [
                "5e46214c6c8b4ad1"
            ]
        ]
    },
    {
        "id": "83381a9440f7d473",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3380,
        "wires": [
            [
                "e536fc03ac4e3630"
            ],
            [
                "5f829afab5a23b18"
            ]
        ]
    },
    {
        "id": "261b15e381f744a0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3440,
        "wires": [
            [
                "a4ffb21e50c6ac22"
            ],
            [
                "27b9bf8332f35605"
            ]
        ]
    },
    {
        "id": "f7c0c07f0f304c41",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3500,
        "wires": [
            [
                "60a158e0a8e6881d"
            ],
            [
                "335532f4665b13f3"
            ]
        ]
    },
    {
        "id": "d621e9465ea398a9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3560,
        "wires": [
            [
                "794d86be1f167840"
            ],
            [
                "d2eaed159558c4a1"
            ]
        ]
    },
    {
        "id": "d021957cd0b22183",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3620,
        "wires": [
            [
                "0bfd7e5a3fc79cda"
            ],
            [
                "3349a5b0860abb2c"
            ]
        ]
    },
    {
        "id": "321f6e44d6ee13fa",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3680,
        "wires": [
            [
                "ad8f6b08149b3f56"
            ],
            [
                "4f37728f34a31d94"
            ]
        ]
    },
    {
        "id": "0861c7fe61c6e97e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3740,
        "wires": [
            [
                "268e17dc1e5ccfe6"
            ],
            [
                "c62fb7bf6a40d9f7"
            ]
        ]
    },
    {
        "id": "c48c4676e563826c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3800,
        "wires": [
            [
                "51030e7351e9c9b4"
            ],
            [
                "efaa861fcf7780df"
            ]
        ]
    },
    {
        "id": "af9c8519b05c1256",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3900,
        "wires": [
            [
                "c42a7599eccd1dc3"
            ],
            [
                "5d41aec97a8898b4"
            ]
        ]
    },
    {
        "id": "6641b0ca1fa79c40",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 3960,
        "wires": [
            [
                "79d9a91def69164b"
            ],
            [
                "fe59b8c4701a5213"
            ]
        ]
    },
    {
        "id": "4bfa9843befe2354",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4020,
        "wires": [
            [
                "07defb8f1c691501"
            ],
            [
                "e25725d354b268fc"
            ]
        ]
    },
    {
        "id": "602ee0125a53ecbc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4080,
        "wires": [
            [
                "3c9d5c86dd964b4c"
            ],
            [
                "96586ba7c7018640"
            ]
        ]
    },
    {
        "id": "2973a2e9f4fdaaec",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4140,
        "wires": [
            [
                "30b35ab770244a68"
            ],
            [
                "cc6c54cfb8954c4b"
            ]
        ]
    },
    {
        "id": "e34666708236a0b2",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4200,
        "wires": [
            [
                "f7084112be474de3"
            ],
            [
                "877a44dd24e924c1"
            ]
        ]
    },
    {
        "id": "d028f35cdd094cdc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4260,
        "wires": [
            [
                "e851b130bad134b6"
            ],
            [
                "69d627f7fb70d0d8"
            ]
        ]
    },
    {
        "id": "8efb05d5a8158ef4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4320,
        "wires": [
            [
                "f0e56ce48b2963ce"
            ],
            [
                "af82125b0a5951e0"
            ]
        ]
    },
    {
        "id": "03eefb5aab06decf",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4380,
        "wires": [
            [
                "f3c31e45b921299e"
            ],
            [
                "87d9557dc8c8d386"
            ]
        ]
    },
    {
        "id": "a3c86839d53f05ed",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "If Test Fail Stop",
        "func": "msg.smallFlag = 'bypass';\nif (msg.data != undefined) {\n    msg.payload = msg.data.ifTestFailStop;\n    msg.label = (msg.payload) ? \"STOP  on fail\" : \"CONTINUE on fail\";\n    return [msg, msg];\n} else {  // Store is used for input coming from the dashboard\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.instructions = msg.payload;\n    delete msg.payload;\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 4440,
        "wires": [
            [
                "3d3486882a87c0e7"
            ],
            [
                "3fc93505fc164a58"
            ]
        ]
    },
    {
        "id": "122bca42c0dad41f",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 4550,
        "y": 3400,
        "wires": [
            []
        ]
    },
    {
        "id": "d3d9847c7a50a19d",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "760cf0eee010fae5",
        "name": "Parameter error out",
        "mode": "link",
        "links": [
            "c7a80db6e1441f4f"
        ],
        "x": 4495,
        "y": 3440,
        "wires": []
    },
    {
        "id": "2592de2ae30cd15a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 149",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 480,
        "wires": []
    },
    {
        "id": "fd75bdd415f1305b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 152",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 420,
        "wires": []
    },
    {
        "id": "12e8cfd55bd6f932",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Float write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12.5",
        "payloadType": "num",
        "x": 200,
        "y": 2960,
        "wires": [
            [
                "fbe9023f2366e5bb"
            ]
        ]
    },
    {
        "id": "df6da89a12f26db4",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2900,
        "wires": []
    },
    {
        "id": "4ea21dda80af99ec",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Write Float 2W",
        "func": "var buf;\nvar fc=16;\nvar sa=msg.sa;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2960,
        "wires": [
            [
                "a41742725ab5987b",
                "df6da89a12f26db4"
            ]
        ]
    },
    {
        "id": "a41742725ab5987b",
        "type": "modbus-flex-write",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 830,
        "y": 2960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fbe9023f2366e5bb",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "function 20",
        "func": "msg.payload = [\n    7.3,\n    85.5, \n    3000, \n    0.2, \n    7.012];\nlet sa = 0;\n\n/*\nlet sa = 200;\nmsg.payload = [\n    1863,\n    4\n];*/\nfor (let i = 0; i < msg.payload.length; i++) {\n    node.send({\n        payload: msg.payload[i],\n        sa: sa\n    })\n    sa = sa + 2\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2960,
        "wires": [
            [
                "4ea21dda80af99ec"
            ]
        ]
    },
    {
        "id": "2afb31f338f918e7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Write Reg as Char",
        "func": "//Par.Names\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3060,
        "wires": [
            [
                "c0eed8ccb5e34a3c",
                "38374f02c85e3efa"
            ]
        ]
    },
    {
        "id": "38374f02c85e3efa",
        "type": "modbus-flex-write",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 3060,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c0eed8ccb5e34a3c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 3000,
        "wires": []
    },
    {
        "id": "b49c91e11fc35baa",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Char Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 3060,
        "wires": [
            [
                "cb8d00cf3af12820"
            ]
        ]
    },
    {
        "id": "cb8d00cf3af12820",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "function 21",
        "func": "\nlet arr = [\"8100084100\", \"Gio\"]\nmsg.payload = {\n    values: arr,\n    sa: 300,\n    entryRegisterLength: 10,\n    entryCount: 2\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3060,
        "wires": [
            [
                "a94da27ee4dd7d33",
                "2afb31f338f918e7"
            ]
        ]
    },
    {
        "id": "a94da27ee4dd7d33",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 180",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 3020,
        "wires": []
    },
    {
        "id": "4447ccc91c15c26d",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Load to PLC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 4060,
        "wires": [
            [
                "dc9c85c407d1c0ab"
            ]
        ]
    },
    {
        "id": "dc9c85c407d1c0ab",
        "type": "ftp in",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 350,
        "y": 4060,
        "wires": [
            [
                "afb8f594f1e07231",
                "2ffd48c752714782"
            ]
        ]
    },
    {
        "id": "afb8f594f1e07231",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "debug 190",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 4000,
        "wires": []
    },
    {
        "id": "2ffd48c752714782",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 4060,
        "wires": [
            [
                "dacc99015ddc50b4"
            ]
        ]
    },
    {
        "id": "dacc99015ddc50b4",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 710,
        "y": 4060,
        "wires": [
            [
                "ce9e314b2ee5db14"
            ]
        ]
    },
    {
        "id": "ce9e314b2ee5db14",
        "type": "modbus-write",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 880,
        "y": 4060,
        "wires": [
            [],
            [
                "3b96d386eb8e1a7a"
            ]
        ]
    },
    {
        "id": "f3faffe6a0f822d1",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "Load To PLC",
        "info": "",
        "x": 130,
        "y": 3980,
        "wires": []
    },
    {
        "id": "2b4327fa36f4764a",
        "type": "ui_switch",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "",
        "label": "Powered on inpsection",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 640,
        "y": 3760,
        "wires": [
            [
                "71740d665d2b24ce"
            ]
        ]
    },
    {
        "id": "79439506b1a6acc3",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "Ground Bond High",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "GB_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3710,
        "y": 220,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "c1e62858976a3769",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GB_H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GB_L",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ACW_H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ACW_L",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IR_H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IR_L",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ELC_H",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 3410,
        "y": 380,
        "wires": [
            [
                "79439506b1a6acc3"
            ],
            [
                "dcdc69295a6f5f76"
            ],
            [
                "c00ecaddc6014250"
            ],
            [
                "a93080aeaf3c5e79"
            ],
            [
                "b10bca5a4658bf5c"
            ],
            [
                "9ecb940b93d33cdf"
            ],
            [
                "9b41e9467bf30ec0"
            ]
        ]
    },
    {
        "id": "517b54151287feac",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Buffer",
        "func": "// Check for trigger\nif (msg.complete != undefined && msg.topic == 'save') { // Buffer trigger is msg.complete existing\n    if (msg.lineFlag == 'completedWithChecks') {\n        // set payload with buffer and clear buffer if final checks have been done, indicated by the msg.lineFlag = \"completedWithChecks\"\n        //context.set('buffer', undefined)\n        return [msg, ];\n    }\n    msg.payload = context.get('buffer');\n    return [ ,msg]; // Go to line with checks\n}\n\nif (msg.lineFlag == \"clear\") {\n    context.set('buffer', undefined);\n}\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Add / Delete the incoming message payload and topic to the buffer\nif ((msg.payload == null) && (msg.topic in buffer)) {// If field is cleared\n    delete buffer[msg.topic];\n} else { // if any other data point comes through thats not empty, save it\n    buffer[msg.topic] = msg.payload;\n}\n\n// Set the buffer array back to context\ncontext.set('buffer', buffer);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 220,
        "wires": [
            [
                "d235074ffad9a339",
                "b9fe3a978a99d255"
            ],
            [
                "306199d1b0477757",
                "fb7182813481b720"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "d1d3234b068b85f6",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4010,
        "y": 80,
        "wires": []
    },
    {
        "id": "b3fc76dda4049346",
        "type": "split",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 3270,
        "y": 380,
        "wires": [
            [
                "c1e62858976a3769",
                "60c34f98e1e26dba"
            ]
        ]
    },
    {
        "id": "77c1c19ba436284e",
        "type": "split",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 3270,
        "y": 320,
        "wires": [
            [
                "c1e62858976a3769"
            ]
        ]
    },
    {
        "id": "dcdc69295a6f5f76",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "Ground Bond Low",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "GB_L",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3710,
        "y": 280,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "c00ecaddc6014250",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "ACW High",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "ACW_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3690,
        "y": 340,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "a93080aeaf3c5e79",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "ACW Low",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "ACW_L",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3680,
        "y": 400,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "b10bca5a4658bf5c",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "Insulation Resistance High",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "IR_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3740,
        "y": 460,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "9ecb940b93d33cdf",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "Insulation Resistance Low",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "IR_L",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3730,
        "y": 520,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "9b41e9467bf30ec0",
        "type": "ui_text_input",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "",
        "label": "Earth Leakage Current High",
        "tooltip": "",
        "group": "218e00eac196634f",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "ELC_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3740,
        "y": 580,
        "wires": [
            [
                "517b54151287feac",
                "d1d3234b068b85f6"
            ]
        ]
    },
    {
        "id": "6a9e30f65e495bca",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic Buffer in",
        "links": [
            "a5d2df37afae85ec",
            "b4b222f939895c2c"
        ],
        "x": 4055,
        "y": 420,
        "wires": [
            [
                "517b54151287feac"
            ]
        ]
    },
    {
        "id": "b9fe3a978a99d255",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 102",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4250,
        "y": 100,
        "wires": []
    },
    {
        "id": "306199d1b0477757",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Checks (Has Sets)",
        "func": "// Set\nif(msg.lineFlag == \"clear\")\n    return null;\nlet basicFormElements = { // Has the correct order of members\n    \"GB_H\" : \"Ground Bond High\",\n    \"GB_L\": \"Ground Bond Low\",\n    \"ACW_H\": \"ACW_H\",\n    \"ACW_L\": \"ACW_L\",\n    \"IR_H\": \"Insulation Resistance High\",\n    \"IR_L\": \"Insulation Resistance Low\",\n    \"ELC_H\" : \"Earth Leakage Current High\"\n},\n    output = {},\n    missing = [];\n \nif (msg.payload == undefined) { // checks if nothing was in the buffer's context variable, if so, make it empty\n    msg.payload = { // copy basicFormsElements into payload\n        ...basicFormElements\n    };\n    for(var key in msg.payload) {\n        output[key] = -1;\n        missing.push(basicFormElements[key]);\n    }\n} else {\n    for (var key in basicFormElements) {\n        if (msg.payload.hasOwnProperty(key) && msg.payload[key] != \"\") {\n            output[key] = msg.payload[key]\n        } else {\n            missing.push(basicFormElements[key])\n            output[key] = -1;\n        }\n    }\n}\n\nmsg.data  = {\n    output: output,\n    missing: missing\n}\n\nif (missing.length > 0) { // If the full basic form is not filled in\n    let status = 'The following elements have been left out in the \"Basics\" section: || ';\n    for(let i = 0; i < missing.length; i++) {\n        status += missing[i] + \" || \";\n    }\n    msg.payload = status;\n    return [ , msg];\n} else { // if full basic form is completed\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = output;\n    delete msg.data; // Not needed once checks are completed.\n    return [msg, ];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4290,
        "y": 260,
        "wires": [
            [
                "40226ce37f97e01d",
                "c08febe6a2ea67d1"
            ],
            [
                "071e0510fb46c738",
                "a5f50c3adfd68f30"
            ]
        ]
    },
    {
        "id": "d235074ffad9a339",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Send Join / Save Return",
        "func": "// Set things up for the Final join node\nlet joinNodeMsg = {\n    payload : msg.payload,\n    topic   : 'basic'\n}\n\nlet saveMsg = {\n    payload : \"\",\n    topic   : 'save',\n    lineFlag: 'save',\n    complete: ''\n}\nreturn [joinNodeMsg, saveMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "e65f384ee41cf598",
                "03d1c3ba697c94e4"
            ],
            [
                "899982ab2aee5dab",
                "b19f1d350c2fabd7"
            ]
        ]
    },
    {
        "id": "fb7182813481b720",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 115",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4280,
        "y": 320,
        "wires": []
    },
    {
        "id": "95d97aea64d77131",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Set Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.basic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3110,
        "y": 380,
        "wires": [
            [
                "b3fc76dda4049346",
                "fc30dfd1f0cc21cf"
            ]
        ]
    },
    {
        "id": "9434a0f72f5dcdb1",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Del trigger",
        "rules": [
            {
                "t": "delete",
                "p": "complete",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3110,
        "y": 320,
        "wires": [
            [
                "77c1c19ba436284e"
            ]
        ]
    },
    {
        "id": "40226ce37f97e01d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 109",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4490,
        "y": 320,
        "wires": []
    },
    {
        "id": "071e0510fb46c738",
        "type": "ui_toast",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "PROCEED ANYWAY",
        "cancel": "GO BACK",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 4490,
        "y": 280,
        "wires": [
            [
                "73d41cef94786e51",
                "d74b12cee713ed7e"
            ]
        ]
    },
    {
        "id": "e65f384ee41cf598",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 114",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4490,
        "y": 60,
        "wires": []
    },
    {
        "id": "899982ab2aee5dab",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 117",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4530,
        "y": 100,
        "wires": []
    },
    {
        "id": "03d1c3ba697c94e4",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 4465,
        "y": 160,
        "wires": []
    },
    {
        "id": "b19f1d350c2fabd7",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Save Out From Basic",
        "mode": "link",
        "links": [
            "37a523ac432e0d6b"
        ],
        "x": 4505,
        "y": 180,
        "wires": []
    },
    {
        "id": "039d4dbe4e2b78e1",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic Tests in",
        "links": [
            "5491c556639992d7"
        ],
        "x": 2995,
        "y": 420,
        "wires": [
            [
                "95d97aea64d77131",
                "3156f4f0d86003a5"
            ]
        ]
    },
    {
        "id": "fc30dfd1f0cc21cf",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 105",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 420,
        "wires": []
    },
    {
        "id": "3590ea7d7ffab34f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Clear node msg",
        "func": "if (msg.complete != undefined) {\n    msg = { \n        lineFlag: \"clear\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 640,
        "wires": [
            [
                "60c34f98e1e26dba",
                "5da121824d3a508a"
            ]
        ]
    },
    {
        "id": "a4a78451414d1f34",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 108",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3590,
        "y": 680,
        "wires": []
    },
    {
        "id": "b7d078ea7c3f821e",
        "type": "change",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Set Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"GB_H\":\"\",\"GB_L\":\"\",\"ACW_H\":\"\",\"ACW_L\":\"\",\"IR_H\":\"\",\"IR_L\":\"\",\"ELC_H\":\"\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2940,
        "y": 320,
        "wires": [
            [
                "099c81c6e9517cfb",
                "8210bc989146b289",
                "9434a0f72f5dcdb1"
            ]
        ]
    },
    {
        "id": "73d41cef94786e51",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 111",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4670,
        "y": 320,
        "wires": []
    },
    {
        "id": "d74b12cee713ed7e",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Set Line Flag",
        "func": "if (msg.payload == \"PROCEED ANYWAY\") {\n    msg.lineFlag = \"completedWithChecks\";\n    msg.payload = msg.data.output;\n    delete msg.data; // Not needed once checks are completed.\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4670,
        "y": 280,
        "wires": [
            [
                "a5d2df37afae85ec",
                "bf90850384938521"
            ]
        ]
    },
    {
        "id": "a5d2df37afae85ec",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Buffer Checks out",
        "mode": "link",
        "links": [
            "6a9e30f65e495bca"
        ],
        "x": 4795,
        "y": 240,
        "wires": []
    },
    {
        "id": "3156f4f0d86003a5",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 104",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 440,
        "wires": []
    },
    {
        "id": "5da121824d3a508a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 107",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 680,
        "wires": []
    },
    {
        "id": "fa9015a8110bfeda",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic clear in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 2825,
        "y": 360,
        "wires": [
            [
                "b7d078ea7c3f821e"
            ]
        ]
    },
    {
        "id": "099c81c6e9517cfb",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 106",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 280,
        "wires": []
    },
    {
        "id": "bf90850384938521",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "debug 116",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4830,
        "y": 320,
        "wires": []
    },
    {
        "id": "8a84e81f560c21e0",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic",
        "info": "",
        "x": 2850,
        "y": 60,
        "wires": []
    },
    {
        "id": "9ce57eae9878230d",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Load PLC info in",
        "links": [
            "e99a5f4974e41824"
        ],
        "x": 1835,
        "y": 2200,
        "wires": [
            [
                "9a329cb80ea5f45f"
            ]
        ]
    },
    {
        "id": "85c4d22315196e1c",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Loaded TestResults from PLC",
        "mode": "link",
        "links": [
            "383005b740be9c02"
        ],
        "x": 4855,
        "y": 2340,
        "wires": []
    },
    {
        "id": "386aa47f24a1be6d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "config File Lister",
        "func": "msg.payload = {\n    start: 'C:/Users/User/Documents/Coding/Node Red/Recipes',\n    pattern: '*.json'\n}  \nmsg.search = 810004100;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 2480,
        "wires": [
            [
                "c4fb67a936d854e0"
            ]
        ]
    },
    {
        "id": "94f770252806aae0",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1780,
        "y": 2480,
        "wires": [
            [
                "386aa47f24a1be6d"
            ]
        ]
    },
    {
        "id": "383005b740be9c02",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Find TestResult Test in",
        "links": [
            "85c4d22315196e1c",
            "d682b6b8fe3c6634",
            "e14ff10de5281b13"
        ],
        "x": 1795,
        "y": 2400,
        "wires": [
            [
                "386aa47f24a1be6d"
            ]
        ]
    },
    {
        "id": "c4fb67a936d854e0",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 2160,
        "y": 2480,
        "wires": [
            [
                "becf12d8d94b4efe",
                "9026214ddcbd4dd0"
            ]
        ]
    },
    {
        "id": "becf12d8d94b4efe",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 181",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 2380,
        "wires": []
    },
    {
        "id": "9026214ddcbd4dd0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Split",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n    node.send({\n        filename : msg.payload[i],\n        topic: i,\n        search: 8100084100\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 2480,
        "wires": [
            [
                "675a434bf086b9f7",
                "c96524e80f38b876"
            ]
        ]
    },
    {
        "id": "675a434bf086b9f7",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n//Looking for my value\nlet test = JSON.parse(msg.payload);\nif (test.File_Code == msg.search) {\n    context.set('ID', undefined);\n    context.set('buffer', undefined);\n    flow.set('test', test);\n    return [, msg];\n}\n\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return [msg, ];\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return [msg, ];\n    }\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 2480,
        "wires": [
            [
                "ea76b7467c7ae599",
                "b09cb5ae7c299cf3"
            ],
            [
                "c8716ad40a94ac63",
                "9c2a5523344edd67"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "c96524e80f38b876",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 185",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2380,
        "wires": []
    },
    {
        "id": "ca8212dc22f79f51",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 2480,
        "wires": [
            [
                "d22162f4e47d4b35",
                "675a434bf086b9f7"
            ]
        ]
    },
    {
        "id": "ea76b7467c7ae599",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 184",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 2420,
        "wires": []
    },
    {
        "id": "b09cb5ae7c299cf3",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2760,
        "y": 2480,
        "wires": [
            [
                "6d9fac7ce82aa641",
                "ca8212dc22f79f51"
            ]
        ]
    },
    {
        "id": "c8716ad40a94ac63",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Create data from PLC",
        "func": "let results = flow.get('testResults'),\n    test = flow.get('test'),\n    testResultID = flow.get('testResultID'),\n    parCount = results.parCount,\n    headers = [ // Step ID gets done by MSQL\n        \"Test_result_ID\",\n        \"Step_Number\",\n        \"Measurement\",\n        \"Max\",\n        \"Min\",\n        \"Result\",\n        \"Reason\",\n        \"Step_Name\",\n        \"Instructions\"\n    ],\n    output = [],\n    arr = [],\n    i = 0,\n    stepNum = 1,\n    basicStepNameHeaders = ['Dead Short', 'Ground Bond', 'ACW Test', 'Insulation Resistance', 'Earth Leakage'],\n    basicKeys = Object.keys(test.basic),\n    allParameterKeys = Object.keys(test.parameterData),\n    singleParameterKeys = Object.keys(test.parameterData[allParameterKeys[0]])\n\nmsg.headers = headers;\n\n//Because dead short isn't in the recipe sent\narr.push(testResultID);\narr.push(stepNum); // Step Number\narr.push(parseFloat(results.basicResults[0].toFixed(2))); //Value\narr.push(1000)//max\narr.push(0)//min\narr.push(results.coilBasic[0]) // Result\narr.push((results.coilBasic[0]) ? results.basicResults[0].toFixed(2) + 'mA is within range' : results.basicResults[0].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n// Basic section\nfor (i = 0; i < basicStepNameHeaders.length - 2; i++) { // Basic section\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\n    arr.push(test.basic[basicKeys[i * 2]])//max\n    arr.push(test.basic[basicKeys[i * 2 + 1]])//min\n    arr.push(results.coilBasic[stepNum - 1]) // Result\n    arr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) +'mA is out of range') // Reason\n    arr.push(basicStepNameHeaders[stepNum - 1]) // stepName\n    arr.push(\"\"); // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\n// Last basic element doesn't have the min value\narr.push(testResultID);\narr.push(stepNum);\narr.push(parseFloat(results.basicResults[stepNum - 1].toFixed(2))); //Value\narr.push(test.basic[basicKeys[i * 2]])//max\narr.push(0)//min\narr.push(results.coilBasic[stepNum - 1]) // Result\narr.push((results.coilBasic[stepNum - 1]) ? results.basicResults[stepNum - 1].toFixed(2) + 'mA is within range' : results.basicResults[stepNum - 1].toFixed(2) + 'mA is out of range') // Reason\narr.push(basicStepNameHeaders[stepNum - 1]) // stepName\narr.push(\"\"); // Instructions\nstepNum++;\noutput.push(arr);\narr = [];\n\n//Parameter section \n\nfor (let i = 0; i < parCount; i++) {\n    arr.push(testResultID);\n    arr.push(stepNum);\n    arr.push(parseFloat(results.parameterResults[i].toFixed(2))); //Value\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[1]])//max\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[2]])//min\n    arr.push(results.coilPar[i]) // Result\n    arr.push((results.coilPar[i]) ? results.parameterResults[i].toFixed(2) + 'W is within range' : results.parameterResults[i].toFixed(2) + 'W is out of range') // Reason\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[0]]) // stepName\n    arr.push(test.parameterData[allParameterKeys[i]][singleParameterKeys[3]]) // Instructions\n    stepNum++;\n    output.push(arr);\n    arr = [];\n}\nflow.set('testResultID', flow.get('testResultID') + 1);\n\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 2580,
        "wires": [
            [
                "7bc74e839404994a",
                "1c06331bc6a62fb8",
                "986dcda44872dbf9"
            ]
        ]
    },
    {
        "id": "d22162f4e47d4b35",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 182",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 2440,
        "wires": []
    },
    {
        "id": "6d9fac7ce82aa641",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 183",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 2420,
        "wires": []
    },
    {
        "id": "75011822dd9591e4",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 2580,
        "wires": [
            [
                "c8716ad40a94ac63"
            ]
        ]
    },
    {
        "id": "31e3351497920e04",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Check coil",
        "func": "/*\n// Prevent infinite loop\nlet count = context.get('count') || 0;\nif (count > 10) {\n    return null;\n}\ncontext.set('count', ++count)\n*/\n\nif (msg.payload[0] != true) {\n    return [msg, ]\n} else {\n    return [ , msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 1980,
        "wires": [
            [
                "7f42b6e9796289d9",
                "fe0b8542e56ca74e"
            ],
            [
                "604939cd16e20c85",
                "e99a5f4974e41824"
            ]
        ]
    },
    {
        "id": "e82a8c85b2d2b208",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1850,
        "y": 1980,
        "wires": [
            [
                "31e3351497920e04",
                "af1dba479e7a54af"
            ]
        ]
    },
    {
        "id": "7f42b6e9796289d9",
        "type": "delay",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2210,
        "y": 1980,
        "wires": [
            [
                "067deaf06730b153"
            ]
        ]
    },
    {
        "id": "fe0b8542e56ca74e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 1920,
        "wires": []
    },
    {
        "id": "604939cd16e20c85",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 175",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 2080,
        "wires": []
    },
    {
        "id": "e99a5f4974e41824",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "PLC Test indicator out",
        "mode": "link",
        "links": [
            "9ce57eae9878230d",
            "8b7c478948dce28d"
        ],
        "x": 2225,
        "y": 2020,
        "wires": []
    },
    {
        "id": "af1dba479e7a54af",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 177",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 1900,
        "wires": []
    },
    {
        "id": "067deaf06730b153",
        "type": "modbus-getter",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "7500",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2380,
        "y": 1980,
        "wires": [
            [
                "c2c9735da2d44354",
                "4b4e2f01c9257cc0"
            ],
            []
        ]
    },
    {
        "id": "c2c9735da2d44354",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 174",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 1860,
        "wires": []
    },
    {
        "id": "7bc74e839404994a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 191",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 2540,
        "wires": []
    },
    {
        "id": "1c06331bc6a62fb8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config File Listener",
        "func": "msg.data = msg.payload;\nmsg.columns = msg.headers.toString();\nlet pattern = 'stepResults.csv'\nmsg.filename = flow.get('stepResultsCSVlocation') + pattern;\nmsg.payload = {\n    start: flow.get('stepResultsCSVlocation'),\n    pattern: 'stepResults.csv'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 2580,
        "wires": [
            [
                "ccf62559a293553a"
            ]
        ]
    },
    {
        "id": "ccf62559a293553a",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 3220,
        "y": 2580,
        "wires": [
            [
                "bdc1a42a78f24634"
            ]
        ]
    },
    {
        "id": "bdc1a42a78f24634",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3370,
        "y": 2580,
        "wires": [
            [
                "6b71f6dd8b9b9d65",
                "65b0e81b67bc36bf"
            ],
            [
                "dbe012e9e4dc4f99"
            ]
        ]
    },
    {
        "id": "6b71f6dd8b9b9d65",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set Payload",
        "func": "msg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 2500,
        "wires": [
            [
                "5f9909f7e59cd58c",
                "759efd13af7d101e"
            ]
        ]
    },
    {
        "id": "5f9909f7e59cd58c",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3710,
        "y": 2500,
        "wires": [
            [
                "ac4d60b66c26bb51",
                "817defa459204588"
            ]
        ]
    },
    {
        "id": "817defa459204588",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 3900,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "65b0e81b67bc36bf",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 192",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 2440,
        "wires": []
    },
    {
        "id": "ac4d60b66c26bb51",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 193",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860,
        "y": 2440,
        "wires": []
    },
    {
        "id": "759efd13af7d101e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3720,
        "y": 2420,
        "wires": []
    },
    {
        "id": "dbe012e9e4dc4f99",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set Payload",
        "func": "msg.payload = msg.data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 2580,
        "wires": [
            [
                "cb2a64c19589d0f7"
            ]
        ]
    },
    {
        "id": "cb2a64c19589d0f7",
        "type": "csv",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3710,
        "y": 2580,
        "wires": [
            [
                "817defa459204588"
            ]
        ]
    },
    {
        "id": "986dcda44872dbf9",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Statement",
        "func": "// Insert statement\nlet task = \"INSERT INTO \",\n    tableName = \"[NodeRed].[dbo].[DefyStepResults] \",\n    headers = \"( \" + msg.headers.toString() + \" )\",\n    valueText = \"\",\n    values = [];\n;\nmsg.payload.forEach((array) => {\n\n    // Some are numbers, some are text. For loop is eaasier to catch those\n    let i = 0; // Count of i will be kept\n    valueText += array[i++].toString(); // First instance put in so the comma insert works\n\n    for (i; i <= 4; i++) { // Adds up the numbers\n        valueText += \", \" + array[i].toString();\n    }\n\n    if(array[i++]) {\n        valueText += \", 'PASS'\";\n    } else {\n        valueText += \", 'FAIL'\";\n    }\n\n    for (i; i <= 8; i++) { // Catching the text fields\n        valueText += \", '\" + array[i] + \"'\"; \n    }\n\n    valueText = \" VALUES ( \" + valueText + \" ) \";\n    node.send({ \n        payload: task + tableName + headers + valueText,\n        topic: array[0] // Using the Step number to define each, should use unique ID\n        });\n    values.push(valueText);\n\n    valueText = \"\";\n});\n\n/* //del\nlet sqlStatement = task + tableName + headers;// NOt being used\nmsg.payload = sqlStatement + values[0];\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 2700,
        "wires": [
            [
                "dce81094d2878d3a",
                "3d322d6d01656610"
            ]
        ]
    },
    {
        "id": "02bc94ee6c52bc8d",
        "type": "MSSQL",
        "z": "6c2dfeb262f54a31",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 3620,
        "y": 2700,
        "wires": [
            [
                "c15ddeb608db8815",
                "d67d8f4042b67298"
            ]
        ]
    },
    {
        "id": "c15ddeb608db8815",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 196",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3830,
        "y": 2640,
        "wires": []
    },
    {
        "id": "dce81094d2878d3a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 197",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 2640,
        "wires": []
    },
    {
        "id": "3d322d6d01656610",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//infinite loop preventer\nlet loop = context.get('loop') || 0;\n/*\ncontext.set('loop', ++loop);\nif (loop >=  200) {\n    return null;\n}*/\n\n// Check for trigger\nif (msg.lineFlag == 'sqlHandshake') {\n    let ID = context.get('ID');\n    let index = ID.indexOf(msg.topic);\n    let buffer = context.get('buffer');\n    if (index != -1) {\n        buffer.splice(index, 1);\n        ID.splice(index, 1);\n} else {\n        node.warn('Index not found');\n    }\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n    \n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer, \n        ID: ID,\n        loop: loop\n    }\n    if (ID[0] == undefined) {\n        /*//del\n        node.send({\n            payload: \"we got undefined business\"\n        });*/\n        context.set('buffer', []);\n        context.set('ID', []);\n        context.set('waiting', false);\n        /*\n        node.send({\n            payload: \"No more buffer\",\n            topic: 'bufferCleared'\n            });\n            */\n    } else {\n        return msg;\n    }  \n} else {\n    // Retrieve the buffer array from context, or initialize it if it doesn't exist\n    var buffer = context.get('buffer') || [];\n    var ID = context.get('ID') || [];\n    let waiting = context.get('waiting');\n    if (waiting == undefined) {\n        waiting = false;\n        context.set('waiting', true) // Sets for the next time this node is called\n    } \n\n    // Add the incoming message payload and topic to the buffer\n    buffer.push(msg);\n    ID.push(msg.topic);\n\n    // Set the buffer array back to context\n    context.set('buffer', buffer);\n    context.set('ID', ID);\n\n    msg = {\n        ...buffer[0]\n    }\n    msg.ID = ID;\n\n    //Testing checks //del\n    msg.check = {\n        buffer: buffer,\n        ID: ID,\n        loop: loop\n    }\n\n    if (waiting) { // If we're waiting we do not return\n\n    } else {\n        if (buffer.length > 0)\n            context.set('waiting', true);\n            return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 2700,
        "wires": [
            [
                "0548504efd4b194c",
                "02bc94ee6c52bc8d"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "0548504efd4b194c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 198",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3580,
        "y": 2640,
        "wires": []
    },
    {
        "id": "d67d8f4042b67298",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "SQL Handshake",
        "func": "/*if (msg.topic == 'bufferCleared') {\n    return ({\n        \n    })\n}*/\n    msg.lineFlag = 'sqlHandshake';\nlet previous = context.get('previous'); // Make sure that the same message isn't sent twice\nif (previous != undefined) { \n    if (previous != msg.topic) {\n        context.set('previous', previous);\n        return msg;\n    } else { \n        node.warn('Two messages of the same topic came through. Nah nah nah');\n    }\n} else { // On the first instance send throught the message\n    context.set('previous', previous);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 2700,
        "wires": [
            [
                "fd9030ad96778ed5",
                "3d322d6d01656610"
            ]
        ]
    },
    {
        "id": "fd9030ad96778ed5",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 199",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4020,
        "y": 2660,
        "wires": []
    },
    {
        "id": "e0e063d64010d657",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 590,
        "y": 3180,
        "wires": [
            [],
            [
                "036712fa2b497dae",
                "34b0b3a03033e594"
            ]
        ]
    },
    {
        "id": "464136f77820a240",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Float: Par results",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.basicReg,\n    addresses = registers.basicRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 3180,
        "wires": [
            [
                "e0e063d64010d657"
            ]
        ]
    },
    {
        "id": "036712fa2b497dae",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "Store values",
        "func": "const offset = 4;\nlet buf,\n    values = [],\n    test = [],//del\n    numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n    \n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    test.push(Buffer.from([buf[2], buf[3]]).readInt16BE())\n    test.push(Buffer.from([buf[0], buf[1]]).readInt16BE())\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = values;\nflow.set('testResults', testResults)\n\nmsg.check = {\n    values: values\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3180,
        "wires": [
            [
                "35ef6d9691bad31b"
            ]
        ]
    },
    {
        "id": "34b0b3a03033e594",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 3140,
        "wires": []
    },
    {
        "id": "35ef6d9691bad31b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 3140,
        "wires": []
    },
    {
        "id": "ce1b26d50834a0ff",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "g": "0b9482d917fa354c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 3180,
        "wires": [
            [
                "464136f77820a240"
            ]
        ]
    },
    {
        "id": "9a329cb80ea5f45f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 2280,
        "wires": [
            [
                "d6ac7bbd7ead942b"
            ]
        ]
    },
    {
        "id": "d5d32098bee3786d",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1780,
        "y": 2260,
        "wires": [
            [
                "9a329cb80ea5f45f"
            ]
        ]
    },
    {
        "id": "d6ac7bbd7ead942b",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2160,
        "y": 2280,
        "wires": [
            [],
            [
                "c82c4fca487d4735",
                "3001b12596f64a16"
            ]
        ]
    },
    {
        "id": "c82c4fca487d4735",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 2280,
        "wires": [
            [
                "46db9aabeee8a60b",
                "78a1175a4dd0e1ba"
            ]
        ]
    },
    {
        "id": "3001b12596f64a16",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 230",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 2240,
        "wires": []
    },
    {
        "id": "46db9aabeee8a60b",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 231",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 2240,
        "wires": []
    },
    {
        "id": "78a1175a4dd0e1ba",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 2280,
        "wires": [
            [
                "f4a4c424bbf8c172"
            ]
        ]
    },
    {
        "id": "f4a4c424bbf8c172",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2790,
        "y": 2280,
        "wires": [
            [],
            [
                "68e5c844050f69a8",
                "0ed579743b8b0155"
            ]
        ]
    },
    {
        "id": "68e5c844050f69a8",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 2280,
        "wires": [
            [
                "16a22fc609b38b44",
                "e54017babbb92362"
            ]
        ]
    },
    {
        "id": "0ed579743b8b0155",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 232",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 2240,
        "wires": []
    },
    {
        "id": "16a22fc609b38b44",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 233",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3140,
        "y": 2240,
        "wires": []
    },
    {
        "id": "e54017babbb92362",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 2280,
        "wires": [
            [
                "e6a705e6e0505ce2"
            ]
        ]
    },
    {
        "id": "e6a705e6e0505ce2",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3410,
        "y": 2280,
        "wires": [
            [],
            [
                "3e0ca73980f5032a",
                "1ba90b607468f4dd"
            ]
        ]
    },
    {
        "id": "3e0ca73980f5032a",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [20, 20],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = floatValues[0];\ntestResults.parameterVoltages = floatValues[1];\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 2280,
        "wires": [
            [
                "afd3396cc5c96ba0",
                "f2aba66e9632b8f0"
            ]
        ]
    },
    {
        "id": "1ba90b607468f4dd",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 234",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3580,
        "y": 2240,
        "wires": []
    },
    {
        "id": "afd3396cc5c96ba0",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3760,
        "y": 2240,
        "wires": []
    },
    {
        "id": "f2aba66e9632b8f0",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 2280,
        "wires": [
            [
                "60c5872b2f0d6f29",
                "18b5fcbbaa5adacb"
            ]
        ]
    },
    {
        "id": "60c5872b2f0d6f29",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3980,
        "y": 2280,
        "wires": [
            [],
            [
                "5fce0a422522f322",
                "cf4aacab03b7b7a8"
            ]
        ]
    },
    {
        "id": "18b5fcbbaa5adacb",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3960,
        "y": 2220,
        "wires": []
    },
    {
        "id": "5fce0a422522f322",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4140,
        "y": 2280,
        "wires": [
            [
                "66783a5d7c8f684d",
                "df537e8e950a84b1"
            ]
        ]
    },
    {
        "id": "cf4aacab03b7b7a8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4150,
        "y": 2240,
        "wires": []
    },
    {
        "id": "66783a5d7c8f684d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 238",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4330,
        "y": 2220,
        "wires": []
    },
    {
        "id": "8c4d5f66a4a69ab8",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "acca45aca7d162a9",
        "name": "debug 239",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 3700,
        "wires": []
    },
    {
        "id": "e92d85f0a4cc45e0",
        "type": "ui_template",
        "z": "6c2dfeb262f54a31",
        "g": "6cedbe20f6116441",
        "group": "0465010f96f3dad5",
        "name": "CSS",
        "order": 15,
        "width": 0,
        "height": 0,
        "format": "<style>\n  body {\n    background: -webkit-linear-gradient(\n    55deg,\n    #282C33 0%,\n    #3e4147 50%,\n    #282C33 100%\n    ) !important;\n  }\n  #Dashboard_Recipes{\n    //background-image: url(\"C:\\Users\\User\\Pictures\\Image1.jpg\");\n    //background-color: blue;\n    border-style: none;\n\n  }\n  /*Header background colour*/\n  md-content[ng-if=\"main.loaded\"] md-toolbar {\n    background-color: #2C506B !important;\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Header Text*/\n  h1 {\n    color: #faebd7 !important;\n    font-weight: 500 !important;\n  }\n\n  /*Background colour*/\n  md-content[ng-if=\"main.loaded\"] section {\n    //background-color: #282C33;\n  }\n  /*Group name colour*/\n  p[class=\"nr-dashboard-cardtitle\"] {\n    //color: #706F6F !important;\n    color: #faebd7 !important;\n  }\n\n  /*Buttons */\n  /*Default*/\n  button {\n    background-color: #3981B8 !important;\n    border-radius: 8px !important;\n    box-shadow: 2px 2px 3px rgba(44, 80, 107, 1) !important;\n    border-radius: 6px !important;\n  }\n  button:hover {\n    background-color: rgba(57, 129, 184, 0.7) !important;\n    border-radius: 6px !important;\n  }\n  .save button:hover, button.nr-dashboard-form-button[type=\"submit\"]:hover {\n  background-color: rgba(26, 199, 40, 1) !important;\n  border-radius: 6px !important;\n\n  color: black !important;\n  }\n  .clear button:hover, button.nr-dashboard-form-button[type=\"button\"]:hover{\n  background-color: #e31e35 !important;\n  color black !important;\n  }\n  /*Default switch icons (when switched on)*/\n  /*Switch bar*/\n  md-switch.md-checked .md-bar { \n    background-color: #13851c!important;\n  }\n  /*switch ball*/\n  md-switch.md-checked .md-thumb {\n    background-color: #1ac728 !important;\n  }\n  /*Menu button*/\n  button[aria-label=\"menu button\"] {\n    background: transparent !important;\n    box-shadow: none !important;\n  }\n  /*Refresh button on Settings tab*/\n  md-card[node-class=\"indent\"] {\n    margin-left: 16px !important;\n  }\n\n  /*Side Nav*/\n  button.md-no-style.md-button {\n    background-color: transparent !important;\n    border-radius: 0px !important;\n  }\n  .nr-menu-item-active div button { \n    border-right: 4px solid #3981B8 !important;\n  }\n  body.nr-dashboard-theme md-sidenav div.md-list-item-inner { /*Side nav Text*/\n    color: #95B0D5 !important;\n  }\n  md-sidenav {\n    box-shadow: 2px 2px 3px #2C506B;\n  }\n\n  /*Input fields*/\n  md-input-container.md-default-theme .md-input, md-input-container .md-input, .md-select-value {\n    border-color: #EfA705 !important;\n  }\n\n  /*All Panels*/\n  ui-card-panel {\n    border-radius: 6px;\n    box-shadow: 0px 0px 3px #2C506B;\n    border-style: none !important;\n    background-color: rgba(51,51,51,255) !important;\n  }\n  #Recipes_Test_Name {\n    display: grid !important;\n    place-items: center !important;\n  }\n  /*Status message*/\n  [node-id=d6300eb99d1c25a1] [class=\"value\"] {\n    color: #e31e35 !important;\n  }\n  .save button  {\n    border: none;\n    border-radius: 8px;\n    text-align: center;\n    width: 50% ;\n    transition-duration: 0.4s;\n    background-color: #ddffdd;\n    color: white;         \n  }\n\n  /*Table rows*/\n  .tabulator-headers > div {\n    background-color: #f5ca69 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-odd {\n    background-color: #b0cde3 !important;\n  }\n  .tabulator-row.tabulator-selectable.tabulator-row-even {\n    background-color: #f9dc9b !important;\n  }\n  .chart {\n    //background-color: green;\n  }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "051a2227bc7c22da"
            ]
        ]
    },
    {
        "id": "051a2227bc7c22da",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "6cedbe20f6116441",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "a5f50c3adfd68f30",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "g": "70592e241de32532",
        "name": "Basic Error out",
        "mode": "link",
        "links": [
            "c7a80db6e1441f4f"
        ],
        "x": 4445,
        "y": 400,
        "wires": []
    },
    {
        "id": "3b96d386eb8e1a7a",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "807ab1f8485a35d8",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 3980,
        "wires": []
    },
    {
        "id": "ceb27c5af4f2ec19",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 248",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3670,
        "y": 4600,
        "wires": []
    },
    {
        "id": "9c2a5523344edd67",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2770,
        "y": 2540,
        "wires": []
    },
    {
        "id": "df537e8e950a84b1",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Coil: Parameter",
        "func": "//Parameters \t        7 000 and up\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7100,\n    quantity = 20,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4380,
        "y": 2280,
        "wires": [
            [
                "82546e589ece378a",
                "cfe99be8739f1f61"
            ]
        ]
    },
    {
        "id": "82546e589ece378a",
        "type": "modbus-flex-getter",
        "z": "6c2dfeb262f54a31",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4560,
        "y": 2280,
        "wires": [
            [],
            [
                "4dddd32133c74fa4",
                "13c02b4ef75ff0f9"
            ]
        ]
    },
    {
        "id": "cfe99be8739f1f61",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 251",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4540,
        "y": 2220,
        "wires": []
    },
    {
        "id": "4dddd32133c74fa4",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4720,
        "y": 2280,
        "wires": [
            [
                "7aedede0c5f85d27",
                "85c4d22315196e1c"
            ]
        ]
    },
    {
        "id": "13c02b4ef75ff0f9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 252",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 2240,
        "wires": []
    },
    {
        "id": "7aedede0c5f85d27",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 253",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4910,
        "y": 2220,
        "wires": []
    },
    {
        "id": "22a8c8bc6b6eb29e",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "Active",
        "info": "Change the filename back to normal\n",
        "x": 4700,
        "y": 4860,
        "wires": []
    },
    {
        "id": "b84b6732efebeca7",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "8f1040046006e799",
        "name": "debug 255",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1360,
        "wires": []
    },
    {
        "id": "849918d9f4b0d272",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "2fd3eb0fbfec960e",
        "name": "debug 256",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5bcb6d5fd9c5fad3",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 580,
        "wires": [
            [
                "5361cdc954d19166"
            ]
        ]
    },
    {
        "id": "5361cdc954d19166",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "function 23",
        "func": "\n\nlet house = {};\nhouse['door'] = 'wood';\ncontext.set('buffer', house);\ncontext.set('buffer', undefined);\nlet buffer = context.get('buffer')\nmsg.payload = buffer;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "643bfe19a94d1001"
            ]
        ]
    },
    {
        "id": "643bfe19a94d1001",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 540,
        "wires": []
    },
    {
        "id": "ee2b12fe49a320a6",
        "type": "ui_button",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "group": "0465010f96f3dad5",
        "order": 16,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "clear",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "delete",
        "topicType": "str",
        "x": 410,
        "y": 4300,
        "wires": [
            [
                "8f1e40768e5d634f",
                "304a1dae2a3e025f"
            ]
        ]
    },
    {
        "id": "8f1e40768e5d634f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Template Buffer",
        "func": "//Hard coded: The buffer should have a single member with known key\nlet bufferKey = 'filename';\n\n// Retrieve the buffer array from context, or initialize it if it doesn't exist\nvar buffer = context.get('buffer') || {};\n\n// Check for progress trigger\nif ((msg.topic == 'delete') && (buffer[bufferKey] != undefined)) {\n    node.warn(buffer[bufferKey]);\n    msg.payload = {\n        filePath: flow.get('recipeJSONlocation') + buffer[bufferKey] + '.json',\n        filename: buffer[bufferKey] + '.json'\n    }\n    context.set('buffer', undefined);\n    msg.lineFlag = 'deleteRecipe';\n    let obj = JSON.parse(JSON.stringify(msg));\n    flow.set('AAA', obj);\n    return msg;\n} else \n\n// Clear check\nif (msg.topic == 'clear') {\n    context.set('buffer', undefined)\n} else \n\n// Add the incoming message payload and topic to the buffer\nif (msg.topic == bufferKey) {\nbuffer[msg.topic] = msg.payload;\n//node.warn(msg.payload);\ncontext.set('buffer', buffer);\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 4300,
        "wires": [
            [
                "7b10c851263941dc",
                "9d94911ae6152387"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "304a1dae2a3e025f",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 258",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 4200,
        "wires": []
    },
    {
        "id": "2fb51950723c283f",
        "type": "link in",
        "z": "6c2dfeb262f54a31",
        "name": "Delete Recipe in",
        "links": [
            "a405fda7c0517634",
            "c20be865f12bee03"
        ],
        "x": 505,
        "y": 4360,
        "wires": [
            [
                "8f1e40768e5d634f",
                "e2c796d776279fac"
            ]
        ]
    },
    {
        "id": "7b10c851263941dc",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 257",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 4260,
        "wires": []
    },
    {
        "id": "9d94911ae6152387",
        "type": "link out",
        "z": "6c2dfeb262f54a31",
        "name": "Delete Recipe out",
        "mode": "link",
        "links": [],
        "x": 785,
        "y": 4340,
        "wires": []
    },
    {
        "id": "e2c796d776279fac",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 254",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 4240,
        "wires": []
    },
    {
        "id": "bcc392f485e87339",
        "type": "inject",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"fileLocation\":\"C:/Users/User/Documents/Coding/Node Red/Recipes/ab (123).json\"}",
        "payloadType": "json",
        "x": 210,
        "y": 4440,
        "wires": [
            [
                "647e04bb087214d6",
                "3b22aeefea9d7f3d"
            ]
        ]
    },
    {
        "id": "795a5fe4afbfac2b",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config FL Set Par",
        "func": "msg.data = msg.payload; // Data that will be written to the csv\n\n\n//Set: filename for HMI csv\nmsg.data.shortFilename = flow.get('HMIrecipeName') // Note: Might want to dynamically set this\nmsg.data.fileLocation = flow.get('HMIcsvLocation'); // Not the whole path + filename\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: msg.data.fileLocation,\n    pattern: msg.data.shortFilename \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 4640,
        "wires": [
            [
                "9ad732b56228fc50"
            ]
        ]
    },
    {
        "id": "9ad732b56228fc50",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 420,
        "y": 4640,
        "wires": [
            [
                "be01ab08145bcb76",
                "b56c50f047e91ecb"
            ]
        ],
        "info": "Looking for the HMI Recipe CSV"
    },
    {
        "id": "be01ab08145bcb76",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 4600,
        "wires": []
    },
    {
        "id": "b56c50f047e91ecb",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 4640,
        "wires": [
            [
                "777b1598ca6c505c"
            ],
            [
                "b540c11e62029c79",
                "4ac64087c16c2f5f"
            ]
        ]
    },
    {
        "id": "2e8743f7b80084b4",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "g": "664234c9f7128797",
        "name": "debug 270",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 4620,
        "wires": []
    },
    {
        "id": "777b1598ca6c505c",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Still working",
        "func": "msg.payload = 'Recipe is not found';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 4620,
        "wires": [
            [
                "596a37a42128420d"
            ]
        ]
    },
    {
        "id": "596a37a42128420d",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Delete HMIcsv NE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 4580,
        "wires": []
    },
    {
        "id": "b540c11e62029c79",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config Read file",
        "func": "//Also used for config write\nmsg.payload = {};\n// Set\nmsg.filename = msg.data.fileLocation + msg.data.shortFilename; \n// Settings things up for the bypass\n//msg.payload.text = msg.data.text;\nmsg.payload.filename = msg.filename;\nmsg.payload.recipeIdentity = msg.recipeIdentity;\nmsg.topic = \"bypass\";\ndelete msg.filename\n\n\nreturn [{filename: msg.payload.filename}, msg];\n\n//would be used with the line by line file read\nflow.set(\"newFilename\", msg.filename.substr(0, msg.filename.lastIndexOf(\".\")) + \"NEW\" + msg.filename.substr(msg.filename.lastIndexOf(\".\"), msg.filename.length));\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 4680,
        "wires": [
            [
                "8ad031b9863e1438",
                "4268a958241ee1e5"
            ],
            [
                "ab9ae931640d5a9e",
                "e70117d17e776031"
            ]
        ]
    },
    {
        "id": "8ad031b9863e1438",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 265",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 4640,
        "wires": []
    },
    {
        "id": "4268a958241ee1e5",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 4680,
        "wires": [
            [
                "0911033c87e22ece",
                "bd8808d49ee0f0cc"
            ]
        ]
    },
    {
        "id": "ab9ae931640d5a9e",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Bypass Recipe File Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 4720,
        "wires": []
    },
    {
        "id": "0911033c87e22ece",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Read CSV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 4640,
        "wires": []
    },
    {
        "id": "bd8808d49ee0f0cc",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set topic",
        "func": "msg.topic = \"fileData\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 4680,
        "wires": [
            [
                "d56be15d3b11433f"
            ]
        ]
    },
    {
        "id": "d56be15d3b11433f",
        "type": "join",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1260,
        "y": 4680,
        "wires": [
            [
                "0e63ddc7537bdea6",
                "cf7dfb7a11859238"
            ]
        ]
    },
    {
        "id": "0e63ddc7537bdea6",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Join",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 4760,
        "wires": []
    },
    {
        "id": "cf7dfb7a11859238",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "buffer (csv parts reading)",
        "func": "\nlet startIndex = msg.payload.fileData.indexOf(msg.payload.bypass.recipeIdentity); //Finds the unique key\nmsg.look = {\n    startIndex: startIndex,\n    search: msg.payload.bypass.recipeIdentity,\n}\nif (startIndex != -1) { // Unique key exists:\n    let end1 = \"\\r\\n\\r\\n\", // Finds the double new line (end of section)\n        end2 = \"\\n\\n\",\n        endIndex = -1;\n    if (msg.payload.fileData.indexOf(end1, startIndex) == -1) { // Looks if end of file does not exist\n        if (msg.payload.fileData.indexOf(end2, startIndex) == -1) { // Really looks if end of file does not exist\n            node.warn('Cannot find end of index insert into HMI Recipe csv');\n        } else {\n            endIndex = msg.payload.fileData.indexOf(end2, startIndex);\n        }\n    } else {\n        endIndex = msg.payload.fileData.indexOf(end1, startIndex) + 2;\n    }\n        \n        //foundSection = msg.payload.fileData.slice(startIndex, endIndex);\n    //msg.filename = msg.payload.bypass.filename;\n    //del\n    msg.filename = 'C: /Users/User / Documents / Coding / Node Red / Recipes / testing.csv';\n\n    msg.check = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        firstPart: msg.payload.fileData.slice(0, startIndex),\n        insert: msg.payload.bypass.text,\n        lastPart: msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length)\n\n    };\n\n    //Delete and insert\n    msg.payload = msg.payload.fileData.slice(0, startIndex) + msg.payload.fileData.slice(endIndex + 2, msg.payload.fileData.length);\n} else {\n    //msg.payload = msg.payload.fileData + msg.payload.bypass.text;\n    //active: add a warning that the file was not changed\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 4680,
        "wires": [
            [
                "bcc865f8f044d1c3",
                "3d70dddd55c57b9a"
            ]
        ]
    },
    {
        "id": "3d70dddd55c57b9a",
        "type": "file",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1680,
        "y": 4680,
        "wires": [
            [
                "5c8b65bc83bdb2a9"
            ]
        ]
    },
    {
        "id": "647e04bb087214d6",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 271",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 4400,
        "wires": []
    },
    {
        "id": "3b22aeefea9d7f3d",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Config FL",
        "func": "//del: used for testing\nmsg = JSON.parse(JSON.stringify(flow.get('AAA')));\nmsg.payload = {\n    start: flow.get('recipeJSONlocation'),\n    pattern: msg.payload.filename\n}\nmsg.filename = msg.payload.start + msg.payload.pattern;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 4440,
        "wires": [
            [
                "74ac44fd89593798",
                "df0da5bebc40fd43"
            ]
        ]
    },
    {
        "id": "74ac44fd89593798",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 272",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 4400,
        "wires": []
    },
    {
        "id": "df0da5bebc40fd43",
        "type": "fs-file-lister",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 570,
        "y": 4440,
        "wires": [
            [
                "509043aec753b639",
                "02e6e064d9e61081"
            ]
        ]
    },
    {
        "id": "509043aec753b639",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 273",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 4400,
        "wires": []
    },
    {
        "id": "02e6e064d9e61081",
        "type": "switch",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 4440,
        "wires": [
            [
                "28b176bdcfa9722c"
            ],
            [
                "b308c572e9f44b77",
                "ad9921eead6df191"
            ]
        ]
    },
    {
        "id": "28b176bdcfa9722c",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "Does not exist",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 4420,
        "wires": []
    },
    {
        "id": "b308c572e9f44b77",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 274",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 4520,
        "wires": []
    },
    {
        "id": "ad9921eead6df191",
        "type": "file in",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 910,
        "y": 4480,
        "wires": [
            [
                "8e1de2b94b437deb"
            ]
        ]
    },
    {
        "id": "8e1de2b94b437deb",
        "type": "json",
        "z": "6c2dfeb262f54a31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1060,
        "y": 4480,
        "wires": [
            [
                "07e34ff94187852f",
                "7d7de50839ec4fdc"
            ]
        ]
    },
    {
        "id": "07e34ff94187852f",
        "type": "function",
        "z": "6c2dfeb262f54a31",
        "name": "Set RecipeIdentity",
        "func": "msg.recipeIdentity = msg.payload.File_Code;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 4480,
        "wires": [
            [
                "795a5fe4afbfac2b"
            ]
        ]
    },
    {
        "id": "7d7de50839ec4fdc",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 275",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 4520,
        "wires": []
    },
    {
        "id": "4ac64087c16c2f5f",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "File Listener",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 4760,
        "wires": []
    },
    {
        "id": "bcc865f8f044d1c3",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 4560,
        "wires": []
    },
    {
        "id": "5c8b65bc83bdb2a9",
        "type": "debug",
        "z": "6c2dfeb262f54a31",
        "name": "debug 278",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 4620,
        "wires": []
    },
    {
        "id": "6faf52c7c703e7f7",
        "type": "comment",
        "z": "6c2dfeb262f54a31",
        "g": "6cedbe20f6116441",
        "name": "Page Styles Block",
        "info": "",
        "x": 190,
        "y": 180,
        "wires": []
    },
    {
        "id": "0aa53710984a160e",
        "type": "ui_text_input",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "Username",
        "tooltip": "",
        "group": "41add6d3ba5596df",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "username",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 330,
        "y": 840,
        "wires": [
            [
                "14b4f15e7efa6d9f"
            ]
        ]
    },
    {
        "id": "71e576eb9123bfdc",
        "type": "ui_text_input",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "41add6d3ba5596df",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "password",
        "delay": 300,
        "topic": "password",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 320,
        "y": 900,
        "wires": [
            [
                "14b4f15e7efa6d9f"
            ]
        ]
    },
    {
        "id": "4e39c6a6e5296b51",
        "type": "ui_button",
        "z": "90f171682dfc3f42",
        "name": "",
        "group": "41add6d3ba5596df",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "LOGIN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Login",
        "topicType": "str",
        "x": 320,
        "y": 960,
        "wires": [
            [
                "896b075625b957a9"
            ]
        ]
    },
    {
        "id": "c909499c73ee6c20",
        "type": "ui_button",
        "z": "90f171682dfc3f42",
        "name": "",
        "group": "41add6d3ba5596df",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "CANCEL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "555e584fc9c1351b"
            ]
        ]
    },
    {
        "id": "c68d3f40cbd87933",
        "type": "ui_text",
        "z": "90f171682dfc3f42",
        "group": "41add6d3ba5596df",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 310,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9ece35e3298eed0c",
        "type": "ui_button",
        "z": "90f171682dfc3f42",
        "name": "",
        "group": "41add6d3ba5596df",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "LOGOUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2a99dc5d1f16aca5",
        "type": "ui_template",
        "z": "90f171682dfc3f42",
        "group": "41add6d3ba5596df",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>\n.login{\n    padding: 18px;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 200,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "0d76467924cb1dd7",
        "type": "link out",
        "z": "90f171682dfc3f42",
        "name": "Cancel out",
        "mode": "link",
        "links": [
            "144c30d73ebde27f"
        ],
        "x": 575,
        "y": 1020,
        "wires": []
    },
    {
        "id": "144c30d73ebde27f",
        "type": "link in",
        "z": "90f171682dfc3f42",
        "name": "Cancel in",
        "links": [
            "0d76467924cb1dd7"
        ],
        "x": 95,
        "y": 840,
        "wires": [
            [
                "0aa53710984a160e",
                "71e576eb9123bfdc",
                "c68d3f40cbd87933"
            ]
        ]
    },
    {
        "id": "555e584fc9c1351b",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Cancel",
        "func": "msg.payload = \"\";\nmsg.lineFlag = \"clear\";\nmsg.complete = \"\"; // Used to clear the buffer\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1020,
        "wires": [
            [
                "0d76467924cb1dd7",
                "14b4f15e7efa6d9f",
                "1e3d168d3edef02c"
            ]
        ]
    },
    {
        "id": "14b4f15e7efa6d9f",
        "type": "join",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 580,
        "y": 920,
        "wires": [
            [
                "174d49da1c5a3a71",
                "d3c5eb6a6d538c5b"
            ]
        ]
    },
    {
        "id": "896b075625b957a9",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Login",
        "func": "msg.payload = \"\";\nmsg.lineFlag = \"login\";\nmsg.complete = \"\"; // Used to clear the buffer\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 960,
        "wires": [
            [
                "14b4f15e7efa6d9f"
            ]
        ]
    },
    {
        "id": "174d49da1c5a3a71",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Join",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 860,
        "wires": []
    },
    {
        "id": "db18064496eb1045",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Set Par",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 860,
        "wires": []
    },
    {
        "id": "b9868f10502a8d1a",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "admin",
        "payloadType": "str",
        "x": 90,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "55a5ec712037d2e7",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "c909499c73ee6c20"
            ]
        ]
    },
    {
        "id": "1e3d168d3edef02c",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1080,
        "wires": []
    },
    {
        "id": "300263c8963d1f65",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "4e39c6a6e5296b51"
            ]
        ]
    },
    {
        "id": "09db46c303ad458b",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1440,
        "y": 900,
        "wires": [
            [
                "872ae3d460dd78b6"
            ]
        ]
    },
    {
        "id": "e8f798d63887473a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "B CSV data (NE)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 840,
        "wires": []
    },
    {
        "id": "3ff6da50a90b1209",
        "type": "switch",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 920,
        "wires": [
            [
                "530ad2be100739a1"
            ],
            [
                "9fe4c37df7d8eb60"
            ]
        ]
    },
    {
        "id": "d74926522ac62fc7",
        "type": "fs-file-lister",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 950,
        "y": 920,
        "wires": [
            [
                "3ff6da50a90b1209",
                "ca0ba3a7db614a3b"
            ]
        ]
    },
    {
        "id": "4d2d050d952c2953",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1440,
        "y": 940,
        "wires": [
            [
                "872ae3d460dd78b6"
            ]
        ]
    },
    {
        "id": "c9090c3541f99cd1",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "B CSV data (E)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1000,
        "wires": []
    },
    {
        "id": "530ad2be100739a1",
        "type": "function",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 900,
        "wires": [
            [
                "09db46c303ad458b",
                "e8f798d63887473a"
            ]
        ]
    },
    {
        "id": "9fe4c37df7d8eb60",
        "type": "function",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 940,
        "wires": [
            [
                "4d2d050d952c2953",
                "c9090c3541f99cd1"
            ]
        ]
    },
    {
        "id": "ca0ba3a7db614a3b",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1efd318461f8e65b",
        "type": "file",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1880,
        "y": 920,
        "wires": [
            [
                "ab01de66fe06bf74"
            ]
        ]
    },
    {
        "id": "6086a09a605eaa1d",
        "type": "function",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Set Par (write for csv)",
        "func": "//msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 920,
        "wires": [
            [
                "1efd318461f8e65b",
                "7f9568011153ca1d"
            ]
        ]
    },
    {
        "id": "7f9568011153ca1d",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "File write data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 860,
        "wires": []
    },
    {
        "id": "ab01de66fe06bf74",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Final Write",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 920,
        "wires": []
    },
    {
        "id": "d3c5eb6a6d538c5b",
        "type": "function",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Set Par",
        "func": "if (msg.lineFlag = \"login\") { // Avoids saving the \"clear\" button press\n    delete msg.payload.Login;\n    msg.data = msg.payload;\n\n    //Setting the payload for filelister node\n    msg.payload = { //Incomplete: This can be loaded from a csv or json file\n        start: \"C:/Users/User/Documents/Coding/Node Red/Writing CSV/\",\n        pattern: \"LoginDetails.csv\"\n    }\n\n    //Set the parameters needed for the write CSV function\n    msg.columns = \"username, password\";\n    msg.filename = \"C:/Users/User/Documents/Coding/Node Red/Writing CSV/LoginDetails.csv\";\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "db18064496eb1045",
                "d74926522ac62fc7"
            ]
        ]
    },
    {
        "id": "dfb9fb4ec30d51fd",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "g": "2663679731c67ef4",
        "name": "Ideas",
        "info": "MSQL has ways to validate whether data\nalready exists. ",
        "x": 1110,
        "y": 840,
        "wires": []
    },
    {
        "id": "86d352ede94cfc61",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Settings page",
        "info": "",
        "x": 90,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a918d52c5a658719",
        "type": "ui_text",
        "z": "90f171682dfc3f42",
        "group": "9ba12de27dc123ba",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "status",
        "x": 430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "d1a41a727392ecfa",
        "type": "ui_form",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "",
        "group": "9ba12de27dc123ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat Password",
                "value": "password2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password1": "",
            "password2": ""
        },
        "payload": "",
        "submit": "REGISTER",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "54ea78c3c478634a",
                "17894237102d0e7a"
            ]
        ]
    },
    {
        "id": "54ea78c3c478634a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1380,
        "wires": []
    },
    {
        "id": "17894237102d0e7a",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Checks",
        "func": "if (flow.get(\"usernames\").includes(msg.payload.username)) {\n    let status = {\n        payload: \"Username already exists\"\n    }\n    return [, status];\n} else if (msg.payload.password1 == msg.payload.password2) {\n    msg = {\n        lineFlag: 'formInput',\n        data : {\n            username: msg.payload.username,\n            password: msg.payload.password1\n        }\n    };\n    let status = {payload: \"\"};\n    return [msg, status];\n} else {\n    let status = {\n        payload: \"The passwords do not match\"\n    }\n    return [,status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1420,
        "wires": [
            [
                "f90afec645303d7a",
                "2a6a3d3626e8d156"
            ],
            [
                "a918d52c5a658719",
                "cacb430fae27b53f"
            ]
        ]
    },
    {
        "id": "f90afec645303d7a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b45d6e2d886ab9e6",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Set Par",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "7b9e0102ef2077a2",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1400,
        "wires": [
            [
                "30b771718c579dd1"
            ]
        ]
    },
    {
        "id": "32d6d25a22388994",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B CSV data (NE)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "42bc5da63624f1d9",
        "type": "switch",
        "z": "90f171682dfc3f42",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "18b9cf52d19c8c39"
            ],
            [
                "6588444fcfdc54d7"
            ]
        ]
    },
    {
        "id": "3e9cc1fe49151981",
        "type": "fs-file-lister",
        "z": "90f171682dfc3f42",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 860,
        "y": 1420,
        "wires": [
            [
                "42bc5da63624f1d9",
                "1b9adcb2c45a6550"
            ]
        ]
    },
    {
        "id": "3f6f3c687ced4555",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1350,
        "y": 1440,
        "wires": [
            [
                "30b771718c579dd1"
            ]
        ]
    },
    {
        "id": "bb37d573f1797676",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B CSV data (E)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1500,
        "wires": []
    },
    {
        "id": "18b9cf52d19c8c39",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1400,
        "wires": [
            [
                "7b9e0102ef2077a2",
                "32d6d25a22388994"
            ]
        ]
    },
    {
        "id": "6588444fcfdc54d7",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1440,
        "wires": [
            [
                "3f6f3c687ced4555",
                "bb37d573f1797676"
            ]
        ]
    },
    {
        "id": "1b9adcb2c45a6550",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1500,
        "wires": []
    },
    {
        "id": "071c23441ee3c49b",
        "type": "file",
        "z": "90f171682dfc3f42",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1790,
        "y": 1420,
        "wires": [
            [
                "546dbdeddd65b269"
            ]
        ]
    },
    {
        "id": "8dfa706e5138ec4d",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Par (write for csv)",
        "func": "//msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1420,
        "wires": [
            [
                "071c23441ee3c49b",
                "7dc2ea7e1adb7919"
            ]
        ]
    },
    {
        "id": "7dc2ea7e1adb7919",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "File write data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1360,
        "wires": []
    },
    {
        "id": "546dbdeddd65b269",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Final Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 1420,
        "wires": []
    },
    {
        "id": "215d088689c2f725",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Config FL Set Par",
        "func": "\n//move\nmsg.data.ID = flow.get('passwords').length + 1\nnode.warn('We have a number ' + msg.data.ID);\n\n//Setting the payload for filelister node\nmsg.payload = { //Incomplete: This can be loaded from a csv or json file\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\n\n//Set the parameters needed for the write CSV function\nmsg.columns = \"ID, username, password\";\nmsg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "b45d6e2d886ab9e6",
                "3e9cc1fe49151981"
            ]
        ]
    },
    {
        "id": "cacb430fae27b53f",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1520,
        "wires": []
    },
    {
        "id": "5531ec73a8dd6b5e",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "view user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 2260,
        "wires": [
            [
                "4fdd258cd2c6a9e4"
            ]
        ]
    },
    {
        "id": "4fdd258cd2c6a9e4",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Read flow variables",
        "func": "msg.payload = {\n    usernames: flow.get(\"usernames\"),\n    passwords: flow.get(\"passwords\")\n}\n\n//Del: testing\nlet username = [];\nusername = flow.get(\"usernames\");\nmsg.check = {\n    check: username.indexOf(\"gio\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2260,
        "wires": [
            [
                "cedbaa431a9e9e37"
            ]
        ]
    },
    {
        "id": "cedbaa431a9e9e37",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c4d3d227d23559d3",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Registration Form",
        "info": "Writes to csv",
        "x": 130,
        "y": 1320,
        "wires": []
    },
    {
        "id": "6a9c82de64377004",
        "type": "ui_form",
        "z": "90f171682dfc3f42",
        "name": "",
        "label": "",
        "group": "9e76e570168f2dca",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "New Password",
                "value": "newPassword1",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Repeat New Password",
                "value": "newPassword2",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "newPassword1": "",
            "newPassword2": ""
        },
        "payload": "",
        "submit": "UPDATE",
        "cancel": "CANCEL",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "Form",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "762c9f53fc63ea8a",
                "7fb333832a4696fa"
            ]
        ]
    },
    {
        "id": "762c9f53fc63ea8a",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Checks",
        "func": "let usernames = flow.get(\"usernames\"),\n    passwords = flow.get(\"passwords\"),\n    index = usernames.indexOf(msg.payload.username);\n\nif (!usernames.includes(msg.payload.username)) { //Already checked with the declaration of index\n    let status = {\n        payload: \"Username does not exist\"\n    }\n    return [, status];\n} else if (msg.payload.newPassword1 == msg.payload.newPassword2) { //checks that the new passwords are the same\n        passwords[index] = msg.payload.newPassword1;\n        msg.data = {\n            usernames: usernames,\n            passwords: passwords\n        }\n        msg.lineFlag = \"formInput\";\n        return [msg, ];\n} else {\n    let status = { // When Password1 doesn't match Password2\n        payload: \"Passwords do not match\"\n    };\n    return [, status];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1760,
        "wires": [
            [
                "279fe8db6719f27f"
            ],
            [
                "eb380d24e28bd310"
            ]
        ]
    },
    {
        "id": "eb380d24e28bd310",
        "type": "ui_text",
        "z": "90f171682dfc3f42",
        "group": "9e76e570168f2dca",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 1820,
        "wires": []
    },
    {
        "id": "ab48572e1513028a",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 270,
        "y": 1480,
        "wires": [
            [
                "a918d52c5a658719"
            ]
        ]
    },
    {
        "id": "d6ebf7c6a284d592",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 330,
        "y": 1820,
        "wires": [
            [
                "eb380d24e28bd310"
            ]
        ]
    },
    {
        "id": "279fe8db6719f27f",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1700,
        "wires": []
    },
    {
        "id": "0ccceff7d73ae9ca",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Registration Login",
        "info": "",
        "x": 110,
        "y": 780,
        "wires": []
    },
    {
        "id": "b5fbba8c4e1cd4d7",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Update Password Form",
        "info": "",
        "x": 140,
        "y": 1660,
        "wires": []
    },
    {
        "id": "55aaacd276ca4bfa",
        "type": "ui_table",
        "z": "90f171682dfc3f42",
        "group": "9a5680e46e5f9771",
        "name": "",
        "order": 1,
        "width": 10,
        "height": 6,
        "columns": [
            {
                "field": "ID",
                "title": "ID",
                "width": "10%",
                "align": "center",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "username",
                "title": "Username",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "password",
                "title": "",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "a180220ab6809aa9",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "6cc8bbe5846332b5"
            ]
        ]
    },
    {
        "id": "6cc8bbe5846332b5",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Config Read File",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "caf677db5e73985b"
            ]
        ]
    },
    {
        "id": "caf677db5e73985b",
        "type": "file in",
        "z": "90f171682dfc3f42",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 80,
        "wires": [
            [
                "d1424fc60d38adb8"
            ]
        ]
    },
    {
        "id": "d1424fc60d38adb8",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "b6d3fcffe3d5214d",
                "f40f478d71984f02"
            ]
        ]
    },
    {
        "id": "b6d3fcffe3d5214d",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 241",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 40,
        "wires": []
    },
    {
        "id": "b7dff285.69049",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Name\":\"<b>Yokoi</b>\",\"Age\":\"30\",\"Color\":\"lime\",\"Prog\":70,\"Star\":\"3\"},{\"Name\":\"<i>DCJ</i>\",\"Age\":\"50\",\"Color\":\"dodgerblue\",\"Prog\":\"45\",\"Star\":2,\"Pass\":false,\"web\":\"\"},{\"Name\":\"Nick\",\"Age\":\"40\",\"Color\":\"darkred\",\"Prog\":95,\"Star\":\"5\",\"Pass\":true,\"web\":\"http://nodered.org\"},{\"Name\":\"Oli\"}]",
        "payloadType": "json",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "7d48e13.90ee22"
            ]
        ]
    },
    {
        "id": "cb53cb76.5fd0d8",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Name\":\"<b>Yokoi</b>\",\"Age\":\"30\",\"Color\":\"lime\",\"Prog\":20,\"Star\":\"1\"},{\"Name\":\"<i>DCJ</i>\",\"Age\":\"50\",\"Color\":\"dodgerblue\",\"Prog\":\"80\",\"Star\":4,\"Pass\":true,\"web\":\"\"},{\"Name\":\"Nick\",\"Age\":\"40\",\"Color\":\"red\",\"Prog\":90,\"Star\":\"5\",\"Pass\":true,\"web\":\"http://nodered.org\"},{\"Name\":\"Oli\"}]",
        "payloadType": "json",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "7d48e13.90ee22"
            ]
        ]
    },
    {
        "id": "7d48e13.90ee22",
        "type": "ui_table",
        "z": "90f171682dfc3f42",
        "group": "571a38b1.5e3638",
        "name": "People",
        "order": 1,
        "width": "8",
        "height": "3",
        "columns": [
            {
                "field": "Name",
                "title": "Who",
                "width": "200",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Age",
                "title": "Age",
                "width": "40",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Color",
                "title": "",
                "width": "5%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Star",
                "title": "%",
                "width": "100",
                "align": "left",
                "formatter": "star",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Pass",
                "title": "",
                "width": "5%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Prog",
                "title": "",
                "width": "80",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "web",
                "title": "URL",
                "width": "",
                "align": "left",
                "formatter": "link",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 880,
        "y": 380,
        "wires": []
    },
    {
        "id": "7fb333832a4696fa",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1f56a7dfce1bdf69",
        "type": "inject",
        "z": "90f171682dfc3f42",
        "name": "Load user info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2020,
        "wires": [
            [
                "2c2e3d9b67bdd849"
            ]
        ]
    },
    {
        "id": "2c2e3d9b67bdd849",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Par (read file)",
        "func": "msg.filename = global.get('userCredentialsLocation') + global.get('userCredentialsFilename');\nmsg.columns = \"ID, username, password\";\nmsg.payload = {\n    start: global.get('userCredentialsLocation'),\n    pattern: global.get('userCredentialsFilename')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2020,
        "wires": [
            [
                "685db81b0bac5f0b"
            ]
        ]
    },
    {
        "id": "66b6270fcfbdd3c2",
        "type": "file in",
        "z": "90f171682dfc3f42",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 2080,
        "wires": [
            [
                "3f59c637a1060639",
                "c2a927f4ba4fd91c"
            ]
        ]
    },
    {
        "id": "3f59c637a1060639",
        "type": "csv",
        "z": "90f171682dfc3f42",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1010,
        "y": 2080,
        "wires": [
            [
                "2456bcb633a3fddd",
                "f808751ebe227a39"
            ]
        ]
    },
    {
        "id": "2456bcb633a3fddd",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c2a927f4ba4fd91c",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2040,
        "wires": []
    },
    {
        "id": "f808751ebe227a39",
        "type": "join",
        "z": "90f171682dfc3f42",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1150,
        "y": 2080,
        "wires": [
            [
                "5b1fe6f123919f2a",
                "93adf4da80060978"
            ]
        ]
    },
    {
        "id": "5b1fe6f123919f2a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2040,
        "wires": []
    },
    {
        "id": "93adf4da80060978",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Set Flow",
        "func": "let data = msg.payload,\n    usernames = [],\n    passwords = [];\nfor (let i = 0; i < data.length; i++) {\n    //Set\n    usernames.push(data[i].username);\n    passwords.push(data[i].password);\n}\nflow.set(\"usernames\", usernames);\nflow.set(\"passwords\", passwords);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2080,
        "wires": [
            [
                "5bab2cbe2d10740c",
                "7ce425fd6f0879fc"
            ]
        ]
    },
    {
        "id": "5bab2cbe2d10740c",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2120,
        "wires": []
    },
    {
        "id": "ab54695d8b90815c",
        "type": "comment",
        "z": "90f171682dfc3f42",
        "name": "Load Login Credentials",
        "info": "CSV Line:\n• Column headers are hard coded in Set Flow\n",
        "x": 140,
        "y": 1940,
        "wires": []
    },
    {
        "id": "155f4a527d2e624a",
        "type": "ui_button",
        "z": "90f171682dfc3f42",
        "name": "",
        "group": "9a5680e46e5f9771",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "REFRESH",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "indent",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "6cc8bbe5846332b5"
            ]
        ]
    },
    {
        "id": "f40f478d71984f02",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Refresher",
        "func": "node.send({payload: []});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "55aaacd276ca4bfa"
            ]
        ]
    },
    {
        "id": "685db81b0bac5f0b",
        "type": "fs-file-lister",
        "z": "90f171682dfc3f42",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 560,
        "y": 2020,
        "wires": [
            [
                "9813236685e2af7a"
            ]
        ]
    },
    {
        "id": "9813236685e2af7a",
        "type": "switch",
        "z": "90f171682dfc3f42",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 2020,
        "wires": [
            [
                "6734f2d9539c62ce",
                "05f01d1e79365ca5"
            ],
            [
                "66b6270fcfbdd3c2",
                "e423bf99f7883b3a"
            ]
        ]
    },
    {
        "id": "2a6a3d3626e8d156",
        "type": "link out",
        "z": "90f171682dfc3f42",
        "name": "Registration form out",
        "mode": "link",
        "links": [
            "db60f5a4308ead20"
        ],
        "x": 435,
        "y": 1400,
        "wires": []
    },
    {
        "id": "db60f5a4308ead20",
        "type": "link in",
        "z": "90f171682dfc3f42",
        "name": "Load Credentials in",
        "links": [
            "2a6a3d3626e8d156"
        ],
        "x": 215,
        "y": 2080,
        "wires": [
            [
                "2c2e3d9b67bdd849"
            ]
        ]
    },
    {
        "id": "4c67ec09c671a6df",
        "type": "link out",
        "z": "90f171682dfc3f42",
        "name": "Load Credentials out",
        "mode": "link",
        "links": [
            "0de8581ca5651dc9"
        ],
        "x": 1575,
        "y": 2000,
        "wires": []
    },
    {
        "id": "0de8581ca5651dc9",
        "type": "link in",
        "z": "90f171682dfc3f42",
        "name": "Registration Form in",
        "links": [
            "4c67ec09c671a6df"
        ],
        "x": 525,
        "y": 1480,
        "wires": [
            [
                "215d088689c2f725"
            ]
        ]
    },
    {
        "id": "20eb7ca2f9e89045",
        "type": "function",
        "z": "90f171682dfc3f42",
        "name": "Check",
        "func": "if (msg.lineFlag == 'formInput') {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2000,
        "wires": [
            [
                "4c67ec09c671a6df",
                "328bb7b454d9ce0d"
            ]
        ]
    },
    {
        "id": "acb1cef1e87b991e",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 243",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1920,
        "wires": []
    },
    {
        "id": "05f01d1e79365ca5",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 244",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1880,
        "wires": []
    },
    {
        "id": "e423bf99f7883b3a",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2160,
        "wires": []
    },
    {
        "id": "328bb7b454d9ce0d",
        "type": "debug",
        "z": "90f171682dfc3f42",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1940,
        "wires": []
    },
    {
        "id": "c891a63d83380320",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "9c33923ae87f26b0"
            ]
        ]
    },
    {
        "id": "9c33923ae87f26b0",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/products.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "c7a93f48424e91c8"
            ]
        ]
    },
    {
        "id": "c7a93f48424e91c8",
        "type": "file in",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "263d72c49c8806ed"
            ]
        ]
    },
    {
        "id": "b71de4744c0474cc",
        "type": "join",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 820,
        "y": 220,
        "wires": [
            [
                "997df50f70c549a9",
                "3a33f18d1fd31730"
            ]
        ]
    },
    {
        "id": "088efd7a54561a7c",
        "type": "csv",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 660,
        "y": 220,
        "wires": [
            [
                "b71de4744c0474cc",
                "19d8d9e7b119b01e",
                "11b11b037d3e51ed"
            ]
        ]
    },
    {
        "id": "19d8d9e7b119b01e",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Calc time difference",
        "func": "if (context.get('timer') == undefined) {\n    context.set('timer', new Date().getTime())\n} else if (msg.lineFlag == 'trigger') {\n    let currentTime = new Date().getTime();\n    msg.payload = currentTime - context.get('timer');\n    context.set('timer', undefined);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 140,
        "wires": [
            [
                "38d6434be758d0a7"
            ]
        ]
    },
    {
        "id": "997df50f70c549a9",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Set Trigger",
        "func": "msg.lineFlag = 'trigger';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "19d8d9e7b119b01e"
            ]
        ]
    },
    {
        "id": "11b11b037d3e51ed",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 139",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "38d6434be758d0a7",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 60,
        "wires": []
    },
    {
        "id": "3a33f18d1fd31730",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 141",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    },
    {
        "id": "263d72c49c8806ed",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 142",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "9ec52cf046598a9a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "5827a37590da09cb"
            ]
        ]
    },
    {
        "id": "5827a37590da09cb",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/Steps.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "c7a93f48424e91c8"
            ]
        ]
    },
    {
        "id": "e83f27a0af8dab0f",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Check Size of Payload",
        "func": "msg.size = Buffer.byteLength(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "0247aee91f6bd7f5"
            ]
        ]
    },
    {
        "id": "0247aee91f6bd7f5",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "2a4ee2968fd0742c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Flow variables",
        "func": "flow.set('products', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "15590603a5bbc09e",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "ce0bd01e1c031139"
            ]
        ]
    },
    {
        "id": "ce0bd01e1c031139",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/products.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "9796b5d77f290f90"
            ]
        ]
    },
    {
        "id": "9796b5d77f290f90",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 540,
        "wires": [
            [
                "2a4ee2968fd0742c"
            ]
        ]
    },
    {
        "id": "59b9cd238764487d",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "61b8cb89a20f7b3d"
            ]
        ]
    },
    {
        "id": "61b8cb89a20f7b3d",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Config Read",
        "func": "msg.filename = \"C:/Users/User/Documents/Work/Ateka automation/Projects/Defy/Client requests/Steps.csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 620,
        "wires": [
            [
                "56a23a7a7300e35a"
            ]
        ]
    },
    {
        "id": "56a23a7a7300e35a",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 500,
        "y": 620,
        "wires": [
            [
                "c9b7d3419b5f6168"
            ]
        ]
    },
    {
        "id": "c9b7d3419b5f6168",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Flow variables",
        "func": "flow.set('steps', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f6448b5a5e0363a9",
        "type": "comment",
        "z": "c00c7edc48758726",
        "g": "dae082823c9d1d01",
        "name": "Check load spead and size ",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "ed8144c6f4129aee",
        "type": "comment",
        "z": "c00c7edc48758726",
        "name": "",
        "info": "",
        "x": 100,
        "y": 420,
        "wires": []
    },
    {
        "id": "9e9f0b040db4c704",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "83a3b7c84ae4b7fc"
            ]
        ]
    },
    {
        "id": "83a3b7c84ae4b7fc",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Create data from CSV",
        "func": "let products = flow.get('products'),\n    steps = flow.get('steps'),\n    productHeaders = [],\n    productIndexer = [],\n    stepsHeaders = [],\n    paulHMIcsv = [],\n    arr = [],\n    productCounter  = 1,\n    j = 0;\n\n    //del\n    let counter = 0\n    //\n\n// Separate rows\nproducts = products.split(/\\r?\\n/);\nsteps = steps.split(/\\r?\\n/);\n\nproductHeaders = products.splice(0, 1);\nstepsHeaders = steps.splice(0, 1);\n\nfor (let i = 0; i < products.length; i++) { \n    products[i] = products[i].split(',');\n    productIndexer.push(parseInt(products[i][0]))\n}\n\nfor (let i = 0; i < steps.length; i++) {\n    steps[i] = steps[i].split(',');\n\n    for (let j = 0; j < steps[i].length; j++) {\n        if ((j >= 0) && (j <= 2)) {\n            steps[i][j] = parseInt(steps[i][j]);\n        } else if ((j == 5) || (j == 6)) {\n            steps[i][j] = parseFloat(steps[i][j]);\n        } else if (j == 10) {\n            steps[i][j] =  Boolean(parseInt(steps[i][j]));\n        }\n    }\n    \n    if (counter++ < 0) {\n        node.send({\n            payload: {\n                i: i,\n                productCounter: productCounter,\n                index: productIndexer.indexOf(productCounter),\n                //arr: arr,\n                //paulHMIcsv: paulHMIcsv,\n                //'steps[i][1]': parseFloat(steps[i][1]),\n                //productCounter: productCounter\n            }\n        });\n    }\n    if (steps[i][1] != productCounter) { // Find the instance where product number changes\n        let index = productIndexer.indexOf(productCounter);\n        if (index != -1)\n            paulHMIcsv.push([products[index], arr]);\n        arr = [];\n        productCounter = steps[i][1]; // Set prodcut number to next product number\n    }\n    \n    arr.push(steps[i]);\n\n}\n\n//del\narr = []\nfor(let i = 0; i < paulHMIcsv.length; i++) {\n    arr.push(paulHMIcsv[i][1][0][1]);\n}\nmsg.payload = paulHMIcsv;\n/*//\nmsg.payload = {\n    arr: arr,\n    paulHMIcsv: paulHMIcsv,\n    //productHeaders: productHeaders,\n    //products: products,\n    productIndexer: productIndexer,\n    //steps: steps\n}*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "fcad0d90af0d3319",
                "0a669fd725936c42"
            ]
        ]
    },
    {
        "id": "fcad0d90af0d3319",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 144",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 700,
        "wires": []
    },
    {
        "id": "0a669fd725936c42",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "function 19",
        "func": "let i = 0,\n    output = {},\n    parameterData = {}\n\nfor (let j = 0; j < msg.payload[i][1].length; j++) {\n    msg.payload[i][1][j]\n}\noutput = {\n    File_Code: msg.payload[i][0][3],\n    File_Name: msg.payload[i][0][1],\n    parameterData : {\n\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "e3df95cdec702756"
            ]
        ]
    },
    {
        "id": "e3df95cdec702756",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 150",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 700,
        "wires": []
    },
    {
        "id": "094efcd5554c0129",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "1716e06bf68d3396"
            ]
        ]
    },
    {
        "id": "1716e06bf68d3396",
        "type": "file in",
        "z": "c00c7edc48758726",
        "name": "Read A Basic JSON",
        "filename": "C:/Users/User/Documents/Coding/Node Red/Recipes/A Basic.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 480,
        "wires": [
            [
                "80ee1e39c9a83726"
            ]
        ]
    },
    {
        "id": "80ee1e39c9a83726",
        "type": "json",
        "z": "c00c7edc48758726",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 480,
        "wires": [
            [
                "704ac4cacdb045de"
            ]
        ]
    },
    {
        "id": "704ac4cacdb045de",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 151",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "6d63afd67c1ee77a",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 980,
        "wires": [
            [
                "026b1534894d38c0"
            ]
        ]
    },
    {
        "id": "bc67f62fa2a10a6a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "6d63afd67c1ee77a"
            ]
        ]
    },
    {
        "id": "026b1534894d38c0",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 153",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 920,
        "wires": []
    },
    {
        "id": "eac26054e44179bb",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "put",
        "filename": "Test1.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "e56a45544362508f"
            ]
        ]
    },
    {
        "id": "199c15f589926339",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "delete",
        "filename": "Test.csv",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 1140,
        "wires": [
            [
                "ec16815c05a66d3d"
            ]
        ]
    },
    {
        "id": "a0c22cd08197a3ad",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "05bf051581f2da76",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 270,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "2b1ec2b166ba7034",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "eac26054e44179bb"
            ]
        ]
    },
    {
        "id": "e56a45544362508f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 154",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1020,
        "wires": []
    },
    {
        "id": "299c442f263eb01a",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1140,
        "wires": [
            [
                "199c15f589926339"
            ]
        ]
    },
    {
        "id": "ec16815c05a66d3d",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 155",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6bf0f5ca7f085c5a",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "list",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 980,
        "wires": [
            [
                "7f263bb005d70588"
            ]
        ]
    },
    {
        "id": "47d467d0723682cf",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 980,
        "wires": [
            [
                "6bf0f5ca7f085c5a"
            ]
        ]
    },
    {
        "id": "7f263bb005d70588",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 156",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 920,
        "wires": []
    },
    {
        "id": "18d7dfc3b8c90867",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/NewEnRcp.csv",
        "name": "",
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "c7c41838fa3f452f",
                "1e9d03bf746f3831"
            ]
        ]
    },
    {
        "id": "0e0be36cdd7d39ea",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "delete",
        "filename": "Test.csv",
        "localFilename": "",
        "name": "",
        "x": 1390,
        "y": 960,
        "wires": [
            [
                "76aa97935fbd37ae"
            ]
        ]
    },
    {
        "id": "1325b7fa3f49caa8",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Put Mine",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "18d7dfc3b8c90867"
            ]
        ]
    },
    {
        "id": "c7c41838fa3f452f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 157",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b427c062606f8a91",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1240,
        "y": 960,
        "wires": [
            [
                "0e0be36cdd7d39ea"
            ]
        ]
    },
    {
        "id": "76aa97935fbd37ae",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 158",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 920,
        "wires": []
    },
    {
        "id": "38c5b77acb14dc9a",
        "type": "comment",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "PLC Write",
        "info": "Currently disconnected",
        "x": 120,
        "y": 4600,
        "wires": []
    },
    {
        "id": "cf9c4a7080dfbd5e",
        "type": "inject",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 4740,
        "wires": [
            [
                "95595f4fbfdee98f"
            ]
        ]
    },
    {
        "id": "95595f4fbfdee98f",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Testing",
        "func": "msg.payload = flow.get(\"writeData\");\n\nlet data = msg.payload;\n// Basic\n// Set x2\nlet sa = 0, // Set Starting register for PLC writing\n    entryRegisterLength = 2, //Num of registers used per entry (because type is float)\n    values = [],\n    i = 0;\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nmsg.check = {\n    basicKeys: basicKeys,\n    values: values\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4740,
        "wires": [
            [
                "9161d0a7fda2def9",
                "948d8df774b8c958"
            ]
        ]
    },
    {
        "id": "9161d0a7fda2def9",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Testing recipe",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 4680,
        "wires": []
    },
    {
        "id": "948d8df774b8c958",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Set Data",
        "func": "let data = msg.payload;\nlet sa, // Starting register for PLC writing\n    keys = Object.keys(data.parameterData),\n    i,\n    entryCount = 20, // Total possible entry cound of the extra ParameterData\n    entryRegisterLength,\n    values = [];\n\n\n// Basic\n// Set x2\nsa = 0, // Set Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry (because type is float)\nvalues = [];\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += basicCount * entryRegisterLength;\n\n// Values\n// Set x2\n//sa = 100, // Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].value);\n}\nlet msgValues = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// Names\n//sa = 0, // Starting register for PLC writing\nentryRegisterLength = 10;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].name);\n}\nlet msgNames = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// instructions\n//sa = 120, // Starting register for PLC writing\nentryRegisterLength = 25;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].instructions);\n}\nlet msgInstructions = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\nreturn [msgBasic, msgValues, msgNames, msgInstructions];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 4800,
        "wires": [
            [
                "874bdaad96171add",
                "677bd563ce9ca164"
            ],
            [
                "b631b5fbf3c2b52b",
                "874bdaad96171add"
            ],
            [
                "8f10c3d9a5533e50",
                "874bdaad96171add"
            ],
            [
                "3f06d61a64506ac6",
                "874bdaad96171add"
            ]
        ]
    },
    {
        "id": "874bdaad96171add",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Load to PLC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 4640,
        "wires": []
    },
    {
        "id": "677bd563ce9ca164",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Float 2W",
        "func": "//Par.Basic\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 4680,
        "wires": [
            [
                "7b9ab9a85bf8b121"
            ]
        ]
    },
    {
        "id": "b631b5fbf3c2b52b",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Float 2W",
        "func": "//Par.Values\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 4760,
        "wires": [
            [
                "2c4473ebc154fc97",
                "6a60a7604f75eba9"
            ]
        ]
    },
    {
        "id": "8f10c3d9a5533e50",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Reg as Char",
        "func": "//Par.Names\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 4840,
        "wires": [
            [
                "8459fcb3ab783bf4",
                "a7c171c540aa6b41"
            ]
        ]
    },
    {
        "id": "3f06d61a64506ac6",
        "type": "function",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Write Reg as Char",
        "func": "//Par.instructions\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 200, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 300, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 400, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 4920,
        "wires": [
            [
                "1366b07d65e1958a",
                "ea3db8512464c32e"
            ]
        ]
    },
    {
        "id": "7b9ab9a85bf8b121",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 4680,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2c4473ebc154fc97",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Float Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4720,
        "wires": []
    },
    {
        "id": "6a60a7604f75eba9",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 4760,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8459fcb3ab783bf4",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4800,
        "wires": []
    },
    {
        "id": "a7c171c540aa6b41",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 4840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1366b07d65e1958a",
        "type": "debug",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 4880,
        "wires": []
    },
    {
        "id": "ea3db8512464c32e",
        "type": "modbus-flex-write",
        "z": "c00c7edc48758726",
        "g": "e54de4b4f52cafbd",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 4920,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7cb4bbd55b6e97e1",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Put HMI.csv",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 1140,
        "wires": [
            [
                "412e6260f8f15bae"
            ]
        ]
    },
    {
        "id": "412e6260f8f15bae",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "put",
        "filename": "ATEKA_Params.csv",
        "localFilename": "C:/Users/User/Documents/Coding/Node Red/Recipes/WORKS.csv",
        "name": "",
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "171d674d5b13f4a2",
                "1e9d03bf746f3831"
            ]
        ]
    },
    {
        "id": "171d674d5b13f4a2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 186",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ee6482b1167f33d7",
        "type": "modbus-write",
        "z": "c00c7edc48758726",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "6800",
        "quantity": "1",
        "server": "da9fe7a69397cf03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1560,
        "y": 1080,
        "wires": [
            [
                "241f3b4160cdc063"
            ],
            []
        ]
    },
    {
        "id": "1e9d03bf746f3831",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set payload",
        "func": "msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "3c229db6b91c8447"
            ]
        ]
    },
    {
        "id": "9744a91657a9bb3b",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1180,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b221903f8cc030",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 187",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3c229db6b91c8447",
        "type": "delay",
        "z": "c00c7edc48758726",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1390,
        "y": 1080,
        "wires": [
            [
                "ee6482b1167f33d7"
            ]
        ]
    },
    {
        "id": "241f3b4160cdc063",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 188",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1000,
        "wires": []
    },
    {
        "id": "77af2e3c956bd306",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "Delete",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "666df0985192db8b"
            ]
        ]
    },
    {
        "id": "666df0985192db8b",
        "type": "ftp in",
        "z": "c00c7edc48758726",
        "ftp": "7415190bef9e3adb",
        "operation": "delete",
        "filename": "ATEKA_Params.csv",
        "localFilename": "",
        "name": "",
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "111c5c4c3b489f41"
            ]
        ]
    },
    {
        "id": "111c5c4c3b489f41",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 189",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c1727c7def2bde09",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Basic",
        "func": "let fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.coilBasic,\n    addresses = registers.coilBasicCount,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1560,
        "wires": [
            [
                "6c1185590f2e2a58",
                "0cdf7c8f2232dffa"
            ]
        ]
    },
    {
        "id": "22626261aa534394",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1560,
        "wires": [
            [
                "5808d2e152af6d05",
                "c1727c7def2bde09"
            ]
        ]
    },
    {
        "id": "6c1185590f2e2a58",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1930,
        "y": 1560,
        "wires": [
            [],
            [
                "961a2d1b809e4491",
                "3deb3b906c45b6fa"
            ]
        ]
    },
    {
        "id": "0cdf7c8f2232dffa",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 200",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d201e35b69f86a5c",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1310,
        "y": 1560,
        "wires": [
            [],
            [
                "22626261aa534394",
                "d53f69d4b434a63e"
            ]
        ]
    },
    {
        "id": "5808d2e152af6d05",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 201",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "basicResults",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1520,
        "wires": []
    },
    {
        "id": "961a2d1b809e4491",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilBasic = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1560,
        "wires": [
            [
                "3094c6a7046eb6ea",
                "3d29ba220d724e63"
            ]
        ]
    },
    {
        "id": "3deb3b906c45b6fa",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 202",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1520,
        "wires": []
    },
    {
        "id": "134d792251a54dff",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Basic",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.basicReg,\n    addresses = registers.basicRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1560,
        "wires": [
            [
                "d201e35b69f86a5c",
                "14f2fcc2063fcec2"
            ]
        ]
    },
    {
        "id": "d53f69d4b434a63e",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 203",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3094c6a7046eb6ea",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 204",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "coilBasic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3d29ba220d724e63",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Parameter",
        "func": "let fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.coilPar,\n    addresses = registers.coilParCount,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 1560,
        "wires": [
            [
                "4eefeafcfbde978e",
                "3f198241d472b1a6"
            ]
        ]
    },
    {
        "id": "272562c38e5c9354",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1560,
        "wires": [
            [
                "fe4ae2a820757ea8",
                "134d792251a54dff"
            ]
        ]
    },
    {
        "id": "14f2fcc2063fcec2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4eefeafcfbde978e",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2570,
        "y": 1560,
        "wires": [
            [],
            [
                "0e6ac90a4419a939",
                "08edd8648b6ef32d"
            ]
        ]
    },
    {
        "id": "3f198241d472b1a6",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 206",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 1480,
        "wires": []
    },
    {
        "id": "99d7ec1f908ed051",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 710,
        "y": 1560,
        "wires": [
            [],
            [
                "272562c38e5c9354",
                "3bae61cff4d0ba81"
            ]
        ]
    },
    {
        "id": "fe4ae2a820757ea8",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 207",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "parameterResults",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1520,
        "wires": []
    },
    {
        "id": "0e6ac90a4419a939",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilPar = msg.payload.data;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 1560,
        "wires": [
            [
                "019770d12951816f",
                "46645a19f3d5192d"
            ]
        ]
    },
    {
        "id": "08edd8648b6ef32d",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 208",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4104d17c52941432",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Par results",
        "func": "let fc=3,\n    //set\n    registers = flow.get('registers'),\n    sa = registers.parReg,\n    addresses = registers.parRegCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1560,
        "wires": [
            [
                "99d7ec1f908ed051"
            ]
        ]
    },
    {
        "id": "3bae61cff4d0ba81",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 209",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1520,
        "wires": []
    },
    {
        "id": "019770d12951816f",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 210",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "coilPar",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1520,
        "wires": []
    },
    {
        "id": "34294cbbe26c5f5e",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Set Registers",
        "func": "msg.registers = {\n    parReg: 15200,\n    parRegCount: 20,\n    basicReg: 15100,\n    basicRegCount: 5,\n    coilBasic: 7000,\n    coilBasicCount: 8,\n    coilPar: 7100,\n    coilParCount: 20,\n    parCountVal: 15048,\n    parCountCount: 1,\n    prodIDnameSA: 15000,\n    prodIDnameEntryCount: 2,\n    prodIDnameEntryRegisterLength: 15,\n    stationNameSA: 15050,\n    stationNameEntryCount: 1,\n    stationNameEntryRegisterLength: 15\n\n}\nflow.set('registers', msg.registers);\nflow.set('testResults', undefined);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1560,
        "wires": [
            [
                "4104d17c52941432",
                "2ec15a983c246c08"
            ]
        ]
    },
    {
        "id": "131b5a4059c1b893",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1560,
        "wires": [
            [
                "34294cbbe26c5f5e"
            ]
        ]
    },
    {
        "id": "8b7c478948dce28d",
        "type": "link in",
        "z": "c00c7edc48758726",
        "name": "Load PLC info in",
        "links": [
            "e99a5f4974e41824"
        ],
        "x": 105,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "2ec15a983c246c08",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "registers",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1480,
        "wires": []
    },
    {
        "id": "46645a19f3d5192d",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Char Product ID, Name",
        "func": "var fc=3;\nlet registers = flow.get('registers')\nvar sa = registers.prodIDnameSA;\nvar addresses = registers.prodIDnameEntryCount * registers.prodIDnameEntryRegisterLength;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1560,
        "wires": [
            [
                "7c5467bec94e8a07"
            ]
        ]
    },
    {
        "id": "7c5467bec94e8a07",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3230,
        "y": 1560,
        "wires": [
            [],
            [
                "31e68fbf797f722b",
                "740fe41463f249df"
            ]
        ]
    },
    {
        "id": "31e68fbf797f722b",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 10, //Number of registers allowed per instance\n    offset = 0,\n    //del\n    regChar = [],\n    test = \"\";\n\n// Reading it the right way\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i + 1 ]);\n        text += String.fromCharCode(msg.payload.buffer[i]);\n        i++;\n    }\n\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.prodIDname = output;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1560,
        "wires": [
            [
                "ca75a9e47ca4748e",
                "e032d7321917f95a"
            ]
        ]
    },
    {
        "id": "740fe41463f249df",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 214",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ca75a9e47ca4748e",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 215",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3600,
        "y": 1520,
        "wires": []
    },
    {
        "id": "5dc6f0b5d4e32bc3",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Station name",
        "func": "var fc=3;\nlet registers = flow.get('registers')\nvar sa = registers.stationNameSA;\nvar addresses = registers.stationNameEntryCount * registers.stationNameEntryRegisterLength;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4350,
        "y": 1560,
        "wires": [
            [
                "0679f9abbe180469"
            ]
        ]
    },
    {
        "id": "0679f9abbe180469",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4510,
        "y": 1560,
        "wires": [
            [],
            [
                "294712c19438413b",
                "ca0062692824b415"
            ]
        ]
    },
    {
        "id": "294712c19438413b",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Reg as Char",
        "func": "let output = [],\n    //Set\n    entryRegisterLength = 15, //Number of registers allowed per instance\n    offset = 0,\n    //del\n    regChar = [],\n    test = \"\";\n\n// Reading it the right way\nfor (let i = 0; i < msg.payload.data.length / entryRegisterLength; i++) { // Loop for number of entries\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i + 1 ]);\n        text += String.fromCharCode(msg.payload.buffer[i]);\n        i++;\n    }\n\n    offset += entryRegisterLength * 2;\n    output.push(text);\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.stationName = output;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4710,
        "y": 1560,
        "wires": [
            [
                "4bd691457e8d0f56"
            ]
        ]
    },
    {
        "id": "ca0062692824b415",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 218",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4700,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4bd691457e8d0f56",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 219",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4880,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e14ff10de5281b13",
        "type": "link out",
        "z": "c00c7edc48758726",
        "name": "Loaded TestResults from PLC",
        "mode": "link",
        "links": [
            "383005b740be9c02"
        ],
        "x": 4875,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7f624863d870a386",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1.4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1680,
        "wires": [
            [
                "f9c16b448d1fe0f4"
            ]
        ]
    },
    {
        "id": "f9c16b448d1fe0f4",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "function 22",
        "func": "msg.payload = flow.get('testResults');\nflow.set('testResults', undefined);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "5364a1fbcb62c763"
            ]
        ]
    },
    {
        "id": "5364a1fbcb62c763",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e032d7321917f95a",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Float: Parameter Count",
        "func": "let fc=3,\n    //set\n    //This is the station nuber and number of tests\n    registers = flow.get('registers'),\n    sa = registers.misc,\n    addresses = registers.miscCount*2,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1560,
        "wires": [
            [
                "9e6ee30d71bf2d20"
            ]
        ]
    },
    {
        "id": "9e6ee30d71bf2d20",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3930,
        "y": 1560,
        "wires": [
            [],
            [
                "29f87e87d2e6427c",
                "19b5fdf0723f80a2"
            ]
        ]
    },
    {
        "id": "29f87e87d2e6427c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "const offset = 4; \nlet buf,\n     values = [],\n     numRegistersRead = msg.payload.buffer.length / 4; // reads the number of 2W (doubl regsiters) there are\n\nfor (let i = 0; i < numRegistersRead; i++) {\n    //The way Node-Red writes it\n    //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n\n    buf = msg.payload.buffer.slice(i * offset, i * offset + offset);\n    buf = [buf[2], buf[3], buf[0], buf[1]];\n    buf = Buffer.from(buf);\n    values.push(buf.readFloatBE());\n\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.misc = values;\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1560,
        "wires": [
            [
                "ba6786f0ece23c70",
                "5dc6f0b5d4e32bc3"
            ]
        ]
    },
    {
        "id": "19b5fdf0723f80a2",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 212",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4100,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ba6786f0ece23c70",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 213",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "misc",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4260,
        "y": 1520,
        "wires": []
    },
    {
        "id": "6e8e54189f245f62",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1800,
        "wires": [
            [
                "dee6ad9f67d054cf"
            ]
        ]
    },
    {
        "id": "dee6ad9f67d054cf",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch one",
        "func": "// Batch one:\n//Product ID\t    15 000\tchar    10 Reg\n//File Name\t        15 015\tchar    10 Reg\n//User ID           15 030  char    10 Reg\n//Parameter count\t15 048\tfloat    2 Reg\n//Test station name\t15 050\tchar    15 Reg\n\nlet fc = 3,\n    sa = 15000,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1800,
        "wires": [
            [
                "4a9018fffea03613"
            ]
        ]
    },
    {
        "id": "4a9018fffea03613",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 570,
        "y": 1800,
        "wires": [
            [],
            [
                "cc57365dcbbbd478",
                "293d61fed1541bb1"
            ]
        ]
    },
    {
        "id": "cc57365dcbbbd478",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "let charValues = [],\n    //Set\n    charBuf = [\n        msg.payload.buffer.slice(0, 20), //0 Char Recipe ID\n        msg.payload.buffer.slice(30, 50), //1  Char File Name\n        msg.payload.buffer.slice(60, 80), //2 User ID\n        msg.payload.buffer.slice(100, 130) //3 Char Test Station Name\n    ],\n    floatBuf = [msg.payload.buffer.slice(96, 100)], //0 Float Par Count ,\n    charBufRegLength = [10, 10, 10, 15],\n    floatBufRegLength = [1],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charValues.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charValues: charValues,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.recipeID = charValues[0];\ntestResults.recipeFileName = charValues[1];\ntestResults.userID = charValues[2];\ntestResults.stationName = charValues[3];\ntestResults.parCount = floatValues[0][0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1800,
        "wires": [
            [
                "206f40f961d11729",
                "c0362b3b5c3de325"
            ]
        ]
    },
    {
        "id": "293d61fed1541bb1",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 221",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1760,
        "wires": []
    },
    {
        "id": "206f40f961d11729",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 222",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c0362b3b5c3de325",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch two",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet fc = 3,\n    sa = 15100,\n    quantity = 10;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1800,
        "wires": [
            [
                "624e710f3b92968e"
            ]
        ]
    },
    {
        "id": "624e710f3b92968e",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1200,
        "y": 1800,
        "wires": [
            [],
            [
                "4385c7c0bdac43e6",
                "adf467e4b9a581bf"
            ]
        ]
    },
    {
        "id": "4385c7c0bdac43e6",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "// Batch two:\n//Dead short\t15 100\tfloat\t2 Reg\n//Earth bond\t15 102\tfloat\t2 Reg\n//IR\t        15 104\tfloat\t2 Reg\n//ACW\t        15 106\tfloat\t2 Reg\n//ELC\t        15 108\tfloat\t2 Reg\n// Float arr of size 5, reg = 10\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [msg.payload.buffer.slice(0, 20)], //0 Float Par Count ,\n    charBufRegLength = [],\n    floatBufRegLength = [5],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.basicResults = floatValues[0];\nflow.set('testResults', testResults);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1800,
        "wires": [
            [
                "b7fd74e5fb994602",
                "e4d8815e125ff0e0"
            ]
        ]
    },
    {
        "id": "adf467e4b9a581bf",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 223",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b7fd74e5fb994602",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e4d8815e125ff0e0",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Call Batch three",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet fc = 3,\n    sa = 15200,\n    quantity = 100;\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1800,
        "wires": [
            [
                "412e279cf796743f"
            ]
        ]
    },
    {
        "id": "412e279cf796743f",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1820,
        "y": 1800,
        "wires": [
            [],
            [
                "b336afc134975bdd",
                "92ef35e3e112c915"
            ]
        ]
    },
    {
        "id": "b336afc134975bdd",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Read Buffer",
        "func": "// Batch three:\n//Parameters Values\t    15 200\tfloat\t40 Reg\t20 Entries\n//Parameters Voltage\t15 250\tfloat\t40 Reg\t20 Entries\n\nlet charOutput = [],\n    //Set\n    charBuf = [],\n    floatBuf = [\n        msg.payload.buffer.slice(0, 80),\n        msg.payload.buffer.slice(100, 180)\n        ], \n    charBufRegLength = [],\n    floatBufRegLength = [20, 20],\n    arr = [];\n\n// Reading it the right way\nfor (let i = 0; i < charBuf.length; i++) { // Go through character calls\n    let text = \"\";\n\n    /*//Doesn't work with Delta, seems they switch the high and low bits of a register\n    for (let i = offset; i < offset + entryRegisterLength * 2; i++) { // 2 buffers for every register\n        text += String.fromCharCode(msg.payload.buffer[i]);\n    }\n    */\n    for (let j = 0; j < charBufRegLength[i] * 2; j++) { // 2 buffers for every register\n        text += String.fromCharCode(charBuf[i][j + 1]);\n        text += String.fromCharCode(charBuf[i][j]);\n        j++;\n    }\n    charOutput.push(text);\n}\n\nconst offset = 4; // buffer length of a Float\nlet buf,\n    floatValues = [];\n\nfor (let i = 0; i < floatBufRegLength.length; i++) {\n    for (let j = 0; j < floatBufRegLength[i]; j++) {\n        //The way Node-Red writes it\n        //buf = Buffer.from(msg.payload.buffer.slice(i * offset, i * offset + offset));\n        //Our PLCs seem to read them backwards (2nd reg first)\n        buf = floatBuf[i].slice(j * offset, j * offset + offset);\n        buf = [buf[2], buf[3], buf[0], buf[1]];\n        buf = Buffer.from(buf);\n        arr.push(buf.readFloatBE());\n    }\n    floatValues.push(arr);\n    arr = [];\n}\n\n\nmsg.check = {\n    charOutput: charOutput,\n    floatValues: floatValues,\n    floatBuf: floatBuf,\n    charBuf: charBuf\n}\n\nlet testResults = flow.get('testResults') || {};\ntestResults.parameterResults = floatValues[0];\ntestResults.parameterVoltages = floatValues[1];\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1800,
        "wires": [
            [
                "8360fbdbebcf2f94",
                "800387392ad1c01c"
            ]
        ]
    },
    {
        "id": "92ef35e3e112c915",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 225",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.buffer",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8360fbdbebcf2f94",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 226",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "check",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1760,
        "wires": []
    },
    {
        "id": "800387392ad1c01c",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Coil: Basic",
        "func": "//Test \t        7 000\n//Dead short\t7 001\n//Earth bond\t7 002\n//IR\t        7 003\n//ACW\t        7 004\n//ELC\t        7 005\n//Visual Test\t7 009\n\n\nlet fc=1,\n    //set\n    registers = flow.get('registers'),\n    sa = 7000,\n    quantity = 10,\n    slave_ip = msg.payload.slave_ip; //Incomplete: Need to look at this\n\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': quantity };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 1800,
        "wires": [
            [
                "491258d7fa69699f",
                "623da2f02668bd53"
            ]
        ]
    },
    {
        "id": "491258d7fa69699f",
        "type": "modbus-flex-getter",
        "z": "c00c7edc48758726",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "da9fe7a69397cf03",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2390,
        "y": 1800,
        "wires": [
            [],
            [
                "a386d629b2e4fca9",
                "52047b3e6ddc2965"
            ]
        ]
    },
    {
        "id": "623da2f02668bd53",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 227",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a386d629b2e4fca9",
        "type": "function",
        "z": "c00c7edc48758726",
        "name": "Store values",
        "func": "\nlet testResults = flow.get('testResults') || {};\ntestResults.coilFullTest = msg.payload.data.slice(0, 1);\ntestResults.coilBasic = msg.payload.data.slice(1, 6);\ntestResults.coilVisualTest = msg.payload.data.slice(9, 10);\nflow.set('testResults', testResults)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 1800,
        "wires": [
            [
                "2cdf405db23c5d02"
            ]
        ]
    },
    {
        "id": "52047b3e6ddc2965",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 1760,
        "wires": []
    },
    {
        "id": "2cdf405db23c5d02",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "debug 229",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 1740,
        "wires": []
    },
    {
        "id": "129f78f209b1386f",
        "type": "inject",
        "z": "c00c7edc48758726",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"name\":\"MEQ0451495\",\"room\":\"Bathroom\",\"SET_TEMPERATURE-value\":22,\"ACTUAL_TEMPERATURE-value\":21.8,\"VALVE_STATE-value\":90,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":true,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ1875547\",\"room\":\"Living Room\",\"SET_TEMPERATURE-value\":12,\"ACTUAL_TEMPERATURE-value\":16.2,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":1},{\"name\":\"MEQ1875538\",\"room\":\"Living Room\",\"SET_TEMPERATURE-value\":18,\"ACTUAL_TEMPERATURE-value\":19.5,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.6,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":2},{\"name\":\"MEQ0447462\",\"room\":\"Kitchen\",\"SET_TEMPERATURE-value\":17,\"ACTUAL_TEMPERATURE-value\":22.2,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":10,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":3},{\"name\":\"MEQ1875551\",\"room\":\"Office\",\"SET_TEMPERATURE-value\":18,\"ACTUAL_TEMPERATURE-value\":20.2,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ0447425\",\"room\":\"Dining Room\",\"SET_TEMPERATURE-value\":19,\"ACTUAL_TEMPERATURE-value\":20.4,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ1875546\",\"room\":\"Dining Room\",\"SET_TEMPERATURE-value\":20,\"ACTUAL_TEMPERATURE-value\":18.8,\"VALVE_STATE-value\":99,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ0447483\",\"room\":\"Bedroom\",\"SET_TEMPERATURE-value\":17,\"ACTUAL_TEMPERATURE-value\":22.4,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ1875541\",\"room\":\"Child\",\"SET_TEMPERATURE-value\":18,\"ACTUAL_TEMPERATURE-value\":20.4,\"VALVE_STATE-value\":0,\"BATTERY_STATE-value\":2.7,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0},{\"name\":\"MEQ1875552\",\"room\":\"Guest Room\",\"SET_TEMPERATURE-value\":20,\"ACTUAL_TEMPERATURE-value\":21.1,\"VALVE_STATE-value\":9,\"BATTERY_STATE-value\":2.8,\"BOOST_STATE-value\":0,\"AUTO_MODE-value\":false,\"CONTROL_MODE-value\":0}]",
        "payloadType": "json",
        "x": 630,
        "y": 2320,
        "wires": [
            [
                "b055f05fe9e1f37f"
            ]
        ]
    },
    {
        "id": "b055f05fe9e1f37f",
        "type": "change",
        "z": "c00c7edc48758726",
        "name": "ui_control",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.field});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"groupHeader\":\"function (value, count, data, group) {return value + \\\"<span style='color:#d00; margin-left:10px;'>(\\\" + count + \\\" Termostat\\\"+((count>1) ? \\\"e\\\" : \\\"\\\") + \\\")</span>\\\";}\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"ROom\",\"field\":\"room\",\"width\":100,\"frozen\":true},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Device\",\"field\":\"name\",\"width\":100,\"align\":\"center\"},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Type\",\"field\":\"deviceType\",\"width\":100,\"align\":\"center\"},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Measurements\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"target\",\"field\":\"SET_TEMPERATURE-value\",\"formatter\":\"function(cell, formatterParams, onRendered){return cell.getValue()+'°C';}\",\"topCalc\":\"avg\",\"width\":100},{\"formatterParams\":{\"target\":\"_blank\",\"min\":10,\"max\":25,\"color\":[\"blue\",\"green\",\"red\"],\"legend\":\"function (value) {return '&nbsp;&nbsp;'+value+'°C';}\",\"legendColor\":\"#101010\",\"legendAlign\":\"left\"},\"title\":\"current\",\"field\":\"ACTUAL_TEMPERATURE-value\",\"formatter\":\"progress\",\"topCalc\":\"avg\",\"width\":100},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":99,\"color\":[\"gray\",\"orange\",\"red\"],\"legend\":\"function (value) {return (value>0)? '&nbsp;&nbsp;'+value+' %' : '-';}\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Valve\",\"field\":\"VALVE_STATE-value\",\"formatter\":\"progress\",\"topCalc\":\"max\",\"width\":100},{\"formatterParams\":{\"target\":\"_blank\",\"min\":1.5,\"max\":4.6,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {return value+' V';}\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Batt\",\"field\":\"BATTERY_STATE-value\",\"formatter\":\"progress\",\"topCalc\":\"min\",\"width\":100}]},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Settings\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":30,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#101010;'>\\\"+value+\\\" min</span>\\\";     else         return \\\"<span style='color:#A0A0A0;'>aus</span>\\\"; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Boost\",\"field\":\"BOOST_STATE-value\",\"formatter\":\"progress\",\"width\":100},{\"formatterParams\":{\"target\":\"_blank\",\"allowEmpty\":true,\"allowTruthy\":true,\"tickElement\":\"<i class='fa fa-clock-o'></i>\",\"crossElement\":\"<i class='fa fa-ban'></i>\"},\"title\":\"Auto\",\"field\":\"AUTO_MODE-value\",\"formatter\":\"tickCross\",\"width\":100,\"align\":\"center\"},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Mode\",\"field\":\"CONTROL_MODE-value\",\"formatter\":\"function(cell, formatterParams, onRendered){     var html=\\\"<i class=\\\\\\\"\\\";     switch(cell.getValue()) {         case 0: html+=\\\"fa fa-calendar-check-o\\\"; break;         case 1: html+=\\\"fa fa-hand-o-up\\\"; break;         case 2: html+=\\\"fa fa-suitcase\\\"; break;         case 3: html+=\\\"fa fa-spinner fa-spin fa-fw\\\"; break;     }     html+='\\\\\\\"></i>';     return html; }\",\"width\":100,\"align\":\"center\"},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Auto\",\"field\":\"AUTO_MODE-value\",\"formatter\":\"tick\",\"width\":100,\"align\":\"center\"}]}],\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\"},\"customHeight\":12}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 776,
        "y": 2320,
        "wires": [
            [
                "409ab229ed67ac2e"
            ]
        ]
    },
    {
        "id": "2cfc7665a95ee2e4",
        "type": "debug",
        "z": "c00c7edc48758726",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1089,
        "y": 2320,
        "wires": []
    },
    {
        "id": "409ab229ed67ac2e",
        "type": "ui_table",
        "z": "c00c7edc48758726",
        "group": "51ce6aa1.620754",
        "name": "Thermostats",
        "order": 1,
        "width": "20",
        "height": "7",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 939,
        "y": 2320,
        "wires": [
            [
                "2cfc7665a95ee2e4"
            ]
        ]
    },
    {
        "id": "10a34a73.96de26",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Autologger",
        "info": "",
        "x": 100,
        "y": 3000,
        "wires": []
    },
    {
        "id": "f6ce4717.b253f8",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 3080,
        "wires": [
            [
                "e5e99caa.1ff0d"
            ]
        ]
    },
    {
        "id": "e5e99caa.1ff0d",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Set data",
        "func": "var now = new Date();\n\nmsg.payload = {\n    \"timestamp\" : now.getTime(),\n    \"pressure\" : global.get(\"pressure\"),\n    \"out2\" : global.get(\"out2\"),\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 3080,
        "wires": [
            [
                "38815858.149328"
            ]
        ]
    },
    {
        "id": "38815858.149328",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Filename generator",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"logging_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/run/media/mmcblk0p1/\"+ msg.fname;\n\n// We save the current payload into a different place on the msg object\nmsg.filecontent = msg.payload;\n\n// We are passing the file name search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"pattern\":msg.fname};\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.fname});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 3200,
        "wires": [
            [
                "67699325.78f71c"
            ]
        ]
    },
    {
        "id": "67699325.78f71c",
        "type": "fs-file-lister",
        "z": "9d61395e.8839f8",
        "name": "",
        "start": "/run/media/mmcblk0p1/",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 440,
        "y": 3200,
        "wires": [
            [
                "f253fdc7.90677",
                "54315610.0d0b28"
            ]
        ]
    },
    {
        "id": "f253fdc7.90677",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 610,
        "y": 3120,
        "wires": []
    },
    {
        "id": "54315610.0d0b28",
        "type": "switch",
        "z": "9d61395e.8839f8",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 3200,
        "wires": [
            [
                "44030339.4ee2cc"
            ],
            [
                "bcd07e71.4ed01"
            ]
        ]
    },
    {
        "id": "65037767.3cb448",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": true,
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,pressure,out2",
        "skip": "0",
        "strings": true,
        "x": 930,
        "y": 3180,
        "wires": [
            [
                "1ae03d6f.567a83"
            ]
        ]
    },
    {
        "id": "1ae03d6f.567a83",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1090,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "7d456693.a8bc48",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": false,
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,pressure,out2",
        "skip": "0",
        "strings": true,
        "x": 930,
        "y": 3220,
        "wires": [
            [
                "1ae03d6f.567a83"
            ]
        ]
    },
    {
        "id": "44030339.4ee2cc",
        "type": "change",
        "z": "9d61395e.8839f8",
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 3180,
        "wires": [
            [
                "65037767.3cb448"
            ]
        ]
    },
    {
        "id": "bcd07e71.4ed01",
        "type": "change",
        "z": "9d61395e.8839f8",
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 3220,
        "wires": [
            [
                "7d456693.a8bc48"
            ]
        ]
    },
    {
        "id": "abcbdee1.a060e",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Every 10min",
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 3040,
        "wires": [
            [
                "e5e99caa.1ff0d"
            ]
        ]
    },
    {
        "id": "b159ca57c8afb8fa",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Testing reading and writing to files",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "3e6e4474a5fb0559",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Set Flow Par",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "6d99166c26f1b907"
            ]
        ]
    },
    {
        "id": "6d99166c26f1b907",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Set Flow Par",
        "func": "//test to see if this is necessary\n/*I haven't seen this to be useful except for taking care of\nsome warning*/\nflow.set(\"slaveIP\", \"192.168.101.253\"); //Workshop IP4 for my PC\n\n//write to files\n/*Setting flow variables for file paths. Should load this \nfrom a file, so Incomplete*/\nflow.set(\"dataFile1FullPath\", \"Some path\");\n\n//tag headers\n/*Incomplete: This should also be able to be loaded in*/\nlet headers = [\"LongTime\", \"Temperature1\", \"Temperature2\", \"Temperature3\", \"Pump1\", \"Pressure1\", \"Fan1\"];\n\nflow.set(\"HeadersLength\", headers.length);\nflow.set(\"Headers\", []);\n\nfor (let i = 0; i < headers.length; i++) {\n    flow.set(\"Headers[\" + i + \"]\", headers[i]);\n}\n//flow.set(\"Headers[3]\", \"Player4\");\n\n// calculate the date\nlet now = new Date();\n//now.setTime(now.getTime() - 1000 * 60 * 60 * 24 * i);\nlet yyyy = now.getFullYear();\nlet mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nlet dd = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nlet hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nlet mmm = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nlet ss = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n\n/*Incomplete: These are hard coded for the testing I was doing*/\nflow.set(\"path\", \"C:/Users/User/Documents/Coding/Node Red/Writing CSV/\");\n// Generate out file name pattern\nflow.set(\"fileName\", \"GioTest_\" + yyyy + mm + dd + \".csv\");\n\n// Full filename with path \nflow.set(\"fullFileName\", flow.get(\"path\") + flow.get(\"fileName\"));\n\n// Flow CSV inputs\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "acdf386edf670903",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Set Flow Par",
        "info": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "c37788a1a5dce115",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2150,
        "y": 420,
        "wires": [
            [
                "7bee82f5ce3cd67c"
            ]
        ]
    },
    {
        "id": "27bd17278b31e24f",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1710,
        "y": 400,
        "wires": [
            [
                "91e8f1a1d18f8bfa"
            ]
        ]
    },
    {
        "id": "8b05288560d32bc8",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B CSV data (NE)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 340,
        "wires": []
    },
    {
        "id": "6c3256cc5427432c",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "testtopic",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3880,
        "wires": [
            [
                "0ae40c5f4787b7db"
            ]
        ]
    },
    {
        "id": "0ae40c5f4787b7db",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "function 8",
        "func": "msg.payload = {\n    \"payload\" : 52,\n    \"player\" : 1,\n    \"time\" : \"Day time\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 3880,
        "wires": [
            [
                "72372ca8672b3596",
                "1752f313601a8670"
            ]
        ]
    },
    {
        "id": "72372ca8672b3596",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 3880,
        "wires": [
            [
                "63d16e168d24cf24"
            ]
        ]
    },
    {
        "id": "63d16e168d24cf24",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Test3",
        "filename": "C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\test3.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 590,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "1752f313601a8670",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 3820,
        "wires": []
    },
    {
        "id": "e008d9e42b905702",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Test3",
        "filename": "C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test3.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 295,
        "y": 3688.749979019165,
        "wires": [
            []
        ]
    },
    {
        "id": "f22134a459f4c6df",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Delete files",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 145,
        "y": 3688.749979019165,
        "wires": [
            [
                "e008d9e42b905702"
            ]
        ]
    },
    {
        "id": "54ec88759e63ec60",
        "type": "exec",
        "z": "9d61395e.8839f8",
        "command": "if exist \"C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test3.csv\" (     notepad \"C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test3.csv\" ) else (     return 0; )",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Test3",
        "x": 595,
        "y": 3688.749979019165,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a0ca98773875d05e",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 455,
        "y": 3688.749979019165,
        "wires": [
            [
                "54ec88759e63ec60"
            ]
        ]
    },
    {
        "id": "6e0e5d346292e7a0",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Test",
        "filename": "C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 295,
        "y": 3748.749979019165,
        "wires": [
            []
        ]
    },
    {
        "id": "a125e55c0a2956a0",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Delete files",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 145,
        "y": 3748.749979019165,
        "wires": [
            [
                "6e0e5d346292e7a0"
            ]
        ]
    },
    {
        "id": "fe67b707ab9a9038",
        "type": "exec",
        "z": "9d61395e.8839f8",
        "command": "if exist \"C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test.csv\" (     notepad \"C:\\Users\\User\\Documents\\Coding\\Node Red\\Writing CSV\\Test.csv\" ) else (     return 0; )",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Test3",
        "x": 595,
        "y": 3748.749979019165,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7a6376a98060e8bc",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 455,
        "y": 3748.749979019165,
        "wires": [
            [
                "fe67b707ab9a9038"
            ]
        ]
    },
    {
        "id": "28f3a6595f1eabfa",
        "type": "switch",
        "z": "9d61395e.8839f8",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 420,
        "wires": [
            [
                "689975d45b094300"
            ],
            [
                "c86b0edf2230b720"
            ]
        ]
    },
    {
        "id": "4e3bf013a8b4c671",
        "type": "fs-file-lister",
        "z": "9d61395e.8839f8",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 1220,
        "y": 420,
        "wires": [
            [
                "28f3a6595f1eabfa",
                "6ad651c13b7dc08e"
            ]
        ]
    },
    {
        "id": "5394a93ee8216242",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1710,
        "y": 440,
        "wires": [
            [
                "91e8f1a1d18f8bfa"
            ]
        ]
    },
    {
        "id": "c7ac8550675a31b6",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B CSV data (E)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 500,
        "wires": []
    },
    {
        "id": "689975d45b094300",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 400,
        "wires": [
            [
                "27bd17278b31e24f",
                "8b05288560d32bc8"
            ]
        ]
    },
    {
        "id": "c86b0edf2230b720",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 440,
        "wires": [
            [
                "5394a93ee8216242",
                "c7ac8550675a31b6"
            ]
        ]
    },
    {
        "id": "6ad651c13b7dc08e",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 500,
        "wires": []
    },
    {
        "id": "37643ba59fdc37fa",
        "type": "join",
        "z": "9d61395e.8839f8",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "272b3c8961bf3835",
                "818d89c559260072"
            ]
        ]
    },
    {
        "id": "272b3c8961bf3835",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "Join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7db9057277795737",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "restartTimeout",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topOrBottom",
                "v": "top",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1080,
        "wires": [
            [
                "9589d089fda41c26"
            ]
        ]
    },
    {
        "id": "9589d089fda41c26",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "multiply",
        "func": "let output = []\nfor (let i = 0; i < 5; i++) {\n    output.push(msg);\n}\nreturn [output];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1080,
        "wires": [
            [
                "57216b0c0ed213c7"
            ]
        ]
    },
    {
        "id": "57216b0c0ed213c7",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "rate",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 1080,
        "wires": [
            [
                "3847a9f8f48d1d61"
            ]
        ]
    },
    {
        "id": "3847a9f8f48d1d61",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "switch T/B",
        "func": "if (msg.topOrBottom == \"top\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "37643ba59fdc37fa"
            ]
        ]
    },
    {
        "id": "818d89c559260072",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Push data",
        "func": "msg.data = msg.payload;\n/*\nmsg.payload = {\n    \"start\" : flow.get(\"path\"),\n    \"pattern\" : flow.get(\"fileName\")\n}\nmsg.filename = flow.get(\"fullFileName\");\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 953.8888893127441,
        "y": 1080.5555057525635,
        "wires": [
            [
                "3625e4397968ea0d"
            ]
        ]
    },
    {
        "id": "44673df4713fb605",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "WRITING TO CSV",
        "info": "",
        "x": 130,
        "y": 1340,
        "wires": []
    },
    {
        "id": "85a031f44be5b297",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Temperature1",
        "func": "msg.topic = \"Temperature1\"\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "9cb14593de365b4f",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Temperature2",
        "func": "msg.topic = \"Temperature2\";\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "034e8820a3a1fc6b",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Temperature3",
        "func": "msg.topic = \"Temperature3\";\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "ad86ee7a847580f6",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "Data Generated",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "a1387674cb6e8ae5",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Buffer",
        "func": "//msg.payload = {};\n//context.set(\"output\", {})\ncontext.set(msg.topic, msg.data)\nif (msg.topic == \"bufferTrigger\") {\n\n    //set the time\n    context.set('LongTime', msg.payload);\n\n    let output = {};\n    msg.payload = {};\n\n    //Writing the config for file listener\n    msg.payload[\"start\"] = flow.get(\"path\");\n    msg.payload[\"pattern\"] = flow.get(\"fileName\");\n\n    output.LongTime = new Date().getTime();\n    let tags = flow.get(\"Parameters\").tagNames;\n    //let tags = [\"Player1\", \"player2\", \"Player3\"];\n\n    for(let i = 0; i < tags.length; i++) {\n        output[tags[i]] = context.get(tags[i]);\n    }\n    msg.data = output;\n\n    msg.columns = tags.toString(); //Used for CSV node\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 420,
        "wires": [
            [
                "799a98433f1ecc18",
                "4e3bf013a8b4c671"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "799a98433f1ecc18",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "Buffer",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "0e7c53c314302e88",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Trigger buffer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "bufferTrigger",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "9a043224f1e79f2a"
            ]
        ]
    },
    {
        "id": "162e1dce9af55f43",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Config",
        "func": "msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 420,
        "wires": [
            [
                "c37788a1a5dce115",
                "4906480f448e7368"
            ]
        ]
    },
    {
        "id": "4906480f448e7368",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "File write data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 360,
        "wires": []
    },
    {
        "id": "7bee82f5ce3cd67c",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 420,
        "wires": []
    },
    {
        "id": "4d185d09.5d09a4",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1640,
        "y": 2380,
        "wires": [
            [
                "b18987ec.4d8fd"
            ]
        ]
    },
    {
        "id": "b18987ec.4d8fd",
        "type": "change",
        "z": "9d61395e.8839f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "\"C:\\\\Users\\\\user\\\\Documents\\\\projects\\\\\" & $globalContext(\"directory\") & \"\\\\\" & $globalContext(\"file\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1840,
        "y": 2380,
        "wires": [
            [
                "fcb80581.9b311"
            ]
        ]
    },
    {
        "id": "fcb80581.9b311",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 2380,
        "wires": []
    },
    {
        "id": "d86d49e2839ed225",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "restartTimeout",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topOrBottom",
                "v": "top",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "c23a481b84c0659b"
            ]
        ]
    },
    {
        "id": "e790f22e031b6d53",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Inject JSON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"tagNames\":[\"LongTime\",\"Temperature1\",\"Temperature2\",\"Temperature3\",\"Pump1\",\"Pressure1\",\"Fan1\"],\"csv\":{\"savePath\":\"C:/Users/User/Documents/Coding/Node Red/Writing CSV/\",\"saveFileName\":\"\"}}",
        "payloadType": "json",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "99485996053fbe02"
            ]
        ],
        "info": "Includes headers\r\n"
    },
    {
        "id": "ecc1fd58fed0a027",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Saving and retrieving data",
        "info": "",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "e49213b329a8117e",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "write settings.json",
        "filename": "C:/Users/User/Documents/Coding/Node Red/Writing CSV/settings.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1110,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1af1c7566a3488b7",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "da856443a798135d"
            ]
        ]
    },
    {
        "id": "da856443a798135d",
        "type": "file in",
        "z": "9d61395e.8839f8",
        "name": "Read settings.json",
        "filename": "C:/Users/User/Documents/Coding/Node Red/Writing CSV/settings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 910,
        "y": 220,
        "wires": [
            [
                "93a604eedb0bff69"
            ]
        ]
    },
    {
        "id": "93a604eedb0bff69",
        "type": "json",
        "z": "9d61395e.8839f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "8a10cde13efce16f"
            ]
        ]
    },
    {
        "id": "99485996053fbe02",
        "type": "json",
        "z": "9d61395e.8839f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 160,
        "wires": [
            [
                "e49213b329a8117e"
            ]
        ]
    },
    {
        "id": "bfb34dab741eacc4",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1510,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a10cde13efce16f",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Make data global",
        "func": "flow.set(\"Parameters\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 220,
        "wires": [
            [
                "bfb34dab741eacc4"
            ]
        ]
    },
    {
        "id": "2de93d7dd6e2b525",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Note",
        "info": "This section can be replaced by an inject node",
        "x": 350,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c9fb9f9d.f6293",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Graph the data",
        "info": "",
        "x": 120,
        "y": 2360,
        "wires": []
    },
    {
        "id": "e6a69d48.4e148",
        "type": "ui_button",
        "z": "9d61395e.8839f8",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Graph",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "show_chart",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 2820,
        "wires": [
            [
                "4dcb1ec9.a4d18"
            ]
        ]
    },
    {
        "id": "4dcb1ec9.a4d18",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2820,
        "wires": [
            [
                "1ce8e5c3.42bbca"
            ]
        ]
    },
    {
        "id": "1ce8e5c3.42bbca",
        "type": "file in",
        "z": "9d61395e.8839f8",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 2820,
        "wires": [
            [
                "9cc9edec.d2445"
            ]
        ]
    },
    {
        "id": "9cc9edec.d2445",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 610,
        "y": 2820,
        "wires": [
            [
                "45c68326.06f80c",
                "fe46f10.47ec81"
            ]
        ]
    },
    {
        "id": "45c68326.06f80c",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2780,
        "wires": []
    },
    {
        "id": "fe46f10.47ec81",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Format data for chart",
        "func": "var chart = [{\n    \"series\":[\"Pressure\",\"OUT2\"],\n    \"data\":[],\n    \"labels\":[\"\"]\n}];\n\nvar Player1 = [];\nvar Player2 = [];\n\nfor (var i=0; i<msg.payload.length; i++) {\n    Player1.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].Player1});\n    Player2.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].Player2});\n\n}\nchart[0].data.push(Player1);\nchart[0].data.push(Player2);\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2820,
        "wires": [
            [
                "137d11d9.8c82ee"
            ]
        ]
    },
    {
        "id": "137d11d9.8c82ee",
        "type": "ui_chart",
        "z": "9d61395e.8839f8",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 7,
        "width": 18,
        "height": 6,
        "label": "File data",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "3fe0d9de.7fb936",
        "type": "fs-file-lister",
        "z": "9d61395e.8839f8",
        "name": "",
        "start": "C:/Users/User/Documents/Coding/Node Red/Writing CSV",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 360,
        "y": 2520,
        "wires": [
            [
                "825ffe1a.f1739",
                "91bf4e94.f05c3",
                "4f5f4787.98e048"
            ]
        ]
    },
    {
        "id": "92083f68.2f248",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2480,
        "wires": [
            [
                "3fe0d9de.7fb936"
            ]
        ]
    },
    {
        "id": "825ffe1a.f1739",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 590,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b8a3e609.2381e8",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "SD Card File Browser",
        "info": "",
        "x": 140,
        "y": 2420,
        "wires": []
    },
    {
        "id": "77b4dbad.a0ac64",
        "type": "ui_button",
        "z": "9d61395e.8839f8",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 2520,
        "wires": [
            [
                "3fe0d9de.7fb936"
            ]
        ]
    },
    {
        "id": "9e9977df.ef4538",
        "type": "ui_dropdown",
        "z": "9d61395e.8839f8",
        "name": "File Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a file",
        "group": "a649fab2.daf3d8",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 770,
        "y": 2520,
        "wires": [
            [
                "a3485835.954858"
            ]
        ]
    },
    {
        "id": "91bf4e94.f05c3",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Format data",
        "func": "msg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    let obj = {};\n    obj [msg.payload[i].name]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2520,
        "wires": [
            [
                "9e9977df.ef4538",
                "c79c1f2d3eaf4559"
            ]
        ]
    },
    {
        "id": "e7d0b640.ebec18",
        "type": "ui_template",
        "z": "9d61395e.8839f8",
        "group": "a649fab2.daf3d8",
        "name": "",
        "order": 6,
        "width": 18,
        "height": 6,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "f9f28b19.9789e8",
        "type": "template",
        "z": "9d61395e.8839f8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>File Name</th><th>Size</th><th>Created</th><th>Changed</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/red/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 800,
        "y": 2580,
        "wires": [
            [
                "e7d0b640.ebec18"
            ]
        ]
    },
    {
        "id": "4f5f4787.98e048",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Convert timestamps",
        "func": "\nfor (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2580,
        "wires": [
            [
                "f9f28b19.9789e8"
            ]
        ]
    },
    {
        "id": "a3485835.954858",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Save selection",
        "func": "// Save the file name selected from the dropdown in the flow context\nflow.set(\"fileselected\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "6eeb0585.2b544c",
        "type": "ui_button",
        "z": "9d61395e.8839f8",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 130,
        "y": 2680,
        "wires": [
            [
                "339b1c3f.786254"
            ]
        ]
    },
    {
        "id": "339b1c3f.786254",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\n// and delete the context/selection as we are deleting the file as well\nflow.set(\"fileselected\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2680,
        "wires": [
            [
                "7f565fc5.63fbb"
            ]
        ]
    },
    {
        "id": "7f565fc5.63fbb",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Delete file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 480,
        "y": 2680,
        "wires": [
            [
                "3fe0d9de.7fb936"
            ]
        ]
    },
    {
        "id": "c79c1f2d3eaf4559",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "formating",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2440,
        "wires": []
    },
    {
        "id": "2bece55a0ada1e4e",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Flow Parameters",
        "info": "",
        "x": 1000,
        "y": 2480,
        "wires": []
    },
    {
        "id": "c8840c8634c89e05",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Generate CSV data & file",
        "info": "",
        "x": 130,
        "y": 320,
        "wires": []
    },
    {
        "id": "74df90b228436ea6",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "Check Variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "ae91ba94bcf225cc"
            ]
        ]
    },
    {
        "id": "ae91ba94bcf225cc",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "check global",
        "func": "msg.payload = {\n    \"Full Name\" : flow.get(\"fullFileName\"),\n    \"Path\" : flow.get(\"path\"),\n    \"File Name\" : flow.get(\"fileName\"),\n    \"headers\" : flow.get(\"Headers\")\n};\nmsg.tags = flow.get(\"Parameters\").tagNames;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "f461ad0063ea5c3c"
            ]
        ]
    },
    {
        "id": "f461ad0063ea5c3c",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "globals",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "9e42fc879ddd971a",
        "type": "file",
        "z": "9d61395e.8839f8",
        "name": "Test2",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1950,
        "y": 1080,
        "wires": [
            [
                "12cb5038c90f74a8"
            ]
        ]
    },
    {
        "id": "d4fdb764e35146bc",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp, Player1, Player2, Player3",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1610,
        "y": 1060,
        "wires": [
            [
                "9d6c93586cba78c9"
            ]
        ]
    },
    {
        "id": "bc880691444c13f7",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B CSV data (NE)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b419b0a34c428750",
        "type": "switch",
        "z": "9d61395e.8839f8",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 1080,
        "wires": [
            [
                "2b68b006ef816ef6"
            ],
            [
                "99f6945ebe04c443"
            ]
        ]
    },
    {
        "id": "a08d5412b75048a2",
        "type": "csv",
        "z": "9d61395e.8839f8",
        "name": "csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp, Player1, Player2, Player3",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1610,
        "y": 1100,
        "wires": [
            [
                "9d6c93586cba78c9"
            ]
        ]
    },
    {
        "id": "26611ac9db4f60d3",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B CSV data (E)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2b68b006ef816ef6",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "file =! exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1060,
        "wires": [
            [
                "d4fdb764e35146bc",
                "bc880691444c13f7"
            ]
        ]
    },
    {
        "id": "99f6945ebe04c443",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "file == exist",
        "func": "msg.payload = msg.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1100,
        "wires": [
            [
                "a08d5412b75048a2",
                "26611ac9db4f60d3"
            ]
        ]
    },
    {
        "id": "0bba2c74fd304a31",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "B File lister",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1160,
        "wires": []
    },
    {
        "id": "20a37dd7cb985d7b",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Config",
        "func": "msg.filename = flow.get(\"fullFileName\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1080,
        "wires": [
            [
                "9e42fc879ddd971a",
                "1f190d6b9271b359"
            ]
        ]
    },
    {
        "id": "1f190d6b9271b359",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "File write data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1972,
        "y": 1002,
        "wires": []
    },
    {
        "id": "3625e4397968ea0d",
        "type": "fs-file-lister",
        "z": "9d61395e.8839f8",
        "name": "",
        "start": "*",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": false,
        "showWarnings": false,
        "x": 1120,
        "y": 1080,
        "wires": [
            [
                "b419b0a34c428750",
                "0bba2c74fd304a31"
            ]
        ]
    },
    {
        "id": "12cb5038c90f74a8",
        "type": "debug",
        "z": "9d61395e.8839f8",
        "name": "debug 35",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1080,
        "wires": []
    },
    {
        "id": "69f0720488d69b9a",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Pump1",
        "func": "msg.topic = \"Pump1\";\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 600,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "54822742bd854559",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Pressure1",
        "func": "msg.topic = \"Pressure1\";\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 660,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "f209aef61e9e8d7a",
        "type": "function",
        "z": "9d61395e.8839f8",
        "name": "Fan1",
        "func": "msg.topic = \"Fan1\";\nmsg.data = Math.floor(Math.random() * 101);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 720,
        "wires": [
            [
                "dde9d9bfd0ec2a3e"
            ]
        ]
    },
    {
        "id": "e3a2a3cde0471f1a",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "85a031f44be5b297"
            ]
        ]
    },
    {
        "id": "f2ce3cc8eebc4ba7",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 480,
        "wires": [
            [
                "9cb14593de365b4f"
            ]
        ]
    },
    {
        "id": "b0149a5f8e0ed871",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 540,
        "wires": [
            [
                "034e8820a3a1fc6b"
            ]
        ]
    },
    {
        "id": "5308face01c6f710",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 600,
        "wires": [
            [
                "69f0720488d69b9a"
            ]
        ]
    },
    {
        "id": "cb2f0d98797012b1",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 660,
        "wires": [
            [
                "54822742bd854559"
            ]
        ]
    },
    {
        "id": "e9878eeaa57e6927",
        "type": "delay",
        "z": "9d61395e.8839f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "0",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 720,
        "wires": [
            [
                "f209aef61e9e8d7a"
            ]
        ]
    },
    {
        "id": "ab58ed9e33324a86",
        "type": "inject",
        "z": "9d61395e.8839f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "e3a2a3cde0471f1a",
                "f2ce3cc8eebc4ba7",
                "b0149a5f8e0ed871",
                "5308face01c6f710",
                "cb2f0d98797012b1",
                "e9878eeaa57e6927"
            ]
        ]
    },
    {
        "id": "559927ec63843cd6",
        "type": "comment",
        "z": "9d61395e.8839f8",
        "name": "Note for tags",
        "info": "• tags have to have their topic be the \n    same as the database headings\n• timestamp is saved as \"LongTime\" for\n    keyword reasons",
        "x": 480,
        "y": 380,
        "wires": []
    },
    {
        "id": "cf2145fe.77fbf",
        "type": "inject",
        "z": "731de46a.7645fc",
        "name": "Read 16bit Integer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "6c77da4a.e908b4",
                "97cea9e.2f7c2d8"
            ]
        ]
    },
    {
        "id": "97cea9e.2f7c2d8",
        "type": "function",
        "z": "731de46a.7645fc",
        "name": "",
        "func": "var fc=3;\nvar sa=0;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "409e22ed.adb1d4"
            ]
        ]
    },
    {
        "id": "409e22ed.adb1d4",
        "type": "modbus-flex-getter",
        "z": "731de46a.7645fc",
        "name": "local getter Flex",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 140,
        "wires": [
            [],
            [
                "a067fb1d.a06cd8",
                "3ffc5f1d.0128c"
            ]
        ]
    },
    {
        "id": "6c77da4a.e908b4",
        "type": "modbus-getter",
        "z": "731de46a.7645fc",
        "name": "Holding register",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "1",
        "quantity": "1",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 360,
        "y": 300,
        "wires": [
            [],
            [
                "520526c9.6cdd3"
            ]
        ]
    },
    {
        "id": "a067fb1d.a06cd8",
        "type": "function",
        "z": "731de46a.7645fc",
        "name": "",
        "func": "const buf= Buffer.from(msg.payload.buffer)\n//const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16BE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "aa2ba76.1d72fd8"
            ]
        ]
    },
    {
        "id": "520526c9.6cdd3",
        "type": "modbus-response",
        "z": "731de46a.7645fc",
        "name": "",
        "registerShowMax": 20,
        "x": 550,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ffc5f1d.0128c",
        "type": "modbus-response",
        "z": "731de46a.7645fc",
        "name": "",
        "registerShowMax": 20,
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "aa2ba76.1d72fd8",
        "type": "debug",
        "z": "731de46a.7645fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 180,
        "wires": []
    },
    {
        "id": "ad528539.ccb86",
        "type": "modbus-getter",
        "z": "731de46a.7645fc",
        "name": "Coils",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "6",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 270,
        "y": 620,
        "wires": [
            [],
            [
                "18af1499.c68603",
                "20f1025a.d9893e"
            ]
        ]
    },
    {
        "id": "18af1499.c68603",
        "type": "modbus-response",
        "z": "731de46a.7645fc",
        "name": "",
        "registerShowMax": 20,
        "x": 570,
        "y": 700,
        "wires": []
    },
    {
        "id": "ef043d4f.7959",
        "type": "inject",
        "z": "731de46a.7645fc",
        "name": "Read coils",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "ad528539.ccb86"
            ]
        ]
    },
    {
        "id": "20f1025a.d9893e",
        "type": "function",
        "z": "731de46a.7645fc",
        "name": "Process data",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "133ebf4f.3e9409",
        "type": "inject",
        "z": "731de46a.7645fc",
        "name": "Read multiple",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "f1e84475.ab3838"
            ]
        ]
    },
    {
        "id": "f1e84475.ab3838",
        "type": "modbus-getter",
        "z": "731de46a.7645fc",
        "name": "Read multiple",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "4",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 350,
        "y": 460,
        "wires": [
            [],
            [
                "f9357b62.4bd2d"
            ]
        ]
    },
    {
        "id": "f9357b62.4bd2d",
        "type": "modbus-response",
        "z": "731de46a.7645fc",
        "name": "",
        "registerShowMax": 20,
        "x": 590,
        "y": 520,
        "wires": []
    },
    {
        "id": "dfed358e.ff2698",
        "type": "modbus-read",
        "z": "731de46a.7645fc",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "2",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 20,
        "wires": [
            [],
            [
                "b7a929bc.2c2298"
            ]
        ]
    },
    {
        "id": "b7a929bc.2c2298",
        "type": "debug",
        "z": "731de46a.7645fc",
        "name": "Modbus Read",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "values",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 20,
        "wires": []
    },
    {
        "id": "d74755b3c6352a6e",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Read 32bit Float",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "0f8e384b518265ac"
            ]
        ]
    },
    {
        "id": "433b516ee310fe52",
        "type": "modbus-flex-getter",
        "z": "dd749ff055035503",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 510,
        "y": 40,
        "wires": [
            [],
            [
                "1510c156fc2062a5"
            ]
        ]
    },
    {
        "id": "125b1e6d18e88436",
        "type": "debug",
        "z": "dd749ff055035503",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "e97d10ae49fd6218",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "16 Bit INT 16001",
        "func": "var fc=3;\nvar sa=3;\nvar addresses=1;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "433b516ee310fe52"
            ]
        ]
    },
    {
        "id": "627e1fcddc022031",
        "type": "modbus-flex-write",
        "z": "dd749ff055035503",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "54dde46e.53267c",
        "x": 590,
        "y": 1240,
        "wires": [
            [],
            [
                "9b86bf09dd824a61"
            ]
        ]
    },
    {
        "id": "cb1af7e3e7c342f6",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "Write-Float -6001.5",
        "func": "var buf;\nvar fc=16;\nvar sa=10;\nvar addresses=2;\nvar value=4.7;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip=\"192.168.1.31\";\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "627e1fcddc022031"
            ]
        ]
    },
    {
        "id": "9b86bf09dd824a61",
        "type": "debug",
        "z": "dd749ff055035503",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a8ade5e22f4319fc",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Read 16bit Integer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 20,
        "wires": [
            [
                "e97d10ae49fd6218"
            ]
        ]
    },
    {
        "id": "1510c156fc2062a5",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16BE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 120,
        "wires": [
            [
                "125b1e6d18e88436"
            ]
        ]
    },
    {
        "id": "7e0fb083f17a7e2b",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Write32Float",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 1220,
        "wires": [
            [
                "cb1af7e3e7c342f6"
            ]
        ]
    },
    {
        "id": "d9514503ae25aa28",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Read 32bit Integer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "4a8494fe9776580a"
            ]
        ]
    },
    {
        "id": "8020fc0e534c3236",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt32BE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 320,
        "wires": [
            [
                "125b1e6d18e88436"
            ]
        ]
    },
    {
        "id": "4690c4370d34864b",
        "type": "modbus-flex-getter",
        "z": "dd749ff055035503",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 450,
        "y": 240,
        "wires": [
            [],
            [
                "8020fc0e534c3236"
            ]
        ]
    },
    {
        "id": "4a8494fe9776580a",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32bit int",
        "func": "var fc=3;\nvar sa=5;\nvar addresses=2;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 200,
        "wires": [
            [
                "4690c4370d34864b"
            ]
        ]
    },
    {
        "id": "0f8e384b518265ac",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32Bit Float ",
        "func": "var fc=3;\nvar sa=10;\nvar addresses=2;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip=\"192.168.1.55\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "c49bc44e45c1bbe4"
            ]
        ]
    },
    {
        "id": "c49bc44e45c1bbe4",
        "type": "modbus-flex-getter",
        "z": "dd749ff055035503",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 490,
        "y": 640,
        "wires": [
            [],
            [
                "296c8fcb7fcd218e"
            ]
        ]
    },
    {
        "id": "296c8fcb7fcd218e",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readFloatBE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 720,
        "wires": [
            [
                "125b1e6d18e88436"
            ]
        ]
    },
    {
        "id": "425faad7b490a19d",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Write32INT",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1120,
        "wires": [
            [
                "502adf8870b9c3dc"
            ]
        ]
    },
    {
        "id": "502adf8870b9c3dc",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "write 100-32 bit",
        "func": "\nvar fc=16;\nvar sa=50;\nvar addresses=2;\nvar buf=Buffer.alloc(4);\nbuf.writeInt32BE(68001);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip=\"192.168.1.76\";\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1140,
        "wires": [
            [
                "03bc2751fba763b5",
                "9b86bf09dd824a61"
            ]
        ]
    },
    {
        "id": "03bc2751fba763b5",
        "type": "modbus-flex-write",
        "z": "dd749ff055035503",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "54dde46e.53267c",
        "x": 590,
        "y": 1180,
        "wires": [
            [],
            [
                "9b86bf09dd824a61"
            ]
        ]
    },
    {
        "id": "f8d52125799ef620",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Write16INT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1020,
        "wires": [
            [
                "e46b8b34155241b0"
            ]
        ]
    },
    {
        "id": "e46b8b34155241b0",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "Write 16001-16bit",
        "func": "\nvar fc=6;\nvar sa=3;\nvar addresses=1;\nvar value=250;\n\n//msg.slave_ip =\"192.168.1.55\";\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "9aa2df57481a179a"
            ]
        ]
    },
    {
        "id": "9aa2df57481a179a",
        "type": "modbus-flex-write",
        "z": "dd749ff055035503",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 610,
        "y": 1060,
        "wires": [
            [],
            [
                "9b86bf09dd824a61"
            ]
        ]
    },
    {
        "id": "076fa91c324a5c11",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Buffer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "81d37413b5c15258"
            ]
        ]
    },
    {
        "id": "81d37413b5c15258",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "16 Bit INT 16001",
        "func": "msg.payload={};\nvar buf=Buffer.alloc(2);\nbuf.writeInt16BE(16001);\nmsg.payload.buffer=buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "1510c156fc2062a5"
            ]
        ]
    },
    {
        "id": "7adf843a9fbc8b42",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32 bit INT 16001",
        "func": "msg.payload={};\nvar buf=Buffer.alloc(4);\nbuf.writeInt32BE(16001);\nmsg.payload.buffer=buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "8020fc0e534c3236"
            ]
        ]
    },
    {
        "id": "6cde19eb8d9acb38",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Buffer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "7adf843a9fbc8b42"
            ]
        ]
    },
    {
        "id": "9688150c5c0c0823",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32Bit Float 16001.5",
        "func": "msg.payload={};\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(16001.5);\nmsg.payload.buffer=buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 720,
        "wires": [
            [
                "296c8fcb7fcd218e"
            ]
        ]
    },
    {
        "id": "ead1596f3831cb72",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Buffer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "9688150c5c0c0823"
            ]
        ]
    },
    {
        "id": "673055bc925c4994",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Read 32bit Integer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "b0e849b1999655ca"
            ]
        ]
    },
    {
        "id": "bad53911f30f3d5a",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Buffer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 540,
        "wires": [
            [
                "d00fc36fcc5bda56"
            ]
        ]
    },
    {
        "id": "d00fc36fcc5bda56",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32 bit INT 68001",
        "func": "msg.payload={};\nvar buf=Buffer.alloc(4);\nbuf.writeInt32BE(68001);\nmsg.payload.buffer=buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "ebbe15c9e799a9f1"
            ]
        ]
    },
    {
        "id": "b0e849b1999655ca",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "32bit int",
        "func": "var fc=3;\nvar sa=7;\nvar addresses=2;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 420,
        "wires": [
            [
                "98811db8b7bd4c3b"
            ]
        ]
    },
    {
        "id": "98811db8b7bd4c3b",
        "type": "modbus-flex-getter",
        "z": "dd749ff055035503",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 510,
        "y": 440,
        "wires": [
            [],
            [
                "ebbe15c9e799a9f1"
            ]
        ]
    },
    {
        "id": "ebbe15c9e799a9f1",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt32BE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "125b1e6d18e88436"
            ]
        ]
    },
    {
        "id": "5f1b100a47dfd51f",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Read 62bit Float",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 840,
        "wires": [
            [
                "e9fb775b633d19bd"
            ]
        ]
    },
    {
        "id": "86e73de28b0c8ba3",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Buffer",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "3dc8b64e9f58f2a4"
            ]
        ]
    },
    {
        "id": "e9fb775b633d19bd",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "64Bit Float ",
        "func": "var fc=3;\nvar sa=20;\nvar addresses=4;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 820,
        "wires": [
            [
                "cfcc58256717e25b"
            ]
        ]
    },
    {
        "id": "3dc8b64e9f58f2a4",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "64Bit Float 16001.5",
        "func": "msg.payload={};\nvar buf=Buffer.alloc(8);\nbuf.writeDoubleBE(16001.5);\nmsg.payload.buffer=buf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 900,
        "wires": [
            [
                "15944790af939c03"
            ]
        ]
    },
    {
        "id": "cfcc58256717e25b",
        "type": "modbus-flex-getter",
        "z": "dd749ff055035503",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 510,
        "y": 820,
        "wires": [
            [],
            [
                "15944790af939c03"
            ]
        ]
    },
    {
        "id": "15944790af939c03",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readDoubleBE();\nmsg.value = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 900,
        "wires": [
            [
                "9b86bf09dd824a61"
            ]
        ]
    },
    {
        "id": "425449a3b7080429",
        "type": "inject",
        "z": "dd749ff055035503",
        "name": "Write64Float",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "cffd9ebf48042f91"
            ]
        ]
    },
    {
        "id": "cffd9ebf48042f91",
        "type": "function",
        "z": "dd749ff055035503",
        "name": "Write-Float -16001.5",
        "func": "\nvar fc=16;\nvar sa=80;\nvar addresses=4;\nvar value=16001.5;\nbuf=Buffer.alloc(8);\nbuf.writeDoubleBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3],(buf[4]*256+buf[5]),(buf[6]*256)+buf[7]];\n\nmsg.slave_ip=\"192.168.1.76\";\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "92f0f7349040870d"
            ]
        ]
    },
    {
        "id": "92f0f7349040870d",
        "type": "modbus-flex-write",
        "z": "dd749ff055035503",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "54dde46e.53267c",
        "x": 570,
        "y": 1340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c9f45b8de2b87d87",
        "type": "mqtt in",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Slider",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ad6dcc65156dd01c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "5fcec87093e44f5e"
            ]
        ]
    },
    {
        "id": "b2d5dfce2a432480",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write Float 2W",
        "func": "var buf;\nvar fc=16;\nvar sa=10;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "54c48fb108cfd7e9"
            ]
        ]
    },
    {
        "id": "54c48fb108cfd7e9",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5fcec87093e44f5e",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write Int 2W",
        "func": "\nvar fc=6;\nvar sa=0;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "2a791891f9a601b6"
            ]
        ]
    },
    {
        "id": "2a791891f9a601b6",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "02d59aadccc9e56d",
        "type": "inject",
        "z": "daaea0a7a0d2dd9e",
        "name": "1 sec inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "7dcbe51d10b8eae3"
            ]
        ]
    },
    {
        "id": "8fa2d634862fc644",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Read Float 2W",
        "func": "var fc=3;\nvar sa=10;\nvar addresses=2;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip= flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "f69650b41f55f3f0"
            ]
        ]
    },
    {
        "id": "f69650b41f55f3f0",
        "type": "modbus-flex-getter",
        "z": "daaea0a7a0d2dd9e",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 530,
        "y": 300,
        "wires": [
            [],
            [
                "77cae1d33e3c75d8"
            ]
        ]
    },
    {
        "id": "77cae1d33e3c75d8",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set Float 2W",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readFloatBE();\nmsg.payload = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "b490e70e1cd702b3"
            ]
        ]
    },
    {
        "id": "cad8bcebdfbd03a6",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set Int 1W",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16BE();\nmsg.payload = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 360,
        "wires": [
            [
                "b490e70e1cd702b3"
            ]
        ]
    },
    {
        "id": "6e6e628c933055fa",
        "type": "ui_slider",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "label": "slider",
        "tooltip": "",
        "group": "3d695ddc4ae8ac52",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": "1",
        "className": "",
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "8a6731fa2e4b3402",
                "7c4143395d5b9021"
            ]
        ]
    },
    {
        "id": "c0458ac1c291952d",
        "type": "ui_gauge",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "group": "8f328fb03c98744c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1130,
        "y": 240,
        "wires": []
    },
    {
        "id": "0d6084f43baf90f6",
        "type": "modbus-flex-getter",
        "z": "daaea0a7a0d2dd9e",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 530,
        "y": 360,
        "wires": [
            [],
            [
                "cad8bcebdfbd03a6"
            ]
        ]
    },
    {
        "id": "35a5b110d4ea6582",
        "type": "mqtt out",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Slider",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "7dcbe51d10b8eae3",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Read Int 1W",
        "func": "var fc=3;\nvar sa=0;\nvar addresses=1;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "0d6084f43baf90f6"
            ]
        ]
    },
    {
        "id": "765d150896145cf9",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "msg.payload = msg.payload.data[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 980,
        "wires": [
            [
                "045478d22e33f457"
            ]
        ]
    },
    {
        "id": "8695fee2865df155",
        "type": "ui_switch",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "label": "Pump1",
        "tooltip": "",
        "group": "3d695ddc4ae8ac52",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "power_settings_new",
        "oncolor": "red",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "power_settings_new",
        "offcolor": "green",
        "animate": false,
        "className": "",
        "x": 980,
        "y": 980,
        "wires": [
            [
                "27235108a793075a",
                "f1443fea8ce51a7e"
            ]
        ]
    },
    {
        "id": "7a16ee103ed86d3c",
        "type": "modbus-flex-getter",
        "z": "daaea0a7a0d2dd9e",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 980,
        "wires": [
            [],
            [
                "765d150896145cf9"
            ]
        ]
    },
    {
        "id": "15c7b6b121e17f3a",
        "type": "mqtt out",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Pumps/1",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1300,
        "y": 920,
        "wires": []
    },
    {
        "id": "e4ecbc3180672601",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Read coil",
        "func": "var fc=1;\nvar sa=101;\nvar addresses=1;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 980,
        "wires": [
            [
                "7a16ee103ed86d3c"
            ]
        ]
    },
    {
        "id": "27235108a793075a",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n\nvar previous = context.get(\"previous\");\nmsg.previous = previous;\nif (msg.receivedFrom == \"InjectedFromPLC\") {\n    if (previous != msg.payload) {\n        context.set(\"previous\", msg.payload);\n        return msg;\n    }\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "15c7b6b121e17f3a"
            ]
        ]
    },
    {
        "id": "b15c0be8f1f1acff",
        "type": "mqtt in",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Pumps/1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ad6dcc65156dd01c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "e31e5155e5c5c7a6"
            ]
        ]
    },
    {
        "id": "08c9afed49e593c6",
        "type": "inject",
        "z": "daaea0a7a0d2dd9e",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "e4ecbc3180672601"
            ]
        ]
    },
    {
        "id": "e44454ee71bb154d",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write coil",
        "func": "\nvar fc=5;\nvar sa=101;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "d04987ec24460960"
            ]
        ]
    },
    {
        "id": "d04987ec24460960",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 650,
        "y": 1040,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "37ef52192c9954d7",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "check",
        "func": "var check = context.get(\"check\");\nif (check == undefined) {\n    context.set(\"check\", false);\n    check = false;\n}\n\nif (msg.payload[\"Pump1Status\"]) {\n    if (msg.payload[\"Slider\"] > 8 && check == false) {\n        context.set(\"check\", true);\n        msg.payload = \"Pump1 is running high\"\n        return msg;\n    } else if (msg.payload[\"Slider\"] < 2 && check == false) {\n        context.set(\"check\", true);\n        msg.payload = \"Pump1 is running low\"\n        return msg;\n    } else if (msg.payload[\"Slider\"] <= 8 && msg.payload[\"Slider\"] >= 2 && check == true) {\n        msg.payload = \"Pumps running normally\"\n        context.set(\"check\", false);\n        return msg;\n    }\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 620,
        "wires": [
            [
                "0d640be9d9ab6a45",
                "2acbe957754a27eb"
            ]
        ]
    },
    {
        "id": "0d640be9d9ab6a45",
        "type": "mqtt out",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Pumps/status",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 990,
        "y": 680,
        "wires": []
    },
    {
        "id": "3217451bc0848353",
        "type": "mqtt in",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Pumps/1/UpperLimit",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ad6dcc65156dd01c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "0b72fd29627746e6"
            ]
        ]
    },
    {
        "id": "05010ad599aa18c6",
        "type": "mqtt in",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Pumps/1/LowerLimit",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ad6dcc65156dd01c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1540,
        "wires": [
            [
                "9cf264f159d72357"
            ]
        ]
    },
    {
        "id": "0b72fd29627746e6",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "flow.set(\"Pump1UpperLimit\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1480,
        "wires": [
            [
                "93b96276ab761d76"
            ]
        ]
    },
    {
        "id": "9cf264f159d72357",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "flow.set(\"Pump1LowerLimit\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "93b96276ab761d76",
        "type": "debug",
        "z": "daaea0a7a0d2dd9e",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2acbe957754a27eb",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "if (msg.payload == \"Pump1 is running high\") {\n    msg.payload = true;\n} else {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 620,
        "wires": [
            [
                "b91b1d2dc804c95b",
                "edc0d68431e1758c"
            ]
        ]
    },
    {
        "id": "b91b1d2dc804c95b",
        "type": "mqtt out",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Fans/1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1170,
        "y": 680,
        "wires": []
    },
    {
        "id": "045478d22e33f457",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set tag",
        "func": "msg.receivedFrom = \"InjectedFromPLC\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 980,
        "wires": [
            [
                "8695fee2865df155"
            ]
        ]
    },
    {
        "id": "e31e5155e5c5c7a6",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "e44454ee71bb154d"
            ]
        ]
    },
    {
        "id": "9b43e8deed662d42",
        "type": "comment",
        "z": "daaea0a7a0d2dd9e",
        "name": "Slider (int or float) ",
        "info": "",
        "x": 120,
        "y": 240,
        "wires": []
    },
    {
        "id": "088fad9a6ecd8bf4",
        "type": "comment",
        "z": "daaea0a7a0d2dd9e",
        "name": "Coil Switch (Pump1)",
        "info": "",
        "x": 110,
        "y": 900,
        "wires": []
    },
    {
        "id": "f0f029342a4b7aec",
        "type": "comment",
        "z": "daaea0a7a0d2dd9e",
        "name": "conditional switching (Working on)",
        "info": "",
        "x": 180,
        "y": 560,
        "wires": []
    },
    {
        "id": "cb817ad128af8309",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set alarm variable",
        "func": "flow.set(\"Slider\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7ee410bcea9c5255",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Call value(s)",
        "func": "msg.payload = flow.get(\"Slider\");\nmsg.topic = \"Slider\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 620,
        "wires": [
            [
                "3ebb7b899fa282c1"
            ]
        ]
    },
    {
        "id": "f1443fea8ce51a7e",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 980,
        "wires": [
            [
                "52119070236c0273"
            ]
        ]
    },
    {
        "id": "52119070236c0273",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write coil",
        "func": "\nvar fc=5;\nvar sa=101;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 980,
        "wires": [
            [
                "65475b006d18ca42"
            ]
        ]
    },
    {
        "id": "65475b006d18ca42",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1470,
        "y": 980,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b490e70e1cd702b3",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set tag",
        "func": "msg.receivedFrom = \"InjectedFromPLC\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 300,
        "wires": [
            [
                "6e6e628c933055fa",
                "c0458ac1c291952d",
                "cb817ad128af8309"
            ]
        ]
    },
    {
        "id": "8a6731fa2e4b3402",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n\nvar previous = context.get(\"previous\");\nmsg.previous = previous;\nif (msg.receivedFrom == \"InjectedFromPLC\") {\n    if (previous != msg.payload) {\n        context.set(\"previous\", msg.payload);\n        return msg;\n    }\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 300,
        "wires": [
            [
                "35a5b110d4ea6582"
            ]
        ]
    },
    {
        "id": "7c4143395d5b9021",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 380,
        "wires": [
            [
                "d6d862314ad5069c"
            ]
        ]
    },
    {
        "id": "24a2a111478a391c",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write Float 2W",
        "func": "var buf;\nvar fc=16;\nvar sa=10;\nvar addresses=2;\nvar value=msg.payload;\nbuf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "1fd2b0ad88895d4c"
            ]
        ]
    },
    {
        "id": "1fd2b0ad88895d4c",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1650,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d6d862314ad5069c",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write Int 1W",
        "func": "\nvar fc=6;\nvar sa=0;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 440,
        "wires": [
            [
                "e81fb2b1a9e0bea8"
            ]
        ]
    },
    {
        "id": "e81fb2b1a9e0bea8",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1650,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9b0dbc663dca079d",
        "type": "inject",
        "z": "daaea0a7a0d2dd9e",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "445dd498cd40a75a"
            ]
        ]
    },
    {
        "id": "445dd498cd40a75a",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Read coil",
        "func": "var fc=1;\nvar sa=100;\nvar addresses=1;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1280,
        "wires": [
            [
                "0fc68aa529b2eb8d"
            ]
        ]
    },
    {
        "id": "0fc68aa529b2eb8d",
        "type": "modbus-flex-getter",
        "z": "daaea0a7a0d2dd9e",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 1280,
        "wires": [
            [],
            [
                "5cdc0a9e314c7f50"
            ]
        ]
    },
    {
        "id": "5cdc0a9e314c7f50",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "msg.payload = msg.payload.data[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1280,
        "wires": [
            [
                "2f7e0b2215c674ee"
            ]
        ]
    },
    {
        "id": "2f7e0b2215c674ee",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set tag",
        "func": "msg.receivedFrom = \"InjectedFromPLC\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1280,
        "wires": [
            [
                "a6eb5d3d1380e352"
            ]
        ]
    },
    {
        "id": "a6eb5d3d1380e352",
        "type": "ui_switch",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "label": "Fan1",
        "tooltip": "",
        "group": "3d695ddc4ae8ac52",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 950,
        "y": 1280,
        "wires": [
            [
                "f54bd45a31209dff",
                "898aee761faa2141"
            ]
        ]
    },
    {
        "id": "f54bd45a31209dff",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n\nvar previous = context.get(\"previous\");\nmsg.previous = previous;\nif (msg.receivedFrom == \"InjectedFromPLC\") {\n    if (previous != msg.payload) {\n        context.set(\"previous\", msg.payload);\n        return msg;\n    }\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "ad243a447ba48228"
            ]
        ]
    },
    {
        "id": "898aee761faa2141",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "if (msg.receivedFrom == undefined) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1280,
        "wires": [
            [
                "9708a2f261349381"
            ]
        ]
    },
    {
        "id": "ad243a447ba48228",
        "type": "mqtt out",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Fans/1",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1270,
        "y": 1220,
        "wires": []
    },
    {
        "id": "9708a2f261349381",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write coil",
        "func": "\nvar fc=5;\nvar sa=100;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1280,
        "wires": [
            [
                "d84f82decb19ca96"
            ]
        ]
    },
    {
        "id": "d84f82decb19ca96",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1450,
        "y": 1280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "73182919f10fef5f",
        "type": "mqtt in",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "topic": "Test/Fans/1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ad6dcc65156dd01c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "e39326f4e1d6a9ed"
            ]
        ]
    },
    {
        "id": "e39326f4e1d6a9ed",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "switch",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1340,
        "wires": [
            [
                "e5ebe049c179cddb"
            ]
        ]
    },
    {
        "id": "e5ebe049c179cddb",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write coil",
        "func": "\nvar fc=5;\nvar sa=100;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1340,
        "wires": [
            [
                "9fbba71bfc5936c2"
            ]
        ]
    },
    {
        "id": "9fbba71bfc5936c2",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 1340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e46353701506f04f",
        "type": "comment",
        "z": "daaea0a7a0d2dd9e",
        "name": "Coil Switch (Fan1)",
        "info": "",
        "x": 110,
        "y": 1200,
        "wires": []
    },
    {
        "id": "edc0d68431e1758c",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Write coil",
        "func": "\nvar fc=5;\nvar sa=100;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 620,
        "wires": [
            [
                "6720475200185d9c"
            ]
        ]
    },
    {
        "id": "6720475200185d9c",
        "type": "modbus-flex-write",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1350,
        "y": 620,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c3762a7345ac1e9e",
        "type": "comment",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set Flow Var",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "39533e0e41110b85",
        "type": "inject",
        "z": "daaea0a7a0d2dd9e",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "f908dde3ab4745bb"
            ]
        ]
    },
    {
        "id": "f908dde3ab4745bb",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Set Flow Par",
        "func": "flow.set(\"slaveIP\", \"192.168.101.253\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e1b4a630ac0978d8",
        "type": "modbus-flex-getter",
        "z": "daaea0a7a0d2dd9e",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "54dde46e.53267c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 290,
        "y": 700,
        "wires": [
            [],
            [
                "5d76a51497929aea"
            ]
        ]
    },
    {
        "id": "3ee14fb2a10e1404",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "Read coil",
        "func": "var fc=1;\nvar sa=101;\nvar addresses=1;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 700,
        "wires": [
            [
                "e1b4a630ac0978d8"
            ]
        ]
    },
    {
        "id": "5d76a51497929aea",
        "type": "function",
        "z": "daaea0a7a0d2dd9e",
        "name": "pay = val",
        "func": "msg.payload = msg.payload.data[0];\nmsg.topic = \"Pump1Status\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 700,
        "wires": [
            [
                "3ebb7b899fa282c1"
            ]
        ]
    },
    {
        "id": "3ebb7b899fa282c1",
        "type": "join",
        "z": "daaea0a7a0d2dd9e",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 620,
        "wires": [
            [
                "37ef52192c9954d7"
            ]
        ]
    },
    {
        "id": "15237651.20281a",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "84df0cd4.58462",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "name": "Select",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "SELECT TOP (1) [Topic]       ,[Payload]   FROM [Dev].[dbo].[MQTTData]",
        "payloadType": "str",
        "x": 91.00000381469727,
        "y": 93.99999809265137,
        "wires": [
            [
                "eac3e9b1.b2f0e8"
            ]
        ]
    },
    {
        "id": "eac3e9b1.b2f0e8",
        "type": "MSSQL",
        "z": "17fd6e0f1c66137c",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "15237651.20281a"
            ]
        ]
    },
    {
        "id": "ca03c5dc.709628",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "name": "Insert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "INSERT INTO [NodeRed].[dbo].[Basic_Test] (Topic, Payload) VALUES ('Cardinal', 'Tom B. Erichsen' )",
        "payloadType": "str",
        "x": 93,
        "y": 145,
        "wires": [
            [
                "eac3e9b1.b2f0e8"
            ]
        ]
    },
    {
        "id": "57a3215a.12b8d",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "name": "Update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 196,
        "wires": [
            [
                "fc1afd38.1ad0f"
            ]
        ]
    },
    {
        "id": "fc1afd38.1ad0f",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "name": "Function",
        "func": "let d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n\nlet dtstmp = new Date().toString();\nlet pld =       \"UPDATE [NodeRed].[dbo].[Basic_Test] \";\npld = pld + \"Set Timestamp = '\" + dformat + \"' \";\npld = pld + \"WHERE id = 1\";\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 196,
        "wires": [
            [
                "eac3e9b1.b2f0e8",
                "86267995b3803c8f"
            ]
        ]
    },
    {
        "id": "35b4a3e.f64c05c",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "name": "Select",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 91,
        "y": 252,
        "wires": [
            [
                "1528d6ba.7db449"
            ]
        ]
    },
    {
        "id": "1528d6ba.7db449",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "name": "Function",
        "func": "let pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [NodeRed].[dbo].[Basic_Test] \"\npld = pld + \"WHERE id = \" + msg.payload\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 231,
        "y": 252,
        "wires": [
            [
                "eac3e9b1.b2f0e8",
                "86267995b3803c8f"
            ]
        ]
    },
    {
        "id": "38bb7577.af1c3a",
        "type": "mqtt in",
        "z": "17fd6e0f1c66137c",
        "name": "",
        "topic": "SQLTest/#",
        "qos": "0",
        "broker": "712b53e5.990dfc",
        "inputs": 0,
        "x": 82,
        "y": 302,
        "wires": [
            [
                "7eafa2f8.041ebc"
            ]
        ]
    },
    {
        "id": "7eafa2f8.041ebc",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "name": "Function",
        "func": "d = new Date(),\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n\npld =       \"INSERT INTO [Dev].[dbo].[MQTTData] \"\npld = pld + \"(Topic, Payload, Timestamp) \"\npld = pld + \"VALUES ('\" + msg.topic + \"', '\" + msg.payload + \"', '\" + dformat + \"')\"\n\nmsg.topic = ''\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 224,
        "y": 302,
        "wires": [
            [
                "eac3e9b1.b2f0e8",
                "15237651.20281a",
                "86267995b3803c8f"
            ]
        ]
    },
    {
        "id": "86267995b3803c8f",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "name": "SQL statements",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 360,
        "wires": []
    },
    {
        "id": "bef8cd8183ccd367",
        "type": "comment",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Read CSV -> Graph (date picker)",
        "info": "",
        "x": 170,
        "y": 620,
        "wires": []
    },
    {
        "id": "1b86a4eacafb44ae",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "c2d2a42515cd83f5"
            ]
        ]
    },
    {
        "id": "c2d2a42515cd83f5",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Read config",
        "func": "msg.filename = flow.get(\"PlayerDataFN\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "a5091a6dbe21da16"
            ]
        ]
    },
    {
        "id": "a5091a6dbe21da16",
        "type": "file in",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Read Sample Data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 680,
        "wires": [
            [
                "c82014019da70fca"
            ]
        ]
    },
    {
        "id": "c82014019da70fca",
        "type": "csv",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 680,
        "wires": [
            [
                "08f3035389cc43c5"
            ]
        ]
    },
    {
        "id": "08f3035389cc43c5",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Format data for chart & set flow",
        "func": "var chart = [{\n    \"series\":[\"YSet1\",\"YSet2\"],\n    \"data\":[],\n    \"labels\":[\"\"]\n}];\n\nvar Y1 = [];\nvar Y2 = [];\n\n//For time conversion\nlet x = \"\";\nlet y1 = \"\";\nlet y2 = \"\";\nfor (var i=0; i<msg.payload.length; i++) {\n    x = new Date(msg.payload[i][\"Time of Observation\"]);\n    //x = (x.getDay() + \" \" + x.getHours() + \":\" + x.getMinutes());\n    y1 = msg.payload[i].Longitude;\n    y2 = msg.payload[i][\"Sea Level Pressure\"];\n\n    if(x == \"\" || y1 == \"\" || y2 == \" \") {\n        continue;\n    }\n    \n    Y1.push({ \"x\": x, \"y\": y1});\n    Y2.push({ \"x\": x, \"y\": y2});\n\n}\n\nflow.set(\"check0\", msg.payload[0][\"Time of Observation\"]);\n//flow.set(\"check1\", new Date(msg.payload[0][\"Time of Observation\"]));\nflow.set(\"check1\", new Date(flow.get(\"check0\")));\nflow.set(\"check2\", new Date(flow.get(\"check1\")).toISOString());\n\n// Set available date-time picker\nflow.set(\"graphAvailableStart\", new Date(msg.payload[0][\"Time of Observation\"]).getTime());\n//flow.set(\"graphAvailableEnd\", msg.payload[msg.payload.length() - 1][\"Time of Observation\"][msg.payload.length()]);\nflow.set(\"graphAvailableEnd\", new Date(msg.payload[msg.payload.length - 1][\"Time of Observation\"]).getTime());\n//chart[0].data.push(Y1);\nchart[0].data.push(Y2);\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 680,
        "wires": [
            [
                "3a520ee0804eb844",
                "895a68a939600cd5"
            ]
        ]
    },
    {
        "id": "3a520ee0804eb844",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Call var",
        "func": "msg = {\n    \"payload\" : {\n        \"Start\": flow.get(\"graphAvailableStart\"),\n        \"End\": flow.get(\"graphAvailableEnd\")\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 680,
        "wires": [
            [
                "58979c15d4747672"
            ]
        ]
    },
    {
        "id": "895a68a939600cd5",
        "type": "ui_chart",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "group": "8bb4869336244573",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1090,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "58979c15d4747672",
        "type": "split",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1280,
        "y": 680,
        "wires": [
            [
                "82d9a6e4b26e5770"
            ]
        ]
    },
    {
        "id": "9a11a81f559f9515",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Format data for chart & set flow",
        "func": "var chart = [{\n    \"series\":[\"YSet1\",\"YSet2\"],\n    \"data\":[],\n    \"labels\":[\"\"]\n}];\n\nvar Y1 = [];\nvar Y2 = [];\n\n//For time conversion\nlet x = \"\";\nlet y1 = \"\";\nlet y2 = \"\";\nfor (var i=0; i<msg.payload.length; i++) {\n    x = new Date(msg.payload[i][\"Time of Observation\"]);\n    //x = (x.getDay() + \" \" + x.getHours() + \":\" + x.getMinutes());\n\n    //Refine: \n    if (x.getTime() < new Date(flow.get(\"graphStart\")).getTime()) {\n        continue;\n    } else if (x.getTime() > new Date(flow.get(\"graphEnd\"))) {\n        break;\n    }\n\n    y1 = msg.payload[i].Longitude;\n    y2 = msg.payload[i][\"Sea Level Pressure\"];\n\n    if(x == \"\" || y1 == \"\" || y2 == \" \") {\n        continue;\n    }\n    \n    Y1.push({ \"x\": x, \"y\": y1});\n    Y2.push({ \"x\": x, \"y\": y2});\n\n}\n/*\n//Testing\nlet start = new Date(flow.get(\"availableGraphStart\"));/*.toLocaleDateString(undefined, {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n});*/\n\n//select graph section test\nmsg.check = (new Date(flow.get(\"graphAvailableStart\")).getTime() < new Date(flow.get(\"graphStart\")).getTime());\nif(new Date(flow.get(\"graphAvailableStart\")).getTime() < new Date(flow.get(\"graphStart\")).getTime()) {\n    //continue;\n}\n\nflow.set(\"check0\", msg.payload[0][\"Time of Observation\"]);\n//flow.set(\"check1\", new Date(msg.payload[0][\"Time of Observation\"]));\nflow.set(\"check1\", new Date(flow.get(\"check0\")));\nflow.set(\"check2\", new Date(flow.get(\"check1\")).toISOString());\n\n// Set available date-time picker\nflow.set(\"graphAvailableStart\", msg.payload[0][\"Time of Observation\"]);\n//flow.set(\"graphAvailableEnd\", msg.payload[msg.payload.length() - 1][\"Time of Observation\"][msg.payload.length()]);\nflow.set(\"graphAvailableEnd\", msg.payload[msg.payload.length - 1][\"Time of Observation\"]);\n//chart[0].data.push(Y1);\nchart[0].data.push(Y2);\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            [
                "895a68a939600cd5"
            ]
        ]
    },
    {
        "id": "82d9a6e4b26e5770",
        "type": "switch",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "End",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 680,
        "wires": [
            [
                "18c978471dd15c23"
            ],
            [
                "792687aae52e49e8"
            ]
        ]
    },
    {
        "id": "266342b044b0d117",
        "type": "csv",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "9a11a81f559f9515"
            ]
        ]
    },
    {
        "id": "18c978471dd15c23",
        "type": "ui_date_picker",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Start",
        "label": "Start",
        "group": "1b8e2c970a49e110",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1590,
        "y": 680,
        "wires": [
            [
                "e05136bb7c2f2859"
            ]
        ]
    },
    {
        "id": "792687aae52e49e8",
        "type": "ui_date_picker",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "End",
        "label": "End",
        "group": "1b8e2c970a49e110",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1590,
        "y": 740,
        "wires": [
            [
                "3deb96c2e41d4b0a"
            ]
        ]
    },
    {
        "id": "856635bb1d42d6e0",
        "type": "file in",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Read Sample Data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 760,
        "wires": [
            [
                "266342b044b0d117"
            ]
        ]
    },
    {
        "id": "e05136bb7c2f2859",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Set Flow Var",
        "func": "flow.set(\"graphStart\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "3deb96c2e41d4b0a",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Set Flow Var",
        "func": "flow.set(\"graphEnd\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "b9fc73066d698417",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "Read config",
        "func": "msg.filename = flow.get(\"PlayerDataFN\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 760,
        "wires": [
            [
                "856635bb1d42d6e0"
            ]
        ]
    },
    {
        "id": "00fe1687539e4acb",
        "type": "ui_button",
        "z": "17fd6e0f1c66137c",
        "g": "c175c2ec63061429",
        "name": "",
        "group": "1b8e2c970a49e110",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Graph",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "b9fc73066d698417"
            ]
        ]
    },
    {
        "id": "3abb3d519f8ecb18",
        "type": "comment",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Generate dice data",
        "info": "Uses for loops to create data\nJoin binds them\ntransposes the data (because it's written lenghtwise)\n",
        "x": 130,
        "y": 860,
        "wires": []
    },
    {
        "id": "780466eb4ff31394",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "048dce9438eace53",
                "e0d38fade5125d03",
                "a0e10bd14e50d18b",
                "14bb9badb25845de"
            ]
        ]
    },
    {
        "id": "048dce9438eace53",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Dice data gen",
        "func": "msg.topic = \"Player1\";\nlet output = [\"Player1\"];\nlet i = 0;\nfor (i = 0; i < 20; i++) {\n    output.push( Math.round(Math.random() * 6 + 1));\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1040,
        "wires": [
            [
                "6c7aab8c807c9d17",
                "ed0293b1f59a8397"
            ]
        ]
    },
    {
        "id": "e0d38fade5125d03",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Dice data gen",
        "func": "msg.topic = \"Player2\";\nlet output = [\"Player2\"];\nlet i = 0;\nfor (i = 0; i < 20; i++) {\n    output.push( Math.round(Math.random() * 6 + 1));\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "6c7aab8c807c9d17",
                "ed0293b1f59a8397"
            ]
        ]
    },
    {
        "id": "a0e10bd14e50d18b",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Dice data gen",
        "func": "msg.topic = \"Player3\";\nlet output = [\"Player3\"];\nlet i = 0;\nfor (i = 0; i < 20; i++) {\n    output.push( Math.round(Math.random() * 6 + 1));\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "6c7aab8c807c9d17",
                "ed0293b1f59a8397"
            ]
        ]
    },
    {
        "id": "14bb9badb25845de",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "x data gen",
        "func": "msg.topic = \"Turn\";\nlet output = [\"Turn\"];\nlet i = 0;\nfor (i = 0; i < 20; i++) {\n    output.push(i+1);\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 980,
        "wires": [
            [
                "6c7aab8c807c9d17"
            ]
        ]
    },
    {
        "id": "6c7aab8c807c9d17",
        "type": "join",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 550,
        "y": 980,
        "wires": [
            [
                "55f606f7c312d466",
                "d44d5cbb68c05a77"
            ]
        ]
    },
    {
        "id": "ed0293b1f59a8397",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Data Gen",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 900,
        "wires": []
    },
    {
        "id": "55f606f7c312d466",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Join",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 920,
        "wires": []
    },
    {
        "id": "d44d5cbb68c05a77",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Invert data",
        "func": "let output = [];\n\nfor (let i = 0; i < msg.payload[0].length; i++) {\n    output.push([]);\n};\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    for (var j = 0; j < msg.payload[0].length; j++) {\n        output[j].push(msg.payload[i][j]);\n    };\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 980,
        "wires": [
            [
                "021e22b49c5da8c9"
            ]
        ]
    },
    {
        "id": "021e22b49c5da8c9",
        "type": "csv",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Turn,Player1, Player2, Player3",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 910,
        "y": 980,
        "wires": [
            [
                "0a3eaaa2cca098b4"
            ]
        ]
    },
    {
        "id": "0a3eaaa2cca098b4",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "GenDiceData FileWrite Config",
        "func": "msg.filename = flow.get(\"PlayerDataFN\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 980,
        "wires": [
            [
                "ddecf906a80322c7",
                "abfba6236acc5841"
            ]
        ]
    },
    {
        "id": "ddecf906a80322c7",
        "type": "file",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Dice Data",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1420,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "abfba6236acc5841",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "663028f8b8ccf169",
        "name": "Invert Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 900,
        "wires": []
    },
    {
        "id": "ae5b6eb3b2a087ca",
        "type": "comment",
        "z": "17fd6e0f1c66137c",
        "g": "0e3e8448ad30ad11",
        "name": "Flow Parameters",
        "info": "Used in:\n• Line Chart\n• Mass Data Gen",
        "x": 120,
        "y": 440,
        "wires": []
    },
    {
        "id": "ff7371fa9417502f",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "g": "0e3e8448ad30ad11",
        "name": "Set Flow Par",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "454265f986e3d018"
            ]
        ]
    },
    {
        "id": "454265f986e3d018",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "0e3e8448ad30ad11",
        "name": "Set Flow Par",
        "func": "flow.set(\"slaveIP\", \"192.168.101.253\");\nflow.set(\"PlayerDataFN\", \"C:/Users/User/Documents/Coding/Node Red/Writing CSV/Sample.csv\");\n\n//Graphing\nflow.set(\"graphStart\", new Date().getTime());\nflow.set(\"graphEnd\", new Date().getTime());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cd9dfcba13049524",
        "type": "ui_form",
        "z": "17fd6e0f1c66137c",
        "d": true,
        "g": "dcaa9a10e243e078",
        "name": "",
        "label": "Basic",
        "group": "218e00eac196634f",
        "order": 9,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Ground Bond High",
                "value": "GB_H",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Ground Bond Low",
                "value": "GB_L",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "ACW High",
                "value": "ACW_H",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "ACW Low",
                "value": "ACW_L",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Insulation Resistance High",
                "value": "IR_H",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Insulation Resistance Low",
                "value": "IR_L",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Earth Leakage Current High",
                "value": "ELC_H",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "GB_H": "",
            "GB_L": "",
            "ACW_H": "",
            "ACW_L": "",
            "IR_H": "",
            "IR_L": "",
            "ELC_H": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "basicForm",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 470,
        "y": 1620,
        "wires": [
            [
                "c519c9bb07743518",
                "dc3acc2a853dcfc1",
                "1cbdd1443dca930a",
                "a021812f258db7c8"
            ]
        ]
    },
    {
        "id": "5ddde787aa186512",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1560,
        "wires": []
    },
    {
        "id": "c519c9bb07743518",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Set JSON",
        "func": "msg.payload.basic = msg.payload;\nmsg.topic = \"basic\";\nif (msg.payload.basic != undefined)\n    delete msg.payload.basic\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1620,
        "wires": [
            [
                "5ddde787aa186512",
                "79a03bb1edba6504"
            ]
        ]
    },
    {
        "id": "baa6c2563f8b404d",
        "type": "link in",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Tests in",
        "links": [
            "5491c556639992d7"
        ],
        "x": 115,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "5dbb16cc67f26efc",
        "type": "change",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.basic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 1620,
        "wires": [
            [
                "cd9dfcba13049524",
                "97d64d656ed62a0b",
                "09a21d2c08dd04bf",
                "61d298b5cfa3e96e"
            ]
        ]
    },
    {
        "id": "79a03bb1edba6504",
        "type": "link out",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Tests out",
        "mode": "link",
        "links": [
            "fea68f0b27b3b0b6"
        ],
        "x": 795,
        "y": 1620,
        "wires": []
    },
    {
        "id": "6380ab3c4bd62f4c",
        "type": "link in",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic clear in",
        "links": [
            "c20be865f12bee03"
        ],
        "x": 115,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "c0036b48afca50e1",
        "type": "change",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"GB_H\":\"\",\"GB_L\":\"\",\"ACW_H\":\"\",\"ACW_L\":\"\",\"IR_H\":\"\",\"IR_L\":\"\",\"ELC_H\":\"\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 1540,
        "wires": [
            [
                "cd9dfcba13049524",
                "09a21d2c08dd04bf",
                "d551cba248b0b7c0"
            ]
        ]
    },
    {
        "id": "dc3acc2a853dcfc1",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Save check Basic",
        "func": "let check = flow.get(\"basicFormCheck\");\nif (check == undefined) {\n    context.set(\"basicFormCheck\", false);\n    check = false;\n}\nif (msg.topic == \"basicForm\" || msg.lineFlag == \"JSONdata\") { // If a message comes from the form, it went to join\n    // Just incase the saved Recipe has no Basic Form data\n    let keys = Object.keys(msg.payload);\n    check = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (msg.payload[keys[i]] == \"\") {\n            check = false;\n            break;\n        }\n    }\n    \n} else if (msg.lineFlag == \"clear\") { // clear means the join node lacks basic form data\n    check = false;\n} else if (msg.lineFlag == \"save\") { // save meanse the join node lacks basic form data\n    check = false;\n}\nflow.set(\"basicFormCheck\", check);\nmsg = {\n    payload : check,\n    topic : \"basicFormCheck\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "71d365f28ff1a7cd"
            ]
        ]
    },
    {
        "id": "71d365f28ff1a7cd",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Save Check Basic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1460,
        "wires": []
    },
    {
        "id": "78b8807e55a0f71b",
        "type": "link in",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Form loop in",
        "links": [
            "1cbdd1443dca930a"
        ],
        "x": 365,
        "y": 1660,
        "wires": [
            [
                "cd9dfcba13049524"
            ]
        ]
    },
    {
        "id": "1cbdd1443dca930a",
        "type": "link out",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Form loop out",
        "mode": "link",
        "links": [
            "78b8807e55a0f71b"
        ],
        "x": 575,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d551cba248b0b7c0",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Clear",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1420,
        "wires": []
    },
    {
        "id": "02ad3b1deba152a0",
        "type": "comment",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Form",
        "info": "",
        "x": 130,
        "y": 1400,
        "wires": []
    },
    {
        "id": "61d298b5cfa3e96e",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Loaded",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a021812f258db7c8",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "dcaa9a10e243e078",
        "name": "Basic Form",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b1e93749b898e1cd",
        "type": "comment",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "PLC Write",
        "info": "Currently disconnected",
        "x": 120,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ea3d50acec45b528",
        "type": "inject",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1920,
        "wires": [
            [
                "96da9698be2926c7"
            ]
        ]
    },
    {
        "id": "96da9698be2926c7",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Testing",
        "func": "msg.payload = flow.get(\"writeData\");\n\nlet data = msg.payload;\n// Basic\n// Set x2\nlet sa = 0, // Set Starting register for PLC writing\n    entryRegisterLength = 2, //Num of registers used per entry (because type is float)\n    values = [],\n    i = 0;\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nmsg.check = {\n    basicKeys: basicKeys,\n    values: values\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1920,
        "wires": [
            [
                "4c381b6d6088854f",
                "e8d8027e0af3652b"
            ]
        ]
    },
    {
        "id": "4c381b6d6088854f",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Testing recipe",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1860,
        "wires": []
    },
    {
        "id": "e8d8027e0af3652b",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Set Data",
        "func": "let data = msg.payload;\nlet sa, // Starting register for PLC writing\n    keys = Object.keys(data.parameterData),\n    i,\n    entryCount = 20, // Total possible entry cound of the extra ParameterData\n    entryRegisterLength,\n    values = [];\n\n\n// Basic\n// Set x2\nsa = 0, // Set Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry (because type is float)\nvalues = [];\nlet basicCount = 10; // Set the count of the basic entries\n\nlet basicKeys = Object.keys(data.basic);\nfor (i = 0; i < basicKeys.length; i++) {\n    values.push(data.basic[basicKeys[i]]);\n}\nlet msgBasic = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: basicCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += basicCount * entryRegisterLength;\n\n// Values\n// Set x2\n//sa = 100, // Starting register for PLC writing\nentryRegisterLength = 2; //Num of registers used per entry\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].value);\n}\nlet msgValues = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// Names\n//sa = 0, // Starting register for PLC writing\nentryRegisterLength = 10;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].name);\n}\nlet msgNames = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\n\nsa += entryCount * entryRegisterLength;\n\n// instructions\n//sa = 120, // Starting register for PLC writing\nentryRegisterLength = 25;\nvalues = [];\n\nfor (i = 0; i < keys.length; i++) {\n    values.push(data.parameterData[keys[i]].instructions);\n}\nlet msgInstructions = {\n    payload: {\n        values: values,\n        sa: sa,\n        entryCount: entryCount,\n        entryRegisterLength: entryRegisterLength\n    }\n}\nreturn [msgBasic, msgValues, msgNames, msgInstructions];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1980,
        "wires": [
            [
                "67b6664c1ee448c3"
            ],
            [
                "a7063568ee0b8aa2"
            ],
            [
                "95d2c53831906210",
                "3c3eb43ff3652887"
            ],
            [
                "ee25133f74c52f83"
            ]
        ]
    },
    {
        "id": "3c3eb43ff3652887",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Load to PLC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1800,
        "wires": []
    },
    {
        "id": "67b6664c1ee448c3",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Write Float 2W",
        "func": "//Par.Basic\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "a7063568ee0b8aa2",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Write Float 2W",
        "func": "//Par.Values\n// Modbus parameters\nvar fc = 16,\n    sa = msg.payload.sa; //Set (this might change)\n\nlet arr = msg.payload.values, // Easier to set this here if the input changes\n    len = arr.length,\n    //Set\n    entryCount = msg.payload.entryCount, // Let's make this the total number of insrances (entries)\n    addresses = entryCount * msg.payload.entryRegisterLength,\n    buf = Buffer.alloc(4),\n    value,\n    values = [];\n\n//incomplete: Check the other ones, need to do error catching for bad coding\nif (len <= entryCount ) { // This should always be the case\n    for (let i = 0; i < len; i++) {\n        value = arr[i];\n        buf.writeFloatBE(value);\n        values.push((buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]);\n    }\n    for (let i = len; i < entryCount; i++) {\n        values.push(0,0);\n    }\n} else if (len == 0 ) {\n    //Error handling\n} else if (len > entryCount) {\n    //Incomplete\n}\n\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1940,
        "wires": [
            [
                "cfe7d6c08b973d74"
            ]
        ]
    },
    {
        "id": "95d2c53831906210",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Write Reg as Char",
        "func": "//Par.Names\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2020,
        "wires": [
            [
                "693856d17e139421"
            ]
        ]
    },
    {
        "id": "ee25133f74c52f83",
        "type": "function",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Write Reg as Char",
        "func": "//Par.instructions\nlet fc = 16,\n    sa = msg.payload.sa,\n    adresses = 0,\n\n    arr = msg.payload.values,\n    entryRegisterLength = msg.payload.entryRegisterLength; //Number of registers allowed per instance\n\n//Del: This needs a proper fix\nlet delArr = []\nfor (let i = 0; i < 100; i++) {\n    delArr.push(0);\n}\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 100, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 200, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 300, 'quantity': 100 };\nnode.send(msg);\nmsg.payload = { \"value\": delArr, 'fc': fc, 'unitid': 1, 'address': sa + 400, 'quantity': 100 };\nnode.send(msg);\n    //del done\n\nfor (let i = 0; i < arr.length; i++) { //Loops through each entry that needs to me recorded\n    let len = arr[i].length,\n        buf = Buffer.from(arr[i]),\n        repeat = Math.floor(len / 2.0),\n        remainder = len % 2,\n        value = [];\n    //Incomplete: This is what you need to copy to the float section\n    for (let i = 0; i < repeat && i < entryRegisterLength; i++) { // Loops through the byte pairs of the modbus registers, ignoring the last pair if its an odd number\n        value.push(buf.subarray(i * 2, i * 2 + 2).readInt16BE())\n    }\n    if (remainder) { // If the last pair is odd, set the second byte to 0\n        value.push(Buffer.from([buf[buf.length - 1], 0]).readInt16BE());\n    }\n    for (let i = repeat + remainder; i < entryRegisterLength; i++) {\n        value.push(0);\n    }\n\n    adresses = entryRegisterLength; //Should always = value.length\n    msg.slave_ip = flow.get(\"slaveIP\");\n    msg.payload = { \"value\": value, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': adresses };\n    sa += entryRegisterLength;\n\n    msg.check = {\n        value: value,\n        valueLength: value.length,//value.length,\n        adresses: adresses\n    };\n    node.send(msg);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2100,
        "wires": [
            [
                "d7cb686e295eb9ce"
            ]
        ]
    },
    {
        "id": "29bf804888c0480a",
        "type": "modbus-flex-write",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 1860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cfe7d6c08b973d74",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Float Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1900,
        "wires": []
    },
    {
        "id": "291078668f656c38",
        "type": "modbus-flex-write",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 1940,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "693856d17e139421",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1980,
        "wires": []
    },
    {
        "id": "6e74e3f6fe50f0f4",
        "type": "modbus-flex-write",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 2020,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d7cb686e295eb9ce",
        "type": "debug",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "Char Write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b851dc944aae0069",
        "type": "modbus-flex-write",
        "z": "17fd6e0f1c66137c",
        "g": "6d9335c36df82f31",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "54dde46e.53267c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 2100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ec7385d7640cf636",
        "type": "inject",
        "z": "9b30030f667a40d7",
        "name": "Temperature",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "50* (1 + 0.4*($random()-0.5))",
        "payloadType": "jsonata",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "97a45e4e164b7a7d"
            ]
        ]
    },
    {
        "id": "97a45e4e164b7a7d",
        "type": "change",
        "z": "9b30030f667a40d7",
        "name": "Format",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "type",
                "pt": "msg",
                "to": "temperature",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "deviceID",
                "pt": "msg",
                "to": "($env(\"deviceID\") = \"\") ? \"Simulated\" : $env(\"deviceID\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "alert",
                "pt": "msg",
                "to": "(payload > 56) ? \"alert\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "f58173db2f7bbf01"
            ]
        ]
    },
    {
        "id": "762ed6d68b4fd934",
        "type": "change",
        "z": "9b30030f667a40d7",
        "name": "Format",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "type",
                "pt": "msg",
                "to": "humidity",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "deviceID",
                "pt": "msg",
                "to": "($env(\"deviceID\") = \"\") ? \"Simulated\" : $env(\"deviceID\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "alert",
                "pt": "msg",
                "to": "(payload > 92) ? \"alert\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 340,
        "wires": [
            [
                "30c5109676240378"
            ]
        ]
    },
    {
        "id": "1cd8206f4e2fac13",
        "type": "inject",
        "z": "9b30030f667a40d7",
        "name": "Humidity",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "80* (1 + 0.4*($random()-0.5))",
        "payloadType": "jsonata",
        "x": 280,
        "y": 340,
        "wires": [
            [
                "762ed6d68b4fd934"
            ]
        ]
    },
    {
        "id": "f58173db2f7bbf01",
        "type": "subflow:2197f9b20e245122",
        "z": "9b30030f667a40d7",
        "name": "TempUI",
        "env": [],
        "x": 880,
        "y": 220,
        "wires": []
    },
    {
        "id": "30c5109676240378",
        "type": "subflow:3bab716a8a493dbf",
        "z": "9b30030f667a40d7",
        "name": "",
        "env": [],
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "7a07aa1aa0f75a15",
        "type": "inject",
        "z": "9b30030f667a40d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Name\":\"Kazuhito Yokoi\",\"Age\":\"35\",\"Favourite Color\":\"red\",\"Date Of Birth\":\"12/09/1983\"},{\"Name\":\"Oli Bob\",\"Age\":\"12\",\"Favourite Color\":\"red\",\"Date Of Birth\":\"12/08/2017\"}]",
        "payloadType": "json",
        "x": 270,
        "y": 460,
        "wires": [
            [
                "ba9c0a4b59a5adb3"
            ]
        ]
    },
    {
        "id": "ba17f9b9f63da1eb",
        "type": "comment",
        "z": "9b30030f667a40d7",
        "name": "Normal table",
        "info": "",
        "x": 270,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ca243ff5e69a98f",
        "type": "ui_template",
        "z": "9b30030f667a40d7",
        "d": true,
        "group": "c1e6de0d4d0c97f8",
        "name": "CSS",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #Dashboard_Temperature{\n    //background-image: url(\"C:\\Users\\User\\Pictures\\Image1.jpg\");\n    //background-color: blue;\n    border-style: none;\n\n    }\n.title{\n    font-size: 1.4em;\n    color: black !important;\n    border-left: 6px solid orange;\n}\n.save button:hover {\n  width: 50%;\n  margin: auto;\n  background-color: #12be25 !important; \n  color: black !important;\n}\n.save button  {\n  border: none;\n  border-radius: 8px;\n  text-align: center;\n  width: 50% ;\n  transition-duration: 0.4s;\n  background-color: #ddffdd;\n  color: white;         \n}\n.chart {\n  //background-color: green;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "eed589110fc1ad1f",
        "type": "ui_text",
        "z": "9b30030f667a40d7",
        "group": "c1e6de0d4d0c97f8",
        "order": 1,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "This is a Title",
        "format": "",
        "layout": "row-spread",
        "className": "title",
        "x": 270,
        "y": 160,
        "wires": []
    },
    {
        "id": "948c301489226e89",
        "type": "ui_button",
        "z": "9b30030f667a40d7",
        "name": "",
        "group": "c1e6de0d4d0c97f8",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "save",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ba9c0a4b59a5adb3",
        "type": "ui_table",
        "z": "9b30030f667a40d7",
        "group": "210b3638edc51bb5",
        "name": "",
        "order": 1,
        "width": 19,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "2cc22929a47b82b3",
        "type": "ui_template",
        "z": "9b30030f667a40d7",
        "d": true,
        "group": "",
        "name": "Node-Red Dashboard Custom CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n    /*Main background*/\n    \n    body {\n    \n        background: -webkit-linear-gradient(\n            55deg,\n            #009785 0%,\n            #245aa5 50%,\n            #b800e9 100%\n            );\n            \n            //background-image: url(\"C:\\Users\\User\\Pictures\\Image1.jpg\") !important;\n            /*\n            background-image: url(\"images\\Image1.jpg\") !important; // file path\n            background-repeat: no-repeat !important;\n            background-size: auto !important;\n            background-position: bottom left !important;\n            */\n    }\n\n    /*Top bar*/\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n        background-color: transparent !important;\n        color: #FFFFFF;// !important;\n    }\n\n    //testing\n    .nr-dashboard-chart-title {\n        color: 5566FF !important;\n    }\n\n\n    /*Left menu*/\n    /*Sidebar*/\n    body.nr-dashboard-theme md-sidenav {\n        color: white !important;\n        background-color: rgba(0,0,0,0) !important;\n    }\n    /*Hover selection*/\n    a.md-no-style, button.md-no-style {\n        border-radius: 10px !important;\n    }\n    /*Selected*/\n    .nr-menu-item-active div button {\n        border-right: 4px solid rgb(41 98 255) !important;\n    }\n    /*List*/\n    body.nr-dashboard-theme md-sidenav div.md-list-item-inner {\n        color: white !important;\n        background-color: rgba(40,85,165,1) !important;\n        border-radius: 10px !important;\n    }\n\n\n    /*Groups*/\n    ui-card-panel {\n        background-color: rgba(255,255,255,0.1) !important;\n        border-radius: 10px !important;\n        box-shadow: rgba(25,90,85,0.35) 0px 5px 15px !important;}\n    .nr-dashboard-theme ui-card-panel {\n        border: none !important;\n    }\n    /*Name groups*/\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: rgba(255, 255, 255, 0.5) !important;\n    }\n\n\n    /*Bouttons*/\n    .nr-dashboard-theme .nr-dashboard-button .md-button {\n        background-color: rgba(255,255,255,.1);// !important;\n    }\n    .md-button {\n        border-radius: 10px !important;\n    }\n\n\n    /*Dropdown menu*/\n    .nr-dashboard-theme md-select-menu{\n        background-color: rgba(40,85,165,1) !important;\n    }\n    .nr-dashboard-theme md-select-menu, .nr-dashboard-theme md-select-menu md-option {\n        background-color: transparent !important;\n    }\n    .nr-dashboard-theme .md-select-menu-container {\n        border-radius: 10px !important;\n        border: none !important;\n    }\n    .nr-dashboard-theme md-select-menu md-option[selected] {\n        color: white !important;\n        background-color: #1a3566 !important;\n    }\n\n    /*Template*/\n    md-card>img, md-card>md-card-header img, md-card md-card-title-media img {\n        border-radius: 10px !important;\n    }\n\n    /* Color picker text BG */\n    .nr-dashboard-theme .color-picker-input-wrapper > input {\n        color: white !important;\n        background-color: transparent !important;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 340,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f2218075351147e7",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Clear",
        "func": "msg.data = { \n    \"name\": \"\", \n    \"value\": \"\", \n    \"description\": \"\" \n    };\nmsg.complete = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 50,
        "y": 80,
        "wires": [
            [
                "9ab357f2bd646ca3",
                "d7e74ae60251d6e7",
                "fa9acf69143d67e9",
                "ff7f4dd399909398",
                "b24be18dee394e09",
                "c5992b036b3b8c4f",
                "94ae053219bfd97d"
            ]
        ]
    },
    {
        "id": "9ab357f2bd646ca3",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "afc186503a0f66ca"
            ]
        ]
    },
    {
        "id": "d7e74ae60251d6e7",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "ab2ece5e15b8f81a"
            ]
        ]
    },
    {
        "id": "fa9acf69143d67e9",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "0c6c214d53719567"
            ]
        ]
    },
    {
        "id": "ff7f4dd399909398",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "7656794804157f21"
            ]
        ]
    },
    {
        "id": "b24be18dee394e09",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "a05a9f92e0cfc902"
            ]
        ]
    },
    {
        "id": "c5992b036b3b8c4f",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "2fb3f4f5a93be501"
            ]
        ]
    },
    {
        "id": "94ae053219bfd97d",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Name",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.name;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "7d8c6c3eed93e5e6"
            ]
        ]
    },
    {
        "id": "afc186503a0f66ca",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Ground Bond High",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "GB_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 470,
        "y": 80,
        "wires": [
            [
                "703332854a757855"
            ]
        ]
    },
    {
        "id": "ab2ece5e15b8f81a",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Ground Bound Low",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "GB_L",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "fd8b1463839fc941"
            ]
        ]
    },
    {
        "id": "0c6c214d53719567",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "ACW High",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "ACW_H",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 450,
        "y": 200,
        "wires": [
            [
                "12e1e57d557347ff"
            ]
        ]
    },
    {
        "id": "7656794804157f21",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "ACW Low",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "ACW_L",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 440,
        "y": 260,
        "wires": [
            [
                "3c82f4aa69a9d39b"
            ]
        ]
    },
    {
        "id": "a05a9f92e0cfc902",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 5: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "f9ae7d94e0610869"
            ]
        ]
    },
    {
        "id": "2fb3f4f5a93be501",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 6: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "292dccfb8724bd06"
            ]
        ]
    },
    {
        "id": "7d8c6c3eed93e5e6",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 7: Name",
        "tooltip": "",
        "group": "53037fcbd25f4f9d",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 470,
        "y": 440,
        "wires": [
            [
                "e83867c24f97e3f9"
            ]
        ]
    },
    {
        "id": "703332854a757855",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "42d468194793b0bf"
            ]
        ]
    },
    {
        "id": "fd8b1463839fc941",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "ea2042e53d08dc6f"
            ]
        ]
    },
    {
        "id": "12e1e57d557347ff",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "4793cdb200390922"
            ]
        ]
    },
    {
        "id": "3c82f4aa69a9d39b",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "0bb4c91301d3eae0"
            ]
        ]
    },
    {
        "id": "f9ae7d94e0610869",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "b78d1c7c27ac92eb"
            ]
        ]
    },
    {
        "id": "292dccfb8724bd06",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "1550f6258b6f1bc8"
            ]
        ]
    },
    {
        "id": "e83867c24f97e3f9",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Values",
        "func": "if (msg.data != undefined) {\n    msg.payload = msg.data.value;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.name = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "308fca80f7a763fc"
            ]
        ]
    },
    {
        "id": "42d468194793b0bf",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 1: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "548573d4e9406bd0"
            ]
        ]
    },
    {
        "id": "ea2042e53d08dc6f",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 2: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 140,
        "wires": [
            [
                "88a13a91462eac02"
            ]
        ]
    },
    {
        "id": "4793cdb200390922",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 3: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "57bf6031606efca9"
            ]
        ]
    },
    {
        "id": "0bb4c91301d3eae0",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 4: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 24,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 260,
        "wires": [
            [
                "16379cd5c0b0ff2f"
            ]
        ]
    },
    {
        "id": "b78d1c7c27ac92eb",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 5: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 25,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 320,
        "wires": [
            [
                "470b8e2ca1f9cc40"
            ]
        ]
    },
    {
        "id": "1550f6258b6f1bc8",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 6: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 26,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 380,
        "wires": [
            [
                "2b826c8de29bce6f"
            ]
        ]
    },
    {
        "id": "308fca80f7a763fc",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 7: Value",
        "tooltip": "",
        "group": "f24d9462b2c2f4ce",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 830,
        "y": 440,
        "wires": [
            [
                "65eac43d12d4d7b3"
            ]
        ]
    },
    {
        "id": "548573d4e9406bd0",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "36502b890b8d5a21"
            ]
        ]
    },
    {
        "id": "88a13a91462eac02",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "75a4958b066ff934"
            ]
        ]
    },
    {
        "id": "57bf6031606efca9",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "f23209d74766606d"
            ]
        ]
    },
    {
        "id": "16379cd5c0b0ff2f",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "b449a683e8e04560"
            ]
        ]
    },
    {
        "id": "470b8e2ca1f9cc40",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "56aa132a1890a010"
            ]
        ]
    },
    {
        "id": "2b826c8de29bce6f",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "548131a7fd39f7c4"
            ]
        ]
    },
    {
        "id": "65eac43d12d4d7b3",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Description",
        "func": ";if (msg.data != undefined) {\n    msg.payload = msg.data.description;\n} else {\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.value = msg.payload;\n    delete msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "6bfaf439723cbcfa"
            ]
        ]
    },
    {
        "id": "36502b890b8d5a21",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 1: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par01",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 80,
        "wires": [
            [
                "314dd1f84db4c9e7"
            ]
        ]
    },
    {
        "id": "75a4958b066ff934",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 2: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par02",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "5f56f32028adfc11"
            ]
        ]
    },
    {
        "id": "f23209d74766606d",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 3: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par03",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "ad9a0b69bce7ce07"
            ]
        ]
    },
    {
        "id": "b449a683e8e04560",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 4: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par04",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "b2ae2df84570174f"
            ]
        ]
    },
    {
        "id": "56aa132a1890a010",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 5: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par05",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "47b58c8dffa90fde"
            ]
        ]
    },
    {
        "id": "548131a7fd39f7c4",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 6: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par06",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 380,
        "wires": [
            [
                "56ced1adbe29dcfb"
            ]
        ]
    },
    {
        "id": "6bfaf439723cbcfa",
        "type": "ui_text_input",
        "z": "e28943498755ce53",
        "name": "",
        "label": "Parameter 7: Instructions",
        "tooltip": "",
        "group": "ad3c4128defb0956",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "Par07",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "8b0a371d31386d71"
            ]
        ]
    },
    {
        "id": "314dd1f84db4c9e7",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\" :        \"\",\n        \"value\":        \"\",\n        \"description\":  \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for(let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 80,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "5f56f32028adfc11",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 140,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "ad9a0b69bce7ce07",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 200,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "b2ae2df84570174f",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 260,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "47b58c8dffa90fde",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 320,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "56ced1adbe29dcfb",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "8b0a371d31386d71",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Final",
        "func": "delete msg.parts;\nif (msg.data == undefined) {\n    let output = context.get(\"Stored\") || {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"description\": \"\"\n    }\n\n    if (msg.store == undefined) {\n        msg.store = {};\n    }\n    msg.store.description = msg.payload;\n\n    let keys = Object.keys(msg.store);\n    let len = keys.length;\n    for (let i = 0; i < len; i++) {\n        output[keys[i]] = msg.store[keys[i]];\n    }\n    context.set(\"Stored\", output);\n    msg.payload = output;\n\n\n    return msg;\n\n} else if (msg.data.name != \"\") {\n    msg.payload = msg.data;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 440,
        "wires": [
            [
                "592dc8bd60e904b2"
            ]
        ]
    },
    {
        "id": "592dc8bd60e904b2",
        "type": "join",
        "z": "e28943498755ce53",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1910,
        "y": 80,
        "wires": [
            [
                "e57afd52ace7da30"
            ]
        ],
        "info": "The data dump here is done by sending\r\nempty data and then clearing empty data\r\nafter the join node."
    },
    {
        "id": "e57afd52ace7da30",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Set trigger / dump",
        "func": "msg.complete = \"\";\nif (msg.lineflag == \"clear\") {\n    return { \n        msg: {\n            topic:      \"clear\",\n            payload:    \"\",\n            lineFlag:   \"clear\"\n\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 80,
        "wires": [
            [
                "93a1a11bf8b6f3e1"
            ]
        ]
    },
    {
        "id": "93a1a11bf8b6f3e1",
        "type": "function",
        "z": "e28943498755ce53",
        "name": "Del empties",
        "func": "msg.topic = \"parameterData\"; //Set topic\ndelete msg.data; // Just no need for this\ndelete msg.payload.save; //Needed this to put lineflag in as member\n\nlet output = {},\n    len = Object.keys(msg.payload).length,\n    keys = Object.keys(msg.payload);\nfor (let i = 0; i < len; i++) {\n    if((msg.payload[keys[i]] != null) && (msg.payload[keys[i]] != \"\")) {\n        output[keys[i]] = msg.payload[keys[i]];\n    }\n}\nmsg.payload = output;\n/*\nmsg.test = {\n    \"length\": len,\n    \"msg.payload\": msg.payload,\n    \"Payload[0]\": msg.payload[keys[0]],\n    \"count\": count,\n    \"output\": output\n}\n*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d9ed99f65a21484b",
        "type": "comment",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Inject directly",
        "info": "Working on storing data and then calling it up yo",
        "x": 190,
        "y": 580,
        "wires": []
    },
    {
        "id": "d0b113538530fc21",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "2fee471ee603747b",
                "cd57cc93f40b33bf"
            ]
        ]
    },
    {
        "id": "2fee471ee603747b",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Player1",
        "func": "msg.timestamp = msg.payload;\nmsg.payload = Math.round(Math.random() * 6 + 1);\nmsg.topic = \"Player1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "77d280335ca415c3",
                "8e31874de854de58",
                "72791997b670114d"
            ]
        ]
    },
    {
        "id": "cd57cc93f40b33bf",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Player2",
        "func": "msg.timestamp = msg.payload;\nmsg.payload = Math.round(Math.random() * 6 + 1);\nmsg.topic = \"Player2\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 760,
        "wires": [
            [
                "77d280335ca415c3",
                "29b0db1a3a02d679",
                "72791997b670114d"
            ]
        ]
    },
    {
        "id": "77d280335ca415c3",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Player Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 560,
        "wires": []
    },
    {
        "id": "8e31874de854de58",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Write D02 1W",
        "func": "\nvar fc=6;\nvar sa=2;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 640,
        "wires": [
            [
                "1b7ec13bb2727fe8"
            ]
        ]
    },
    {
        "id": "72791997b670114d",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Buffer",
        "func": "//msg.payload = {};\ncontext.set(msg.topic, msg.payload);\nif (msg.topic == \"bufferTrigger\") {\n\n    let output = {};\n    msg.payload = {};\n\n    /*\n    //Writing the config for file listener\n    /*The file listener node is used when the buffer is\n    writing to a file\n    msg.payload[\"start\"] = flow.get(\"path\");\n    msg.payload[\"pattern\"] = flow.get(\"fileName\");\n    */\n\n    output.timestamp = new Date().getTime();\n    //Incomplete\n    /* The idea here is to be able to load parameters into \n    an external file and then update that file and not need \n    to this node*/\n    //let tags = flow.get(\"Parameters\").tagNames;\n\n    let tags = [\"Player1\", \"Player2\"]; // The same as the topics of inputs\n\n    for(let i = 0; i < tags.length; i++) {\n        output[tags[i]] = context.get(tags[i]);\n    }\n    msg.data = output;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "403b2c84a44e5503"
            ]
        ],
        "info": "Message topic = heading in database"
    },
    {
        "id": "29b0db1a3a02d679",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Write D03 1W",
        "func": "\nvar fc=6;\nvar sa=3;\nvar addresses=1;\nvar value=msg.payload;\n\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 760,
        "wires": [
            [
                "5163250ad99982c8"
            ]
        ]
    },
    {
        "id": "1b7ec13bb2727fe8",
        "type": "modbus-flex-write",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "aca8e25181d21be7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 830,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "99b26f3bee3c8bd5",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Buffer Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1.5",
        "topic": "bufferTrigger",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 700,
        "wires": [
            [
                "72791997b670114d"
            ]
        ]
    },
    {
        "id": "403b2c84a44e5503",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "function 9",
        "func": "\n\n//Incomplete \n/* Just another set of things that can be imported*/\nlet tableName = \"\";\nlet headings = \"\";\nlet values = \"\";\nlet sqlCommand = \"\";\n\n//Working on the headings\nheadings = ' (' + Object.keys(msg.data).toString() + ') ';\n\n//Inputing the values from msg.data\nvalues = 'VALUES (' + Object.values(msg.data).toString() + ');';\n\n//Table name\ntableName = \"NodeRed.dbo.TwoPlayerDice \"; // space is there for sqlCommand text\n\n//Create SQL command\nsqlCommand = 'INSERT INTO ' + tableName + headings + values;\n\nmsg.payload = sqlCommand;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 700,
        "wires": [
            [
                "bfc72059ee745baa"
            ]
        ]
    },
    {
        "id": "5163250ad99982c8",
        "type": "modbus-flex-write",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "aca8e25181d21be7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 830,
        "y": 760,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bfc72059ee745baa",
        "type": "MSSQL",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 980,
        "y": 700,
        "wires": [
            [
                "2f44c5c9d96f49e7"
            ]
        ]
    },
    {
        "id": "2f44c5c9d96f49e7",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 700,
        "wires": []
    },
    {
        "id": "e9626d92f1c4231c",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 860,
        "wires": [
            [
                "acbff347f607370d"
            ]
        ]
    },
    {
        "id": "acbff347f607370d",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Read Hold 2 - 3",
        "func": "var fc=3;\nvar sa=2;\nvar addresses=2;\nvar slave_ip=msg.payload.slave_ip;\nmsg.slave_ip = flow.get(\"slaveIP\");\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 860,
        "wires": [
            [
                "62e165e9060a41ac"
            ]
        ]
    },
    {
        "id": "62e165e9060a41ac",
        "type": "modbus-flex-getter",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "local getter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "aca8e25181d21be7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 590,
        "y": 860,
        "wires": [
            [],
            [
                "2975bbf63abefb31"
            ]
        ]
    },
    {
        "id": "2975bbf63abefb31",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Read 16Bit int",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16BE();\nmsg.payload = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 860,
        "wires": [
            [
                "f13ad1d7d973c746"
            ]
        ]
    },
    {
        "id": "f13ad1d7d973c746",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "Separate data",
        "func": "msg.payload = {\n    \"Player1\" : msg.values[0],\n    \"Player2\" : msg.values[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 860,
        "wires": [
            [
                "4b5f00d0a1bfd552"
            ]
        ]
    },
    {
        "id": "4b5f00d0a1bfd552",
        "type": "split",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1150,
        "y": 860,
        "wires": [
            [
                "7c84fe6a6006617d"
            ]
        ]
    },
    {
        "id": "7c84fe6a6006617d",
        "type": "switch",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Player1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Player2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 860,
        "wires": [
            [
                "a034bf3851442046"
            ],
            [
                "add178ce8930c5d9"
            ]
        ]
    },
    {
        "id": "a034bf3851442046",
        "type": "mqtt out",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "topic": "Test/Player1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1450,
        "y": 820,
        "wires": []
    },
    {
        "id": "add178ce8930c5d9",
        "type": "mqtt out",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "topic": "Test/Player2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad6dcc65156dd01c",
        "x": 1450,
        "y": 900,
        "wires": []
    },
    {
        "id": "7d9ab4d0eeef884b",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 960,
        "wires": [
            [
                "6a907c09d1641af6"
            ]
        ]
    },
    {
        "id": "6a907c09d1641af6",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "function 10",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 960,
        "wires": [
            [
                "cd82a8f17ec4b36e"
            ]
        ]
    },
    {
        "id": "cd82a8f17ec4b36e",
        "type": "MSSQL",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "select * from NodeRed.dbo.TwoPlayerDice\n    where LongTime = 1681384117065;",
        "outField": "payload",
        "x": 600,
        "y": 960,
        "wires": [
            [
                "576da4fa9da47ac8"
            ]
        ]
    },
    {
        "id": "576da4fa9da47ac8",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "function 11",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            [
                "a6e30f8019df8026"
            ]
        ]
    },
    {
        "id": "a6e30f8019df8026",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "51589d74d611689a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 960,
        "wires": []
    },
    {
        "id": "1fcb8b4e0bff81c3",
        "type": "ui_button",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Graph",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "show_chart",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 1460,
        "wires": [
            [
                "93aa61cd40a2a05f"
            ]
        ]
    },
    {
        "id": "93aa61cd40a2a05f",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1460,
        "wires": [
            [
                "4d5d223efefabfeb"
            ]
        ]
    },
    {
        "id": "4d5d223efefabfeb",
        "type": "file in",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 1460,
        "wires": [
            [
                "6334e8f34d05c806"
            ]
        ]
    },
    {
        "id": "6334e8f34d05c806",
        "type": "csv",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "fd343ce4ae3d1a43",
                "df0eff99c8cbad90"
            ]
        ]
    },
    {
        "id": "fd343ce4ae3d1a43",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1420,
        "wires": []
    },
    {
        "id": "df0eff99c8cbad90",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Format data for chart",
        "func": "var chart = [{\n    \"series\":[\"Pressure\",\"OUT2\"],\n    \"data\":[],\n    \"labels\":[\"\"]\n}];\n\nvar Player1 = [];\nvar Player2 = [];\n\nfor (var i=0; i<msg.payload.length; i++) {\n    Player1.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].Player1});\n    Player2.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].Player2});\n\n}\nchart[0].data.push(Player1);\nchart[0].data.push(Player2);\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1460,
        "wires": [
            [
                "e7c021dfc1971e2e"
            ]
        ]
    },
    {
        "id": "e7c021dfc1971e2e",
        "type": "ui_chart",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 7,
        "width": 18,
        "height": 6,
        "label": "File data",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1150,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "80a942296819bcdc",
        "type": "fs-file-lister",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "start": "C:\\Users\\User\\Documents\\Coding\\Node Red\\Recipes",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "5da371c76d4aab6e",
                "0cd61d0848ae8bdf",
                "c778681fbb1d003f"
            ]
        ]
    },
    {
        "id": "a654ab45d04ab0b9",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1120,
        "wires": [
            [
                "80a942296819bcdc"
            ]
        ]
    },
    {
        "id": "5da371c76d4aab6e",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 710,
        "y": 1120,
        "wires": []
    },
    {
        "id": "716168c41cf7544f",
        "type": "comment",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "SD Card File Browser",
        "info": "",
        "x": 260,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5111957458f23474",
        "type": "ui_button",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "80a942296819bcdc"
            ]
        ]
    },
    {
        "id": "68659c7fb211728a",
        "type": "ui_dropdown",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "File Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a file",
        "group": "a649fab2.daf3d8",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 890,
        "y": 1160,
        "wires": [
            [
                "0c1e38ad95a4438c"
            ]
        ]
    },
    {
        "id": "0cd61d0848ae8bdf",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Format data",
        "func": "msg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    let obj = {};\n    obj [msg.payload[i].name]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1160,
        "wires": [
            [
                "68659c7fb211728a",
                "b50b59519fa68022"
            ]
        ]
    },
    {
        "id": "9bf5c57d16b62e7f",
        "type": "ui_template",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "group": "a649fab2.daf3d8",
        "name": "",
        "order": 6,
        "width": 18,
        "height": 6,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "ce1b494cb98de31c",
        "type": "template",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>File Name</th><th>Size</th><th>Created</th><th>Changed</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/red/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 920,
        "y": 1220,
        "wires": [
            [
                "9bf5c57d16b62e7f"
            ]
        ]
    },
    {
        "id": "c778681fbb1d003f",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Convert timestamps",
        "func": "\nfor (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1220,
        "wires": [
            [
                "ce1b494cb98de31c"
            ]
        ]
    },
    {
        "id": "0c1e38ad95a4438c",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Save selection",
        "func": "// Save the file name selected from the dropdown in the flow context\nflow.set(\"fileselected\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "53309bd334780b7f",
        "type": "ui_button",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "",
        "group": "a649fab2.daf3d8",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 250,
        "y": 1320,
        "wires": [
            [
                "17563d9d9242889a"
            ]
        ]
    },
    {
        "id": "17563d9d9242889a",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\n// and delete the context/selection as we are deleting the file as well\nflow.set(\"fileselected\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1320,
        "wires": [
            [
                "727e73e098c75b22"
            ]
        ]
    },
    {
        "id": "727e73e098c75b22",
        "type": "file",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Delete file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 600,
        "y": 1320,
        "wires": [
            [
                "80a942296819bcdc"
            ]
        ]
    },
    {
        "id": "b50b59519fa68022",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "formating",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a390fd7a79f04326",
        "type": "comment",
        "z": "e28943498755ce53",
        "g": "92aa249eaec5de7d",
        "name": "Flow Parameters",
        "info": "",
        "x": 1120,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6e07a07f802f2a18",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1660,
        "wires": [
            [
                "80700e9d52863dfb"
            ]
        ]
    },
    {
        "id": "80700e9d52863dfb",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "function 12",
        "func": "let recipeHeaders = [\"file_code\", \"file_Name\", \"JSON_Data\"];\nlet obj = {\n    one :   1,\n    two :   [0,1,2],\n    three:  {\n        four    :   \"four\",\n        five    :   \"5 things\"\n    }\n}\nmsg.payload = \"INSERT INTO NodeRed.dbo.Recipes (\" + \n    recipeHeaders.toString() + \") VALUES (2, 'Tester', '\" + JSON.stringify(obj) + \"')\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1660,
        "wires": [
            [
                "6b5314cf87f51ec2",
                "a05bb29ac91da80e"
            ]
        ]
    },
    {
        "id": "6b5314cf87f51ec2",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1560,
        "wires": []
    },
    {
        "id": "a05bb29ac91da80e",
        "type": "MSSQL",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 630,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "3659caf0d0ab8711",
        "type": "inject",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1800,
        "wires": [
            [
                "c03c046254fa6da6"
            ]
        ]
    },
    {
        "id": "c03c046254fa6da6",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "function 13",
        "func": "msg.payload = \"select [JSON_Data] from [NodeRed].[dbo].[Recipes] where ID = 4\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1800,
        "wires": [
            [
                "c12b02288b168f4c"
            ]
        ]
    },
    {
        "id": "c12b02288b168f4c",
        "type": "MSSQL",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 600,
        "y": 1800,
        "wires": [
            [
                "e329c67db7a52247",
                "fdbf6524f3d4f24a"
            ]
        ]
    },
    {
        "id": "e329c67db7a52247",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1720,
        "wires": []
    },
    {
        "id": "fdbf6524f3d4f24a",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "function 15",
        "func": "msg.payload = msg.payload[0][\"JSON_Data\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1800,
        "wires": [
            [
                "e4862fd17c621ed5"
            ]
        ]
    },
    {
        "id": "e4862fd17c621ed5",
        "type": "json",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 1800,
        "wires": [
            [
                "da9d3c5816598d49",
                "a8ceb766fa76166e"
            ]
        ]
    },
    {
        "id": "da9d3c5816598d49",
        "type": "function",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "function 14",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "a8ceb766fa76166e",
        "type": "debug",
        "z": "e28943498755ce53",
        "g": "a6f0ad5143b4c699",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1720,
        "wires": []
    }
]